{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/yilia/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weixin.png","path":"img/weixin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2015-10-23DB常见操作.md","hash":"1acca3eab379f9627140706eadda97cdc394561c","modified":1656429489523},{"_id":"source/_posts/2017-9-27服务器被攻击勒索案例.md","hash":"b40b98c500c454156f895f8ab5d3b84965a1dd04","modified":1656427702971},{"_id":"source/_posts/2015-10-23常见环境问题及解决方案.md","hash":"f2d0e18921048a526c6c90bc91e282696dfeb51c","modified":1656428818459},{"_id":"source/_posts/2022-6-26git merge策略解析.md","hash":"848e6d3cad15c2ddb415f7c491230a6c9509f565","modified":1656428131475},{"_id":"source/_posts/2022-6-29Python常见问题.md","hash":"79db2c7837c2700edc1324c554b1b2d787aa0b9c","modified":1656490651202},{"_id":"source/_posts/2022-6-30git-lfs.md","hash":"6a544a4b82c7451381be4aca0e4c5046403af45d","modified":1656581522557},{"_id":"source/_posts/2022-6-30git底层原理.md","hash":"2520a4496e12bbbaab5f1516a4a44b56baefd816","modified":1656602529312},{"_id":"source/_posts/2022-6-28Linux常见问题.md","hash":"716cb5ebcc95136b5f622334ea3ced5d54815c18","modified":1656430547633},{"_id":"source/_posts/2022-6-30升级repo的好处.md","hash":"e33ffd6ca67375b282cc3a85356882e1b6df7468","modified":1656604866113},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1656398567722},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1656398567639},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1656398567639},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1656398567639},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1656398567640},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1656398567640},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1656398567648},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1656398567648},{"_id":"themes/yilia/_config.yml","hash":"0be633a7662b7b13a4cebe663887981a3f2034f9","modified":1656430985059},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1656398567742},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1656398567810},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1656398567649},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1656398567650},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1656398567650},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1656398567650},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1656398567650},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1656398567665},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1656398567651},{"_id":"themes/yilia/source/CNAME","hash":"f6851ef14855632a3db6ebac3079d959d808c8c3","modified":1656417979875},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1656398567807},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1656398567723},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1656398567724},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1656398567724},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1656398567724},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1656398567725},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1656398567742},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1656398567742},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1656398567809},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1656398567743},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1656398567802},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1656398567803},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1656398567803},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1656398567806},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1656398567804},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1656398567803},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1656398567804},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1656398567806},{"_id":"themes/yilia/source/img/favicon.ico","hash":"078838b5553f72be9ccc8e35d8e400878a291b79","modified":1651986633433},{"_id":"themes/yilia/source/img/head.jpg","hash":"d5333246af065c0cc9f77df9b2e2e0e013fb1fa3","modified":1654226753586},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1656398567806},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1656398567807},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1656398567669},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1656398567670},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1656398567672},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1656398567673},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1656398567674},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"4051ee275e7cb6ae79e1ca0d5249462403bfb03a","modified":1656431695095},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1656398567675},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1656398567702},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1656398567702},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1656398567703},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1656398567703},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1656398567701},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1656398567702},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1656398567703},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1656398567723},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1656398567723},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1656398567743},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1656398567744},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1656398567744},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1656398567745},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1656398567744},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1656398567745},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1656398567756},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1656398567758},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1656398567759},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1656398567769},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1656398567776},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1656398567776},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1656398567777},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1656398567777},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1656398567779},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1656398567779},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1656398567779},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1656398567780},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1656398567780},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1656398567780},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1656398567781},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1656398567781},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1656398567781},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1656398567782},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1656398567782},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1656398567783},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1656398567782},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1656398567783},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1656398567784},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1656398567784},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1656398567784},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1656398567785},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1656398567785},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1656398567800},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1656398567800},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1656398567800},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1656398567801},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1656398567801},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1656398567801},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1656398567704},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1656398567704},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1656398567704},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1656398567706},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1656398567705},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1656398567720},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1656398567721},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1656398567721},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1656398567772},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1656398567705},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1656398567773},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1656398567774},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1656398567775},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1656398567721},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1656398567761},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1656398567763},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1656398567765},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1656398567766},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1656398567778},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1656398567768},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1656398567778},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1656398567778},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1656398567809},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1656398567808},{"_id":"themes/yilia/source/img/alipay.png","hash":"d67fa17e8d9920e8937c3e3470eb76b4d2c978e9","modified":1656408814518},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1656398567722},{"_id":"themes/yilia/source/img/weixin.png","hash":"5695522539c0f8cecfbffdb0b477c56f8d2b2e46","modified":1656408834297},{"_id":"public/content.json","hash":"e5d6728c0359449342b6eaaf95584858aefde24a","modified":1656604871128},{"_id":"public/2022/06/30/2022-6-30git-lfs/index.html","hash":"25d681129415ed455e842d3dbd5e7d8ff1cdeada","modified":1656604871128},{"_id":"public/2022/06/30/2022-6-30git底层原理/index.html","hash":"1d1cade899670c7b1e16b6bccc505a46194ae4cb","modified":1656604871128},{"_id":"public/2022/06/30/2022-6-30升级repo的好处/index.html","hash":"b7d31f27e0b5e2364ab23b2c33848c3e4c7b45d8","modified":1656604871128},{"_id":"public/2022/06/29/2022-6-29Python常见问题/index.html","hash":"068b933615cbf37c352b39c9010667c3f227207f","modified":1656604871128},{"_id":"public/2022/06/28/2022-6-28Linux常见问题/index.html","hash":"824afdf2cbc54a48fbb7722b3793f161af892422","modified":1656604871128},{"_id":"public/2022/06/26/2022-6-26git merge策略解析/index.html","hash":"185f407d76e1da124b8b1552fd88a7f9f4fc5196","modified":1656604871128},{"_id":"public/2017/09/27/2017-9-27服务器被攻击勒索案例/index.html","hash":"51d90f2a324ad9090b66461ca71fa094640eb8e6","modified":1656604871128},{"_id":"public/2015/10/23/2015-10-23DB常见操作/index.html","hash":"6e842d97d2aa00a97f154606eb5b937a705a5fd3","modified":1656604871128},{"_id":"public/2015/10/23/2015-10-23常见环境问题及解决方案/index.html","hash":"a1dd03df5e8a5e67ea98b9266f4c417c01387eab","modified":1656604871128},{"_id":"public/archives/index.html","hash":"3caaecf3046acfd6d6b634c444aa06e1f4511023","modified":1656604871128},{"_id":"public/archives/2015/index.html","hash":"98c496341f5884b8e38e23ccaaf664788836ed2a","modified":1656604871128},{"_id":"public/archives/2015/10/index.html","hash":"89147a320e5d5e88019206948253cb6b9f6250e3","modified":1656604871128},{"_id":"public/archives/2017/index.html","hash":"7a544aaf81f4d540372e1f4967cd2fbf709d9c2a","modified":1656604871128},{"_id":"public/archives/2017/09/index.html","hash":"e944147af0ff75cc609ed8e4b7429ba8ad70ebee","modified":1656604871128},{"_id":"public/archives/2022/index.html","hash":"15f552d7240cbd34bb9129b216652d4c757d6009","modified":1656604871128},{"_id":"public/archives/2022/06/index.html","hash":"0cc4c9b42d8ecb2323af04016de5e7f11ff2202b","modified":1656604871128},{"_id":"public/tags/DB/index.html","hash":"304dd485406049c4387e076c102918b29a643163","modified":1656604871128},{"_id":"public/tags/环境/index.html","hash":"2cf872fe3c6e8663ad1d3c2fa20ae4b934c9213e","modified":1656604871128},{"_id":"public/tags/攻击/index.html","hash":"48eb2319a8826465151a9aa3bab02e07a4d6483c","modified":1656604871128},{"_id":"public/tags/git/index.html","hash":"5f265627594fcb8328ba5d0c5dbe1a59508746c9","modified":1656604871128},{"_id":"public/tags/merge/index.html","hash":"8b2d237111b52cdf4b779e885fb081ed4f1f048c","modified":1656604871128},{"_id":"public/tags/策略/index.html","hash":"d358233039b39a7b34bc5ce13c34408592880167","modified":1656604871128},{"_id":"public/tags/python/index.html","hash":"d894ff51e0f621ccb3fd64c6e1bfaee2a806bccd","modified":1656604871128},{"_id":"public/tags/lfs/index.html","hash":"2c83c194b72123094624e78aa22ed17b87311e02","modified":1656604871128},{"_id":"public/tags/linux/index.html","hash":"91e32b58002ba80742e18f2314fd9829d46f7298","modified":1656604871128},{"_id":"public/index.html","hash":"7d00d23f5011fff186ed435b51f168ea65427853","modified":1656604871128},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1656604871128},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1656604871128},{"_id":"public/CNAME","hash":"f6851ef14855632a3db6ebac3079d959d808c8c3","modified":1656604871128},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1656604871128},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1656604871128},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1656604871128},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1656604871128},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1656604871128},{"_id":"public/img/favicon.ico","hash":"078838b5553f72be9ccc8e35d8e400878a291b79","modified":1656604871128},{"_id":"public/img/head.jpg","hash":"d5333246af065c0cc9f77df9b2e2e0e013fb1fa3","modified":1656604871128},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1656604871128},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1656604871128},{"_id":"public/img/alipay.png","hash":"d67fa17e8d9920e8937c3e3470eb76b4d2c978e9","modified":1656604871128},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1656604871128},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1656604871128},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1656604871128},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1656604871128},{"_id":"public/img/weixin.png","hash":"5695522539c0f8cecfbffdb0b477c56f8d2b2e46","modified":1656604871128}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"DB常见操作","date":"2015-10-22T16:00:00.000Z","_content":"\nDB常见操作\n\n<!--more-->\n\n## 命令\n```\nDDL：数据定义语言\nDQL：数据查询语言\nDML：数据操作语言\nCREATE：创建一个新的表，一个表的视图，或者数据库中的其他对象。\nALTER：修改数据库中的某个已有的数据库对象，比如一个表。\nDROP：删除整个表，或者表的视图，或者数据库中的其他对象。\nINSERT：创建一条记录。\nUPDATE：修改记录。\nDELETE：删除记录。\nSELECT：从一个或多个表中检索某些记录。\n```\n\n\n## 运算符\n\n```\n算术运算符\n    +：加法 - 把运算符两边的值相加\ta + b 将得到 30\n    -：减法 - 左操作数减去右操作数\ta - b 将得到 -10\n    *：乘法 - 把运算符两边的值相乘\ta * b 将得到 200\n    /：除法 - 左操作数除以右操作数\tb / a 将得到 2\n    %：取模 - 左操作数除以右操作数后得到的余数\tb % a will give 0\n\n比较运算符\n    ==：检查两个操作数的值是否相等，如果相等则条件为真。\t(a == b) 不为真。\n    =：检查两个操作数的值是否相等，如果相等则条件为真。\t(a = b) 不为真。\n    !=：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a != b) 为真。\n    <>：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a <> b) 为真。\n    >：检查左操作数的值是否大于右操作数的值，如果是则条件为真。\t(a > b) 不为真。\n    <：检查左操作数的值是否小于右操作数的值，如果是则条件为真。\t(a < b) 为真。\n    >=：检查左操作数的值是否大于等于右操作数的值，如果是则条件为真。\t(a >= b) 不为真。\n    <=：检查左操作数的值是否小于等于右操作数的值，如果是则条件为真。\t(a <= b) 为真。\n    !<：检查左操作数的值是否不小于右操作数的值，如果是则条件为真。\t(a !< b) 为假。\n    !>：检查左操作数的值是否不大于右操作数的值，如果是则条件为真。\t(a !> b) 为真。\n\n逻辑运算符\n    AND：运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。\n    BETWEEN：运算符用于在给定最小值和最大值范围内的一系列值中搜索值。\n    EXISTS：运算符用于在满足一定条件的指定表中搜索行的存在。\n    IN：运算符用于把某个值与一系列指定列表的值进行比较。\n    NOT IN：运算符的对立面，用于把某个值与不在一系列指定列表的值进行比较。\n    LIKE：运算符用于把某个值与使用通配符运算符的相似值进行比较。\n    GLOB：运算符用于把某个值与使用通配符运算符的相似值进行比较。GLOB 与 LIKE 不同\t\t之处在于，它是大小写敏感的。\n    NOT：运算符是所用的逻辑运算符的对立面。比如 NOT EXISTS、NOT BETWEEN、NOT IN，等等。它是否定运算符。\n    OR：运算符用于结合一个 SQL 语句的 WHERE 子句中的多个条件。\n    IS NULL：运算符用于把某个值与 NULL 值进行比较。\n    IS：运算符与 = 相似。\n    IS NOT：运算符与 != 相似。\n    ||：连接两个不同的字符串，得到一个新的字符串。\n    UNIQUE：运算符搜索指定表中的每一行，确保唯一性（无重复）。\n\n位运算符\n    &：如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。\t(A & B) 将得到 \t\t12，即为 0000 1100\n    |：如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。\t(A | B) 将得到 61，即\t为 0011 1101\n    ~：二进制补码运算符是一元运算符，具有\"翻转\"位效应，即0变成1，1变成0。\t(~A ) 将得到 \t-61，即为 1100 0011，一个有符号二进制数的补码形式。\n    <<：二进制左移运算符。左操作数的值向左移动右操作数指定的位数。\tA << 2 将得到 240，即\t为 1111 0000\n    >>：二进制右移运算符。左操作数的值向右移动右操作数指定的位数。\tA >> 2 将得到 15，即为 0000 1111\n```\n\n## 基本用法\n\n```\n执行顺序：\n    1.from\n    2.join\n    3.where\n    4.group by\n    5.order by\n\n增删改查\n    insert into `user`(`field1`,`field2`) values(value1,value2);\n    delete from `user` where 范围;\n    update `user` set field1=value1 where 范围;\n    select * from `user`;\n\nlike子句\n    select * from `user` where name like 'xxx%';\n    select * from `user` where name like 'xxx_';\n    通配符：百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。\n\nglob子句\n    select * from `user` where name glob 'xxx*';\n    select * from `user` where name glob 'xxx?';\n    通配符：星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。\n\nlimit子句（从 offset 偏移量，截取 limit 条数）\n    select * from `user` limit 10 offset 0;\n\norder by子句\n    select * from `user` order by col1,col2 [ASC | DESC];\n\ngroup by子句\n    select * from `user` group by col1,col2 having 条件;\n\ndistinct（去除重复列，distinct后面的所有列）\n    select distinct col1,col2,col3 from `user`;\n```\n\n## 高级\n```\n约束：\n    not null 约束：确保某列不能有 NULL 值。\n    default 约束：当某列没有指定值时，为该列提供默认值。\n    unique 约束：确保某列中的所有值是不同的。\n    primary key 约束：唯一标识数据库表中的各行/记录。\n    check 约束：CHECK 约束确保某列中的所有值满足一定条件。\n    age ingeter check(age > 0),\n\n连接：\n    交叉连接 - CROSS JOIN（结果乘积）\n    内连接 - INNER JOIN（结果交集）\n    外连接 - OUTER JOIN（left、right）（on只对关联条件起作用）\n        select * from t1 a\n        left join t2 b on a.id = b.user_id\n\nunion：（union连接两个结果集，union all包括重复列）\n    select * from user1\n    union\n    select * from user2\n\n别名：\n    select a as name from user as A\n    select a name from user A\n\n触发器：\n\n索引：\n    create index index_name on table_name (column1, column2);\n    drop index salary_index;\n    select * from company indexed by salary_index WHERE salary > 5000;\n\n视图：\n    create view xxx_view as select * from `user`;\n    drop view xxx_view;\n\n事务：\n    BEGIN TRANSACTION：开始事务处理。\n    COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。\n    ROLLBACK：回滚所做的更改。\n    事务控制命令只与 DML 命令 INSERT、UPDATE 和 DELETE 一起使用。他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的。\n\nautoincrement：\n    column1 integer autoincrement,\n\n集合判断：\n    (case \n    when A.status_flag='0' then '退回' \n    when A.status_flag='1' then '新增' \n    when A.status_flag='2' then '待复核' \n    else '其他' \n    end\n    ) status_name\n\n函数：\n    1：SQLite COUNT 函数\n        SQLite COUNT 聚集函数是用来计算一个数据库表中的行数。\n    2：SQLite MAX 函数\n        SQLite MAX 聚合函数允许我们选择某列的最大值。\n    3：SQLite MIN 函数\n        SQLite MIN 聚合函数允许我们选择某列的最小值。\n    4：SQLite AVG 函数\n        SQLite AVG 聚合函数计算某列的平均值。\n    5：SQLite SUM 函数\n        SQLite SUM 聚合函数允许为一个数值列计算总和。\n    6：SQLite RANDOM 函数\n        SQLite RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。\n    7：SQLite ABS 函数\n        SQLite ABS 函数返回数值参数的绝对值。\n    8：SQLite UPPER 函数\n        SQLite UPPER 函数把字符串转换为大写字母。\n    9：SQLite LOWER 函数\n        SQLite LOWER 函数把字符串转换为小写字母。\n    10：SQLite LENGTH 函数\n        SQLite LENGTH 函数返回字符串的长度。\n    11：SQLite sqlite_version 函数\n        SQLite sqlite_version 函数返回 SQLite 库的版本。\n            \n```\n\n## Mysql常用操作\n\n```\nmysql数据类型\n    | 类型 | 描述 |\n    | int/integer | int同integer |\n    | char | 定长字符串 |\n    | varchar | 变长字符串 |\n    | text | 长文本 |\n\n创建表（可放not null和default）\n    drop table if exists `user`;\n    create table `user` (\n     `id` int auto_increment,\n     `name` varchar(32),\n     `age` int,\n     primary key (`id`)\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n连接mysql，并修改密码\n    mysql -u root -p\n    set password for 'root'@'localhost' = password('newpass');\n\n创建删除数据库\n    drop database `jfinal`;\n    create database `jfinal` CHARACTER SET utf8 COLLATE utf8_general_ci;\n\n修改root密码\n    use mysql;\n    update user set password=password('new password') where user='root';\n\n创建远程用户（删除、创建、授权）\n    drop user 'jmm'@'%';\n    create user 'jmm'@'%' identified by 'jmm';\n    grant all on *.* to 'jmm'@'%';\n\n查看用户\n    select Host,User from mysql.user;\n\n查看 设置 字符集\n    show VARIABLES like 'character%';\n    set character_set_client=utf8;\n```\n\n## sqlite常用操作\n\n```\n创建表\n    drop table if exists `user`;\n    create table if no exists `user` (\n     id integer primary key,    -- integer primary key即为自增\n     name varchar(32),\n     age integer\n    );\n\n查表信息\n    select name from sqlite_master;\n\n查询出某个表的所有字段信息\n    PRAGMA table_info([tablename]);\n```\n","source":"_posts/2015-10-23DB常见操作.md","raw":"---\ntitle: DB常见操作\ndate: 2015-10-23\ntags: [DB]\n---\n\nDB常见操作\n\n<!--more-->\n\n## 命令\n```\nDDL：数据定义语言\nDQL：数据查询语言\nDML：数据操作语言\nCREATE：创建一个新的表，一个表的视图，或者数据库中的其他对象。\nALTER：修改数据库中的某个已有的数据库对象，比如一个表。\nDROP：删除整个表，或者表的视图，或者数据库中的其他对象。\nINSERT：创建一条记录。\nUPDATE：修改记录。\nDELETE：删除记录。\nSELECT：从一个或多个表中检索某些记录。\n```\n\n\n## 运算符\n\n```\n算术运算符\n    +：加法 - 把运算符两边的值相加\ta + b 将得到 30\n    -：减法 - 左操作数减去右操作数\ta - b 将得到 -10\n    *：乘法 - 把运算符两边的值相乘\ta * b 将得到 200\n    /：除法 - 左操作数除以右操作数\tb / a 将得到 2\n    %：取模 - 左操作数除以右操作数后得到的余数\tb % a will give 0\n\n比较运算符\n    ==：检查两个操作数的值是否相等，如果相等则条件为真。\t(a == b) 不为真。\n    =：检查两个操作数的值是否相等，如果相等则条件为真。\t(a = b) 不为真。\n    !=：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a != b) 为真。\n    <>：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a <> b) 为真。\n    >：检查左操作数的值是否大于右操作数的值，如果是则条件为真。\t(a > b) 不为真。\n    <：检查左操作数的值是否小于右操作数的值，如果是则条件为真。\t(a < b) 为真。\n    >=：检查左操作数的值是否大于等于右操作数的值，如果是则条件为真。\t(a >= b) 不为真。\n    <=：检查左操作数的值是否小于等于右操作数的值，如果是则条件为真。\t(a <= b) 为真。\n    !<：检查左操作数的值是否不小于右操作数的值，如果是则条件为真。\t(a !< b) 为假。\n    !>：检查左操作数的值是否不大于右操作数的值，如果是则条件为真。\t(a !> b) 为真。\n\n逻辑运算符\n    AND：运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。\n    BETWEEN：运算符用于在给定最小值和最大值范围内的一系列值中搜索值。\n    EXISTS：运算符用于在满足一定条件的指定表中搜索行的存在。\n    IN：运算符用于把某个值与一系列指定列表的值进行比较。\n    NOT IN：运算符的对立面，用于把某个值与不在一系列指定列表的值进行比较。\n    LIKE：运算符用于把某个值与使用通配符运算符的相似值进行比较。\n    GLOB：运算符用于把某个值与使用通配符运算符的相似值进行比较。GLOB 与 LIKE 不同\t\t之处在于，它是大小写敏感的。\n    NOT：运算符是所用的逻辑运算符的对立面。比如 NOT EXISTS、NOT BETWEEN、NOT IN，等等。它是否定运算符。\n    OR：运算符用于结合一个 SQL 语句的 WHERE 子句中的多个条件。\n    IS NULL：运算符用于把某个值与 NULL 值进行比较。\n    IS：运算符与 = 相似。\n    IS NOT：运算符与 != 相似。\n    ||：连接两个不同的字符串，得到一个新的字符串。\n    UNIQUE：运算符搜索指定表中的每一行，确保唯一性（无重复）。\n\n位运算符\n    &：如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。\t(A & B) 将得到 \t\t12，即为 0000 1100\n    |：如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。\t(A | B) 将得到 61，即\t为 0011 1101\n    ~：二进制补码运算符是一元运算符，具有\"翻转\"位效应，即0变成1，1变成0。\t(~A ) 将得到 \t-61，即为 1100 0011，一个有符号二进制数的补码形式。\n    <<：二进制左移运算符。左操作数的值向左移动右操作数指定的位数。\tA << 2 将得到 240，即\t为 1111 0000\n    >>：二进制右移运算符。左操作数的值向右移动右操作数指定的位数。\tA >> 2 将得到 15，即为 0000 1111\n```\n\n## 基本用法\n\n```\n执行顺序：\n    1.from\n    2.join\n    3.where\n    4.group by\n    5.order by\n\n增删改查\n    insert into `user`(`field1`,`field2`) values(value1,value2);\n    delete from `user` where 范围;\n    update `user` set field1=value1 where 范围;\n    select * from `user`;\n\nlike子句\n    select * from `user` where name like 'xxx%';\n    select * from `user` where name like 'xxx_';\n    通配符：百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。\n\nglob子句\n    select * from `user` where name glob 'xxx*';\n    select * from `user` where name glob 'xxx?';\n    通配符：星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。\n\nlimit子句（从 offset 偏移量，截取 limit 条数）\n    select * from `user` limit 10 offset 0;\n\norder by子句\n    select * from `user` order by col1,col2 [ASC | DESC];\n\ngroup by子句\n    select * from `user` group by col1,col2 having 条件;\n\ndistinct（去除重复列，distinct后面的所有列）\n    select distinct col1,col2,col3 from `user`;\n```\n\n## 高级\n```\n约束：\n    not null 约束：确保某列不能有 NULL 值。\n    default 约束：当某列没有指定值时，为该列提供默认值。\n    unique 约束：确保某列中的所有值是不同的。\n    primary key 约束：唯一标识数据库表中的各行/记录。\n    check 约束：CHECK 约束确保某列中的所有值满足一定条件。\n    age ingeter check(age > 0),\n\n连接：\n    交叉连接 - CROSS JOIN（结果乘积）\n    内连接 - INNER JOIN（结果交集）\n    外连接 - OUTER JOIN（left、right）（on只对关联条件起作用）\n        select * from t1 a\n        left join t2 b on a.id = b.user_id\n\nunion：（union连接两个结果集，union all包括重复列）\n    select * from user1\n    union\n    select * from user2\n\n别名：\n    select a as name from user as A\n    select a name from user A\n\n触发器：\n\n索引：\n    create index index_name on table_name (column1, column2);\n    drop index salary_index;\n    select * from company indexed by salary_index WHERE salary > 5000;\n\n视图：\n    create view xxx_view as select * from `user`;\n    drop view xxx_view;\n\n事务：\n    BEGIN TRANSACTION：开始事务处理。\n    COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。\n    ROLLBACK：回滚所做的更改。\n    事务控制命令只与 DML 命令 INSERT、UPDATE 和 DELETE 一起使用。他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的。\n\nautoincrement：\n    column1 integer autoincrement,\n\n集合判断：\n    (case \n    when A.status_flag='0' then '退回' \n    when A.status_flag='1' then '新增' \n    when A.status_flag='2' then '待复核' \n    else '其他' \n    end\n    ) status_name\n\n函数：\n    1：SQLite COUNT 函数\n        SQLite COUNT 聚集函数是用来计算一个数据库表中的行数。\n    2：SQLite MAX 函数\n        SQLite MAX 聚合函数允许我们选择某列的最大值。\n    3：SQLite MIN 函数\n        SQLite MIN 聚合函数允许我们选择某列的最小值。\n    4：SQLite AVG 函数\n        SQLite AVG 聚合函数计算某列的平均值。\n    5：SQLite SUM 函数\n        SQLite SUM 聚合函数允许为一个数值列计算总和。\n    6：SQLite RANDOM 函数\n        SQLite RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。\n    7：SQLite ABS 函数\n        SQLite ABS 函数返回数值参数的绝对值。\n    8：SQLite UPPER 函数\n        SQLite UPPER 函数把字符串转换为大写字母。\n    9：SQLite LOWER 函数\n        SQLite LOWER 函数把字符串转换为小写字母。\n    10：SQLite LENGTH 函数\n        SQLite LENGTH 函数返回字符串的长度。\n    11：SQLite sqlite_version 函数\n        SQLite sqlite_version 函数返回 SQLite 库的版本。\n            \n```\n\n## Mysql常用操作\n\n```\nmysql数据类型\n    | 类型 | 描述 |\n    | int/integer | int同integer |\n    | char | 定长字符串 |\n    | varchar | 变长字符串 |\n    | text | 长文本 |\n\n创建表（可放not null和default）\n    drop table if exists `user`;\n    create table `user` (\n     `id` int auto_increment,\n     `name` varchar(32),\n     `age` int,\n     primary key (`id`)\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n连接mysql，并修改密码\n    mysql -u root -p\n    set password for 'root'@'localhost' = password('newpass');\n\n创建删除数据库\n    drop database `jfinal`;\n    create database `jfinal` CHARACTER SET utf8 COLLATE utf8_general_ci;\n\n修改root密码\n    use mysql;\n    update user set password=password('new password') where user='root';\n\n创建远程用户（删除、创建、授权）\n    drop user 'jmm'@'%';\n    create user 'jmm'@'%' identified by 'jmm';\n    grant all on *.* to 'jmm'@'%';\n\n查看用户\n    select Host,User from mysql.user;\n\n查看 设置 字符集\n    show VARIABLES like 'character%';\n    set character_set_client=utf8;\n```\n\n## sqlite常用操作\n\n```\n创建表\n    drop table if exists `user`;\n    create table if no exists `user` (\n     id integer primary key,    -- integer primary key即为自增\n     name varchar(32),\n     age integer\n    );\n\n查表信息\n    select name from sqlite_master;\n\n查询出某个表的所有字段信息\n    PRAGMA table_info([tablename]);\n```\n","slug":"2015-10-23DB常见操作","published":1,"updated":"2022-06-28T15:18:09.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnj00000a4vvbvota9no","content":"<p>DB常见操作</p>\n<span id=\"more\"></span>\n\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DDL：数据定义语言</span><br><span class=\"line\">DQL：数据查询语言</span><br><span class=\"line\">DML：数据操作语言</span><br><span class=\"line\">CREATE：创建一个新的表，一个表的视图，或者数据库中的其他对象。</span><br><span class=\"line\">ALTER：修改数据库中的某个已有的数据库对象，比如一个表。</span><br><span class=\"line\">DROP：删除整个表，或者表的视图，或者数据库中的其他对象。</span><br><span class=\"line\">INSERT：创建一条记录。</span><br><span class=\"line\">UPDATE：修改记录。</span><br><span class=\"line\">DELETE：删除记录。</span><br><span class=\"line\">SELECT：从一个或多个表中检索某些记录。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">算术运算符</span><br><span class=\"line\">    +：加法 - 把运算符两边的值相加\ta + b 将得到 30</span><br><span class=\"line\">    -：减法 - 左操作数减去右操作数\ta - b 将得到 -10</span><br><span class=\"line\">    *：乘法 - 把运算符两边的值相乘\ta * b 将得到 200</span><br><span class=\"line\">    /：除法 - 左操作数除以右操作数\tb / a 将得到 2</span><br><span class=\"line\">    %：取模 - 左操作数除以右操作数后得到的余数\tb % a will give 0</span><br><span class=\"line\"></span><br><span class=\"line\">比较运算符</span><br><span class=\"line\">    ==：检查两个操作数的值是否相等，如果相等则条件为真。\t(a == b) 不为真。</span><br><span class=\"line\">    =：检查两个操作数的值是否相等，如果相等则条件为真。\t(a = b) 不为真。</span><br><span class=\"line\">    !=：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a != b) 为真。</span><br><span class=\"line\">    &lt;&gt;：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a &lt;&gt; b) 为真。</span><br><span class=\"line\">    &gt;：检查左操作数的值是否大于右操作数的值，如果是则条件为真。\t(a &gt; b) 不为真。</span><br><span class=\"line\">    &lt;：检查左操作数的值是否小于右操作数的值，如果是则条件为真。\t(a &lt; b) 为真。</span><br><span class=\"line\">    &gt;=：检查左操作数的值是否大于等于右操作数的值，如果是则条件为真。\t(a &gt;= b) 不为真。</span><br><span class=\"line\">    &lt;=：检查左操作数的值是否小于等于右操作数的值，如果是则条件为真。\t(a &lt;= b) 为真。</span><br><span class=\"line\">    !&lt;：检查左操作数的值是否不小于右操作数的值，如果是则条件为真。\t(a !&lt; b) 为假。</span><br><span class=\"line\">    !&gt;：检查左操作数的值是否不大于右操作数的值，如果是则条件为真。\t(a !&gt; b) 为真。</span><br><span class=\"line\"></span><br><span class=\"line\">逻辑运算符</span><br><span class=\"line\">    AND：运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。</span><br><span class=\"line\">    BETWEEN：运算符用于在给定最小值和最大值范围内的一系列值中搜索值。</span><br><span class=\"line\">    EXISTS：运算符用于在满足一定条件的指定表中搜索行的存在。</span><br><span class=\"line\">    IN：运算符用于把某个值与一系列指定列表的值进行比较。</span><br><span class=\"line\">    NOT IN：运算符的对立面，用于把某个值与不在一系列指定列表的值进行比较。</span><br><span class=\"line\">    LIKE：运算符用于把某个值与使用通配符运算符的相似值进行比较。</span><br><span class=\"line\">    GLOB：运算符用于把某个值与使用通配符运算符的相似值进行比较。GLOB 与 LIKE 不同\t\t之处在于，它是大小写敏感的。</span><br><span class=\"line\">    NOT：运算符是所用的逻辑运算符的对立面。比如 NOT EXISTS、NOT BETWEEN、NOT IN，等等。它是否定运算符。</span><br><span class=\"line\">    OR：运算符用于结合一个 SQL 语句的 WHERE 子句中的多个条件。</span><br><span class=\"line\">    IS NULL：运算符用于把某个值与 NULL 值进行比较。</span><br><span class=\"line\">    IS：运算符与 = 相似。</span><br><span class=\"line\">    IS NOT：运算符与 != 相似。</span><br><span class=\"line\">    ||：连接两个不同的字符串，得到一个新的字符串。</span><br><span class=\"line\">    UNIQUE：运算符搜索指定表中的每一行，确保唯一性（无重复）。</span><br><span class=\"line\"></span><br><span class=\"line\">位运算符</span><br><span class=\"line\">    &amp;：如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。\t(A &amp; B) 将得到 \t\t12，即为 0000 1100</span><br><span class=\"line\">    |：如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。\t(A | B) 将得到 61，即\t为 0011 1101</span><br><span class=\"line\">    ~：二进制补码运算符是一元运算符，具有&quot;翻转&quot;位效应，即0变成1，1变成0。\t(~A ) 将得到 \t-61，即为 1100 0011，一个有符号二进制数的补码形式。</span><br><span class=\"line\">    &lt;&lt;：二进制左移运算符。左操作数的值向左移动右操作数指定的位数。\tA &lt;&lt; 2 将得到 240，即\t为 1111 0000</span><br><span class=\"line\">    &gt;&gt;：二进制右移运算符。左操作数的值向右移动右操作数指定的位数。\tA &gt;&gt; 2 将得到 15，即为 0000 1111</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行顺序：</span><br><span class=\"line\">    1.from</span><br><span class=\"line\">    2.join</span><br><span class=\"line\">    3.where</span><br><span class=\"line\">    4.group by</span><br><span class=\"line\">    5.order by</span><br><span class=\"line\"></span><br><span class=\"line\">增删改查</span><br><span class=\"line\">    insert into `user`(`field1`,`field2`) values(value1,value2);</span><br><span class=\"line\">    delete from `user` where 范围;</span><br><span class=\"line\">    update `user` set field1=value1 where 范围;</span><br><span class=\"line\">    select * from `user`;</span><br><span class=\"line\"></span><br><span class=\"line\">like子句</span><br><span class=\"line\">    select * from `user` where name like &#x27;xxx%&#x27;;</span><br><span class=\"line\">    select * from `user` where name like &#x27;xxx_&#x27;;</span><br><span class=\"line\">    通配符：百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。</span><br><span class=\"line\"></span><br><span class=\"line\">glob子句</span><br><span class=\"line\">    select * from `user` where name glob &#x27;xxx*&#x27;;</span><br><span class=\"line\">    select * from `user` where name glob &#x27;xxx?&#x27;;</span><br><span class=\"line\">    通配符：星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。</span><br><span class=\"line\"></span><br><span class=\"line\">limit子句（从 offset 偏移量，截取 limit 条数）</span><br><span class=\"line\">    select * from `user` limit 10 offset 0;</span><br><span class=\"line\"></span><br><span class=\"line\">order by子句</span><br><span class=\"line\">    select * from `user` order by col1,col2 [ASC | DESC];</span><br><span class=\"line\"></span><br><span class=\"line\">group by子句</span><br><span class=\"line\">    select * from `user` group by col1,col2 having 条件;</span><br><span class=\"line\"></span><br><span class=\"line\">distinct（去除重复列，distinct后面的所有列）</span><br><span class=\"line\">    select distinct col1,col2,col3 from `user`;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">约束：</span><br><span class=\"line\">    not null 约束：确保某列不能有 NULL 值。</span><br><span class=\"line\">    default 约束：当某列没有指定值时，为该列提供默认值。</span><br><span class=\"line\">    unique 约束：确保某列中的所有值是不同的。</span><br><span class=\"line\">    primary key 约束：唯一标识数据库表中的各行/记录。</span><br><span class=\"line\">    check 约束：CHECK 约束确保某列中的所有值满足一定条件。</span><br><span class=\"line\">    age ingeter check(age &gt; 0),</span><br><span class=\"line\"></span><br><span class=\"line\">连接：</span><br><span class=\"line\">    交叉连接 - CROSS JOIN（结果乘积）</span><br><span class=\"line\">    内连接 - INNER JOIN（结果交集）</span><br><span class=\"line\">    外连接 - OUTER JOIN（left、right）（on只对关联条件起作用）</span><br><span class=\"line\">        select * from t1 a</span><br><span class=\"line\">        left join t2 b on a.id = b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\">union：（union连接两个结果集，union all包括重复列）</span><br><span class=\"line\">    select * from user1</span><br><span class=\"line\">    union</span><br><span class=\"line\">    select * from user2</span><br><span class=\"line\"></span><br><span class=\"line\">别名：</span><br><span class=\"line\">    select a as name from user as A</span><br><span class=\"line\">    select a name from user A</span><br><span class=\"line\"></span><br><span class=\"line\">触发器：</span><br><span class=\"line\"></span><br><span class=\"line\">索引：</span><br><span class=\"line\">    create index index_name on table_name (column1, column2);</span><br><span class=\"line\">    drop index salary_index;</span><br><span class=\"line\">    select * from company indexed by salary_index WHERE salary &gt; 5000;</span><br><span class=\"line\"></span><br><span class=\"line\">视图：</span><br><span class=\"line\">    create view xxx_view as select * from `user`;</span><br><span class=\"line\">    drop view xxx_view;</span><br><span class=\"line\"></span><br><span class=\"line\">事务：</span><br><span class=\"line\">    BEGIN TRANSACTION：开始事务处理。</span><br><span class=\"line\">    COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。</span><br><span class=\"line\">    ROLLBACK：回滚所做的更改。</span><br><span class=\"line\">    事务控制命令只与 DML 命令 INSERT、UPDATE 和 DELETE 一起使用。他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的。</span><br><span class=\"line\"></span><br><span class=\"line\">autoincrement：</span><br><span class=\"line\">    column1 integer autoincrement,</span><br><span class=\"line\"></span><br><span class=\"line\">集合判断：</span><br><span class=\"line\">    (case </span><br><span class=\"line\">    when A.status_flag=&#x27;0&#x27; then &#x27;退回&#x27; </span><br><span class=\"line\">    when A.status_flag=&#x27;1&#x27; then &#x27;新增&#x27; </span><br><span class=\"line\">    when A.status_flag=&#x27;2&#x27; then &#x27;待复核&#x27; </span><br><span class=\"line\">    else &#x27;其他&#x27; </span><br><span class=\"line\">    end</span><br><span class=\"line\">    ) status_name</span><br><span class=\"line\"></span><br><span class=\"line\">函数：</span><br><span class=\"line\">    1：SQLite COUNT 函数</span><br><span class=\"line\">        SQLite COUNT 聚集函数是用来计算一个数据库表中的行数。</span><br><span class=\"line\">    2：SQLite MAX 函数</span><br><span class=\"line\">        SQLite MAX 聚合函数允许我们选择某列的最大值。</span><br><span class=\"line\">    3：SQLite MIN 函数</span><br><span class=\"line\">        SQLite MIN 聚合函数允许我们选择某列的最小值。</span><br><span class=\"line\">    4：SQLite AVG 函数</span><br><span class=\"line\">        SQLite AVG 聚合函数计算某列的平均值。</span><br><span class=\"line\">    5：SQLite SUM 函数</span><br><span class=\"line\">        SQLite SUM 聚合函数允许为一个数值列计算总和。</span><br><span class=\"line\">    6：SQLite RANDOM 函数</span><br><span class=\"line\">        SQLite RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。</span><br><span class=\"line\">    7：SQLite ABS 函数</span><br><span class=\"line\">        SQLite ABS 函数返回数值参数的绝对值。</span><br><span class=\"line\">    8：SQLite UPPER 函数</span><br><span class=\"line\">        SQLite UPPER 函数把字符串转换为大写字母。</span><br><span class=\"line\">    9：SQLite LOWER 函数</span><br><span class=\"line\">        SQLite LOWER 函数把字符串转换为小写字母。</span><br><span class=\"line\">    10：SQLite LENGTH 函数</span><br><span class=\"line\">        SQLite LENGTH 函数返回字符串的长度。</span><br><span class=\"line\">    11：SQLite sqlite_version 函数</span><br><span class=\"line\">        SQLite sqlite_version 函数返回 SQLite 库的版本。</span><br><span class=\"line\">            </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mysql常用操作\"><a href=\"#Mysql常用操作\" class=\"headerlink\" title=\"Mysql常用操作\"></a>Mysql常用操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql数据类型</span><br><span class=\"line\">    | 类型 | 描述 |</span><br><span class=\"line\">    | int/integer | int同integer |</span><br><span class=\"line\">    | char | 定长字符串 |</span><br><span class=\"line\">    | varchar | 变长字符串 |</span><br><span class=\"line\">    | text | 长文本 |</span><br><span class=\"line\"></span><br><span class=\"line\">创建表（可放not null和default）</span><br><span class=\"line\">    drop table if exists `user`;</span><br><span class=\"line\">    create table `user` (</span><br><span class=\"line\">     `id` int auto_increment,</span><br><span class=\"line\">     `name` varchar(32),</span><br><span class=\"line\">     `age` int,</span><br><span class=\"line\">     primary key (`id`)</span><br><span class=\"line\">    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">连接mysql，并修改密码</span><br><span class=\"line\">    mysql -u root -p</span><br><span class=\"line\">    set password for &#x27;root&#x27;@&#x27;localhost&#x27; = password(&#x27;newpass&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">创建删除数据库</span><br><span class=\"line\">    drop database `jfinal`;</span><br><span class=\"line\">    create database `jfinal` CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">修改root密码</span><br><span class=\"line\">    use mysql;</span><br><span class=\"line\">    update user set password=password(&#x27;new password&#x27;) where user=&#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">创建远程用户（删除、创建、授权）</span><br><span class=\"line\">    drop user &#x27;jmm&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">    create user &#x27;jmm&#x27;@&#x27;%&#x27; identified by &#x27;jmm&#x27;;</span><br><span class=\"line\">    grant all on *.* to &#x27;jmm&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">查看用户</span><br><span class=\"line\">    select Host,User from mysql.user;</span><br><span class=\"line\"></span><br><span class=\"line\">查看 设置 字符集</span><br><span class=\"line\">    show VARIABLES like &#x27;character%&#x27;;</span><br><span class=\"line\">    set character_set_client=utf8;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sqlite常用操作\"><a href=\"#sqlite常用操作\" class=\"headerlink\" title=\"sqlite常用操作\"></a>sqlite常用操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建表</span><br><span class=\"line\">    drop table if exists `user`;</span><br><span class=\"line\">    create table if no exists `user` (</span><br><span class=\"line\">     id integer primary key,    -- integer primary key即为自增</span><br><span class=\"line\">     name varchar(32),</span><br><span class=\"line\">     age integer</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">查表信息</span><br><span class=\"line\">    select name from sqlite_master;</span><br><span class=\"line\"></span><br><span class=\"line\">查询出某个表的所有字段信息</span><br><span class=\"line\">    PRAGMA table_info([tablename]);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>DB常见操作</p>","more":"<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DDL：数据定义语言</span><br><span class=\"line\">DQL：数据查询语言</span><br><span class=\"line\">DML：数据操作语言</span><br><span class=\"line\">CREATE：创建一个新的表，一个表的视图，或者数据库中的其他对象。</span><br><span class=\"line\">ALTER：修改数据库中的某个已有的数据库对象，比如一个表。</span><br><span class=\"line\">DROP：删除整个表，或者表的视图，或者数据库中的其他对象。</span><br><span class=\"line\">INSERT：创建一条记录。</span><br><span class=\"line\">UPDATE：修改记录。</span><br><span class=\"line\">DELETE：删除记录。</span><br><span class=\"line\">SELECT：从一个或多个表中检索某些记录。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">算术运算符</span><br><span class=\"line\">    +：加法 - 把运算符两边的值相加\ta + b 将得到 30</span><br><span class=\"line\">    -：减法 - 左操作数减去右操作数\ta - b 将得到 -10</span><br><span class=\"line\">    *：乘法 - 把运算符两边的值相乘\ta * b 将得到 200</span><br><span class=\"line\">    /：除法 - 左操作数除以右操作数\tb / a 将得到 2</span><br><span class=\"line\">    %：取模 - 左操作数除以右操作数后得到的余数\tb % a will give 0</span><br><span class=\"line\"></span><br><span class=\"line\">比较运算符</span><br><span class=\"line\">    ==：检查两个操作数的值是否相等，如果相等则条件为真。\t(a == b) 不为真。</span><br><span class=\"line\">    =：检查两个操作数的值是否相等，如果相等则条件为真。\t(a = b) 不为真。</span><br><span class=\"line\">    !=：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a != b) 为真。</span><br><span class=\"line\">    &lt;&gt;：检查两个操作数的值是否相等，如果不相等则条件为真。\t(a &lt;&gt; b) 为真。</span><br><span class=\"line\">    &gt;：检查左操作数的值是否大于右操作数的值，如果是则条件为真。\t(a &gt; b) 不为真。</span><br><span class=\"line\">    &lt;：检查左操作数的值是否小于右操作数的值，如果是则条件为真。\t(a &lt; b) 为真。</span><br><span class=\"line\">    &gt;=：检查左操作数的值是否大于等于右操作数的值，如果是则条件为真。\t(a &gt;= b) 不为真。</span><br><span class=\"line\">    &lt;=：检查左操作数的值是否小于等于右操作数的值，如果是则条件为真。\t(a &lt;= b) 为真。</span><br><span class=\"line\">    !&lt;：检查左操作数的值是否不小于右操作数的值，如果是则条件为真。\t(a !&lt; b) 为假。</span><br><span class=\"line\">    !&gt;：检查左操作数的值是否不大于右操作数的值，如果是则条件为真。\t(a !&gt; b) 为真。</span><br><span class=\"line\"></span><br><span class=\"line\">逻辑运算符</span><br><span class=\"line\">    AND：运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。</span><br><span class=\"line\">    BETWEEN：运算符用于在给定最小值和最大值范围内的一系列值中搜索值。</span><br><span class=\"line\">    EXISTS：运算符用于在满足一定条件的指定表中搜索行的存在。</span><br><span class=\"line\">    IN：运算符用于把某个值与一系列指定列表的值进行比较。</span><br><span class=\"line\">    NOT IN：运算符的对立面，用于把某个值与不在一系列指定列表的值进行比较。</span><br><span class=\"line\">    LIKE：运算符用于把某个值与使用通配符运算符的相似值进行比较。</span><br><span class=\"line\">    GLOB：运算符用于把某个值与使用通配符运算符的相似值进行比较。GLOB 与 LIKE 不同\t\t之处在于，它是大小写敏感的。</span><br><span class=\"line\">    NOT：运算符是所用的逻辑运算符的对立面。比如 NOT EXISTS、NOT BETWEEN、NOT IN，等等。它是否定运算符。</span><br><span class=\"line\">    OR：运算符用于结合一个 SQL 语句的 WHERE 子句中的多个条件。</span><br><span class=\"line\">    IS NULL：运算符用于把某个值与 NULL 值进行比较。</span><br><span class=\"line\">    IS：运算符与 = 相似。</span><br><span class=\"line\">    IS NOT：运算符与 != 相似。</span><br><span class=\"line\">    ||：连接两个不同的字符串，得到一个新的字符串。</span><br><span class=\"line\">    UNIQUE：运算符搜索指定表中的每一行，确保唯一性（无重复）。</span><br><span class=\"line\"></span><br><span class=\"line\">位运算符</span><br><span class=\"line\">    &amp;：如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。\t(A &amp; B) 将得到 \t\t12，即为 0000 1100</span><br><span class=\"line\">    |：如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。\t(A | B) 将得到 61，即\t为 0011 1101</span><br><span class=\"line\">    ~：二进制补码运算符是一元运算符，具有&quot;翻转&quot;位效应，即0变成1，1变成0。\t(~A ) 将得到 \t-61，即为 1100 0011，一个有符号二进制数的补码形式。</span><br><span class=\"line\">    &lt;&lt;：二进制左移运算符。左操作数的值向左移动右操作数指定的位数。\tA &lt;&lt; 2 将得到 240，即\t为 1111 0000</span><br><span class=\"line\">    &gt;&gt;：二进制右移运算符。左操作数的值向右移动右操作数指定的位数。\tA &gt;&gt; 2 将得到 15，即为 0000 1111</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行顺序：</span><br><span class=\"line\">    1.from</span><br><span class=\"line\">    2.join</span><br><span class=\"line\">    3.where</span><br><span class=\"line\">    4.group by</span><br><span class=\"line\">    5.order by</span><br><span class=\"line\"></span><br><span class=\"line\">增删改查</span><br><span class=\"line\">    insert into `user`(`field1`,`field2`) values(value1,value2);</span><br><span class=\"line\">    delete from `user` where 范围;</span><br><span class=\"line\">    update `user` set field1=value1 where 范围;</span><br><span class=\"line\">    select * from `user`;</span><br><span class=\"line\"></span><br><span class=\"line\">like子句</span><br><span class=\"line\">    select * from `user` where name like &#x27;xxx%&#x27;;</span><br><span class=\"line\">    select * from `user` where name like &#x27;xxx_&#x27;;</span><br><span class=\"line\">    通配符：百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。</span><br><span class=\"line\"></span><br><span class=\"line\">glob子句</span><br><span class=\"line\">    select * from `user` where name glob &#x27;xxx*&#x27;;</span><br><span class=\"line\">    select * from `user` where name glob &#x27;xxx?&#x27;;</span><br><span class=\"line\">    通配符：星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。</span><br><span class=\"line\"></span><br><span class=\"line\">limit子句（从 offset 偏移量，截取 limit 条数）</span><br><span class=\"line\">    select * from `user` limit 10 offset 0;</span><br><span class=\"line\"></span><br><span class=\"line\">order by子句</span><br><span class=\"line\">    select * from `user` order by col1,col2 [ASC | DESC];</span><br><span class=\"line\"></span><br><span class=\"line\">group by子句</span><br><span class=\"line\">    select * from `user` group by col1,col2 having 条件;</span><br><span class=\"line\"></span><br><span class=\"line\">distinct（去除重复列，distinct后面的所有列）</span><br><span class=\"line\">    select distinct col1,col2,col3 from `user`;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">约束：</span><br><span class=\"line\">    not null 约束：确保某列不能有 NULL 值。</span><br><span class=\"line\">    default 约束：当某列没有指定值时，为该列提供默认值。</span><br><span class=\"line\">    unique 约束：确保某列中的所有值是不同的。</span><br><span class=\"line\">    primary key 约束：唯一标识数据库表中的各行/记录。</span><br><span class=\"line\">    check 约束：CHECK 约束确保某列中的所有值满足一定条件。</span><br><span class=\"line\">    age ingeter check(age &gt; 0),</span><br><span class=\"line\"></span><br><span class=\"line\">连接：</span><br><span class=\"line\">    交叉连接 - CROSS JOIN（结果乘积）</span><br><span class=\"line\">    内连接 - INNER JOIN（结果交集）</span><br><span class=\"line\">    外连接 - OUTER JOIN（left、right）（on只对关联条件起作用）</span><br><span class=\"line\">        select * from t1 a</span><br><span class=\"line\">        left join t2 b on a.id = b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\">union：（union连接两个结果集，union all包括重复列）</span><br><span class=\"line\">    select * from user1</span><br><span class=\"line\">    union</span><br><span class=\"line\">    select * from user2</span><br><span class=\"line\"></span><br><span class=\"line\">别名：</span><br><span class=\"line\">    select a as name from user as A</span><br><span class=\"line\">    select a name from user A</span><br><span class=\"line\"></span><br><span class=\"line\">触发器：</span><br><span class=\"line\"></span><br><span class=\"line\">索引：</span><br><span class=\"line\">    create index index_name on table_name (column1, column2);</span><br><span class=\"line\">    drop index salary_index;</span><br><span class=\"line\">    select * from company indexed by salary_index WHERE salary &gt; 5000;</span><br><span class=\"line\"></span><br><span class=\"line\">视图：</span><br><span class=\"line\">    create view xxx_view as select * from `user`;</span><br><span class=\"line\">    drop view xxx_view;</span><br><span class=\"line\"></span><br><span class=\"line\">事务：</span><br><span class=\"line\">    BEGIN TRANSACTION：开始事务处理。</span><br><span class=\"line\">    COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。</span><br><span class=\"line\">    ROLLBACK：回滚所做的更改。</span><br><span class=\"line\">    事务控制命令只与 DML 命令 INSERT、UPDATE 和 DELETE 一起使用。他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的。</span><br><span class=\"line\"></span><br><span class=\"line\">autoincrement：</span><br><span class=\"line\">    column1 integer autoincrement,</span><br><span class=\"line\"></span><br><span class=\"line\">集合判断：</span><br><span class=\"line\">    (case </span><br><span class=\"line\">    when A.status_flag=&#x27;0&#x27; then &#x27;退回&#x27; </span><br><span class=\"line\">    when A.status_flag=&#x27;1&#x27; then &#x27;新增&#x27; </span><br><span class=\"line\">    when A.status_flag=&#x27;2&#x27; then &#x27;待复核&#x27; </span><br><span class=\"line\">    else &#x27;其他&#x27; </span><br><span class=\"line\">    end</span><br><span class=\"line\">    ) status_name</span><br><span class=\"line\"></span><br><span class=\"line\">函数：</span><br><span class=\"line\">    1：SQLite COUNT 函数</span><br><span class=\"line\">        SQLite COUNT 聚集函数是用来计算一个数据库表中的行数。</span><br><span class=\"line\">    2：SQLite MAX 函数</span><br><span class=\"line\">        SQLite MAX 聚合函数允许我们选择某列的最大值。</span><br><span class=\"line\">    3：SQLite MIN 函数</span><br><span class=\"line\">        SQLite MIN 聚合函数允许我们选择某列的最小值。</span><br><span class=\"line\">    4：SQLite AVG 函数</span><br><span class=\"line\">        SQLite AVG 聚合函数计算某列的平均值。</span><br><span class=\"line\">    5：SQLite SUM 函数</span><br><span class=\"line\">        SQLite SUM 聚合函数允许为一个数值列计算总和。</span><br><span class=\"line\">    6：SQLite RANDOM 函数</span><br><span class=\"line\">        SQLite RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。</span><br><span class=\"line\">    7：SQLite ABS 函数</span><br><span class=\"line\">        SQLite ABS 函数返回数值参数的绝对值。</span><br><span class=\"line\">    8：SQLite UPPER 函数</span><br><span class=\"line\">        SQLite UPPER 函数把字符串转换为大写字母。</span><br><span class=\"line\">    9：SQLite LOWER 函数</span><br><span class=\"line\">        SQLite LOWER 函数把字符串转换为小写字母。</span><br><span class=\"line\">    10：SQLite LENGTH 函数</span><br><span class=\"line\">        SQLite LENGTH 函数返回字符串的长度。</span><br><span class=\"line\">    11：SQLite sqlite_version 函数</span><br><span class=\"line\">        SQLite sqlite_version 函数返回 SQLite 库的版本。</span><br><span class=\"line\">            </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mysql常用操作\"><a href=\"#Mysql常用操作\" class=\"headerlink\" title=\"Mysql常用操作\"></a>Mysql常用操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql数据类型</span><br><span class=\"line\">    | 类型 | 描述 |</span><br><span class=\"line\">    | int/integer | int同integer |</span><br><span class=\"line\">    | char | 定长字符串 |</span><br><span class=\"line\">    | varchar | 变长字符串 |</span><br><span class=\"line\">    | text | 长文本 |</span><br><span class=\"line\"></span><br><span class=\"line\">创建表（可放not null和default）</span><br><span class=\"line\">    drop table if exists `user`;</span><br><span class=\"line\">    create table `user` (</span><br><span class=\"line\">     `id` int auto_increment,</span><br><span class=\"line\">     `name` varchar(32),</span><br><span class=\"line\">     `age` int,</span><br><span class=\"line\">     primary key (`id`)</span><br><span class=\"line\">    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">连接mysql，并修改密码</span><br><span class=\"line\">    mysql -u root -p</span><br><span class=\"line\">    set password for &#x27;root&#x27;@&#x27;localhost&#x27; = password(&#x27;newpass&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">创建删除数据库</span><br><span class=\"line\">    drop database `jfinal`;</span><br><span class=\"line\">    create database `jfinal` CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">修改root密码</span><br><span class=\"line\">    use mysql;</span><br><span class=\"line\">    update user set password=password(&#x27;new password&#x27;) where user=&#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">创建远程用户（删除、创建、授权）</span><br><span class=\"line\">    drop user &#x27;jmm&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">    create user &#x27;jmm&#x27;@&#x27;%&#x27; identified by &#x27;jmm&#x27;;</span><br><span class=\"line\">    grant all on *.* to &#x27;jmm&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">查看用户</span><br><span class=\"line\">    select Host,User from mysql.user;</span><br><span class=\"line\"></span><br><span class=\"line\">查看 设置 字符集</span><br><span class=\"line\">    show VARIABLES like &#x27;character%&#x27;;</span><br><span class=\"line\">    set character_set_client=utf8;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sqlite常用操作\"><a href=\"#sqlite常用操作\" class=\"headerlink\" title=\"sqlite常用操作\"></a>sqlite常用操作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建表</span><br><span class=\"line\">    drop table if exists `user`;</span><br><span class=\"line\">    create table if no exists `user` (</span><br><span class=\"line\">     id integer primary key,    -- integer primary key即为自增</span><br><span class=\"line\">     name varchar(32),</span><br><span class=\"line\">     age integer</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">查表信息</span><br><span class=\"line\">    select name from sqlite_master;</span><br><span class=\"line\"></span><br><span class=\"line\">查询出某个表的所有字段信息</span><br><span class=\"line\">    PRAGMA table_info([tablename]);</span><br></pre></td></tr></table></figure>"},{"title":"常见环境问题及解决方案","date":"2015-10-22T16:00:00.000Z","_content":"\n常见环境问题及解决方案\n\n<!--more-->\n\n## 二级路由器设置\n\n```\n1.动态获取\n    一级lan连二级wan\n    二级wan改为动态获取\n    二级lan改为192.168.2.1\n2.做交换机\n    一级lan连二级lan\n    二级lan改为192.168.1.2\n    二级关闭dhcp服务\n3.设置WDS无线桥接\n    二级路由器设置WDS无线桥接\n    连接一级路由器无线网络\n```\n\n## Wifi信道\n\n```\n802.11 （1997年发布）\n802.11b （1999年发布）\n802.11b （1999年发布）\n802.11g （2003年发布） ，又叫 Wi-Fi 3，理论最大传输速率达54Mbps\n802.11n （2009年发布） ，又叫 Wi-Fi 4，理论最大传输速率为600 Mbps\n802.11ac （2014年发布），又叫 Wi-Fi 5，理论最大传输速率为6.9G bps\n802.11ax （2019年发布），又叫 Wi-Fi 6，理论最大传输速率为9.6G bps\n```\n\n## Raid\n\n```\nraid 0：错开存储，容量不变，速度*2\nraid 1：备份存储，容量/2，速度不变\nraid 5：相互校验存储，容量n-1，速度*(n-1)\n```\n\n## row和raw\n\n```\nrow指的是硬盘\nraw指的是内存\n```\n\n## 计算机网络接口初始化\n\n```\nipconfig/registerdns\nnetsh winsock reset\n```\n\n## github网络过慢问题\n\n```\n查询dns\n    https://tool.chinaz.com/dns\n修改hosts文件地址\n    C:\\Windows\\System32\\drivers\\etc\\hosts\n    20.205.243.166 github.com\n重启dns\n    ipconfig/flushdns\n```","source":"_posts/2015-10-23常见环境问题及解决方案.md","raw":"---\ntitle: 常见环境问题及解决方案\ndate: 2015-10-23\ntags: [环境]\n---\n\n常见环境问题及解决方案\n\n<!--more-->\n\n## 二级路由器设置\n\n```\n1.动态获取\n    一级lan连二级wan\n    二级wan改为动态获取\n    二级lan改为192.168.2.1\n2.做交换机\n    一级lan连二级lan\n    二级lan改为192.168.1.2\n    二级关闭dhcp服务\n3.设置WDS无线桥接\n    二级路由器设置WDS无线桥接\n    连接一级路由器无线网络\n```\n\n## Wifi信道\n\n```\n802.11 （1997年发布）\n802.11b （1999年发布）\n802.11b （1999年发布）\n802.11g （2003年发布） ，又叫 Wi-Fi 3，理论最大传输速率达54Mbps\n802.11n （2009年发布） ，又叫 Wi-Fi 4，理论最大传输速率为600 Mbps\n802.11ac （2014年发布），又叫 Wi-Fi 5，理论最大传输速率为6.9G bps\n802.11ax （2019年发布），又叫 Wi-Fi 6，理论最大传输速率为9.6G bps\n```\n\n## Raid\n\n```\nraid 0：错开存储，容量不变，速度*2\nraid 1：备份存储，容量/2，速度不变\nraid 5：相互校验存储，容量n-1，速度*(n-1)\n```\n\n## row和raw\n\n```\nrow指的是硬盘\nraw指的是内存\n```\n\n## 计算机网络接口初始化\n\n```\nipconfig/registerdns\nnetsh winsock reset\n```\n\n## github网络过慢问题\n\n```\n查询dns\n    https://tool.chinaz.com/dns\n修改hosts文件地址\n    C:\\Windows\\System32\\drivers\\etc\\hosts\n    20.205.243.166 github.com\n重启dns\n    ipconfig/flushdns\n```","slug":"2015-10-23常见环境问题及解决方案","published":1,"updated":"2022-06-28T15:06:58.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnj40001a4vv0hwe8nyv","content":"<p>常见环境问题及解决方案</p>\n<span id=\"more\"></span>\n\n<h2 id=\"二级路由器设置\"><a href=\"#二级路由器设置\" class=\"headerlink\" title=\"二级路由器设置\"></a>二级路由器设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.动态获取</span><br><span class=\"line\">    一级lan连二级wan</span><br><span class=\"line\">    二级wan改为动态获取</span><br><span class=\"line\">    二级lan改为192.168.2.1</span><br><span class=\"line\">2.做交换机</span><br><span class=\"line\">    一级lan连二级lan</span><br><span class=\"line\">    二级lan改为192.168.1.2</span><br><span class=\"line\">    二级关闭dhcp服务</span><br><span class=\"line\">3.设置WDS无线桥接</span><br><span class=\"line\">    二级路由器设置WDS无线桥接</span><br><span class=\"line\">    连接一级路由器无线网络</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Wifi信道\"><a href=\"#Wifi信道\" class=\"headerlink\" title=\"Wifi信道\"></a>Wifi信道</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">802.11 （1997年发布）</span><br><span class=\"line\">802.11b （1999年发布）</span><br><span class=\"line\">802.11b （1999年发布）</span><br><span class=\"line\">802.11g （2003年发布） ，又叫 Wi-Fi 3，理论最大传输速率达54Mbps</span><br><span class=\"line\">802.11n （2009年发布） ，又叫 Wi-Fi 4，理论最大传输速率为600 Mbps</span><br><span class=\"line\">802.11ac （2014年发布），又叫 Wi-Fi 5，理论最大传输速率为6.9G bps</span><br><span class=\"line\">802.11ax （2019年发布），又叫 Wi-Fi 6，理论最大传输速率为9.6G bps</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Raid\"><a href=\"#Raid\" class=\"headerlink\" title=\"Raid\"></a>Raid</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raid 0：错开存储，容量不变，速度*2</span><br><span class=\"line\">raid 1：备份存储，容量/2，速度不变</span><br><span class=\"line\">raid 5：相互校验存储，容量n-1，速度*(n-1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"row和raw\"><a href=\"#row和raw\" class=\"headerlink\" title=\"row和raw\"></a>row和raw</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">row指的是硬盘</span><br><span class=\"line\">raw指的是内存</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机网络接口初始化\"><a href=\"#计算机网络接口初始化\" class=\"headerlink\" title=\"计算机网络接口初始化\"></a>计算机网络接口初始化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig/registerdns</span><br><span class=\"line\">netsh winsock reset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github网络过慢问题\"><a href=\"#github网络过慢问题\" class=\"headerlink\" title=\"github网络过慢问题\"></a>github网络过慢问题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询dns</span><br><span class=\"line\">    https://tool.chinaz.com/dns</span><br><span class=\"line\">修改hosts文件地址</span><br><span class=\"line\">    C:\\Windows\\System32\\drivers\\etc\\hosts</span><br><span class=\"line\">    20.205.243.166 github.com</span><br><span class=\"line\">重启dns</span><br><span class=\"line\">    ipconfig/flushdns</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>常见环境问题及解决方案</p>","more":"<h2 id=\"二级路由器设置\"><a href=\"#二级路由器设置\" class=\"headerlink\" title=\"二级路由器设置\"></a>二级路由器设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.动态获取</span><br><span class=\"line\">    一级lan连二级wan</span><br><span class=\"line\">    二级wan改为动态获取</span><br><span class=\"line\">    二级lan改为192.168.2.1</span><br><span class=\"line\">2.做交换机</span><br><span class=\"line\">    一级lan连二级lan</span><br><span class=\"line\">    二级lan改为192.168.1.2</span><br><span class=\"line\">    二级关闭dhcp服务</span><br><span class=\"line\">3.设置WDS无线桥接</span><br><span class=\"line\">    二级路由器设置WDS无线桥接</span><br><span class=\"line\">    连接一级路由器无线网络</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Wifi信道\"><a href=\"#Wifi信道\" class=\"headerlink\" title=\"Wifi信道\"></a>Wifi信道</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">802.11 （1997年发布）</span><br><span class=\"line\">802.11b （1999年发布）</span><br><span class=\"line\">802.11b （1999年发布）</span><br><span class=\"line\">802.11g （2003年发布） ，又叫 Wi-Fi 3，理论最大传输速率达54Mbps</span><br><span class=\"line\">802.11n （2009年发布） ，又叫 Wi-Fi 4，理论最大传输速率为600 Mbps</span><br><span class=\"line\">802.11ac （2014年发布），又叫 Wi-Fi 5，理论最大传输速率为6.9G bps</span><br><span class=\"line\">802.11ax （2019年发布），又叫 Wi-Fi 6，理论最大传输速率为9.6G bps</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Raid\"><a href=\"#Raid\" class=\"headerlink\" title=\"Raid\"></a>Raid</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raid 0：错开存储，容量不变，速度*2</span><br><span class=\"line\">raid 1：备份存储，容量/2，速度不变</span><br><span class=\"line\">raid 5：相互校验存储，容量n-1，速度*(n-1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"row和raw\"><a href=\"#row和raw\" class=\"headerlink\" title=\"row和raw\"></a>row和raw</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">row指的是硬盘</span><br><span class=\"line\">raw指的是内存</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机网络接口初始化\"><a href=\"#计算机网络接口初始化\" class=\"headerlink\" title=\"计算机网络接口初始化\"></a>计算机网络接口初始化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig/registerdns</span><br><span class=\"line\">netsh winsock reset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github网络过慢问题\"><a href=\"#github网络过慢问题\" class=\"headerlink\" title=\"github网络过慢问题\"></a>github网络过慢问题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询dns</span><br><span class=\"line\">    https://tool.chinaz.com/dns</span><br><span class=\"line\">修改hosts文件地址</span><br><span class=\"line\">    C:\\Windows\\System32\\drivers\\etc\\hosts</span><br><span class=\"line\">    20.205.243.166 github.com</span><br><span class=\"line\">重启dns</span><br><span class=\"line\">    ipconfig/flushdns</span><br></pre></td></tr></table></figure>"},{"title":"服务器被攻击勒索案例","date":"2017-09-26T16:00:00.000Z","_content":"\n服务器被攻击勒索案例\n\n<!--more-->\n\n## 背景\n``2017-9-27``，服务器数据库端口3306被嗅探攻击，由于未设防火墙，且未设置安全策略。数据被转移、密码被修改。\n\n## 勒索数据\n\n```\nHello,\n\nI am a security researcher from Sweden, \nhaving interest on web security and other focus areas.\n\nYour database \"mm_wiki\" was breached by a 3rd party and\nfiles were backed up to their cloud hosting storage.\n\nI accidently discovered this dedicated cloud storage and was able to secure the files.\n\nIt is scheduled to be sold online.\n\nThe short-term consequences of this data leak could be fees, fines and frustration.\n\nTo prevent this i will remove all files from online storage above\nand restore the database if needed.\n\n    please send exactly 0.1 bitcoin (BTC) to the following \n    bitcoin address: 1JekXdQGREcfKp3dAuaLTRs9XbTVxczq2V\n\nemail me after the payment confirms(about an hour),\nand I email you back the link to download the original \ndump file mm_wiki.sql.gz created with mysql mydumper.\n\nI will shred the files and terminate their cloud hosting account in 24hrs after the payment.\n\nincidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9\nemail: 0b1f61b3e0d3@mailinator.com\n\n\n\nTo buy bitcoin instantly you can use paxful.com like services.\n\nincidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9\nemail: 0b1f61b3e0d3@mailinator.com\n\n\n\ndatabase summary:\n\n* total tables count: 17\n* total approx. documents count for all tables: 388\n\ntable: \"mw_log\" => 127 documents\ntable: \"mw_privilege\" => 92 documents\ntable: \"mw_log_document\" => 88 documents\ntable: \"mw_role_privilege\" => 30 documents\ntable: \"mw_document\" => 20 documents\n.......................\n\nfull database dump file: mm_wiki.sql.gz, about 0.29 MB.\n\n* system/stat/views/functions/triggers or other special tables not counted.\n    these numbers for reference only.\n    binary format, total size depends on zlib compression ratio, data sparsity.\n\nincidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9\nemail: 0b1f61b3e0d3@mailinator.com\n```\n\n## 服务器防范措施\n\n- 1)服务器设置大写、小写、特殊字符、数字组成的12-16位的复杂密码 ，也可使用密码生成器自动生成复杂密码，这里给您一个链接参考：https://suijimimashengcheng.51240.com/\n- 2)删除服务器上设置的不需要的用户\n- 3)对于不需要登录的用户，请将用户的权限设置为禁止登录\n- 4)修改远程登录服务的默认端口号以及禁止超级管理员用户登陆\nWindows远程端口修改参考文档：https://cloud.tencent.com/developer/article/1052163\nLinux远程端口修改参考文档：https://cloud.tencent.com/developer/article/1124500\n- 5)较为安全的方法：只使用密钥登录禁止密码登陆 （针对Linux系统）\n- 6)腾讯云平台有安全组功能，里面您只需要放行业务协议和端口，不建议放行所有协议所有端口，参考文档： https://cloud.tencent.com/document/product/215/20398\n- 7)不建议向公网开放核心应用服务端口访问，例如mysql、redis等，您可修改为本地访问或禁止外网访问\n- 8)如果您的本地外网IP固定，建议使用安全组或者系统防火墙禁止除了本地外网IP之外所有IP的登录请求\n需注意：做好云服务器系统的安全防护可以有效加强云服务器系统安全， 但也无法保证绝对安全， 建议定期做好云服务器系统的安全巡检及数据备份，以防突发情况导致数据丢失、或业务不可用。\n- 9)企业级服务器，应购买企业级防火墙，动态日志、监控、预警、防护措施，针对来访地址和数据，调整防火墙规则。\n\n\n## 日常查看和维护\n\n- 定期修改密码``passwd``\n- 查看用户登录情况``who、who am i``\n- 查看用户登录信息``last``\n- 查看各个用户登录信息``lastlog``\n- 查看登录失败信息``lastb``，这个可以查看嗅探的IP，以此来禁用\n- 查看用户命令历史``history``\n- 日志和监控``ELK、Prometheus``","source":"_posts/2017-9-27服务器被攻击勒索案例.md","raw":"---\ntitle: 服务器被攻击勒索案例\ndate: 2017-9-27\ntags: [攻击]\n---\n\n服务器被攻击勒索案例\n\n<!--more-->\n\n## 背景\n``2017-9-27``，服务器数据库端口3306被嗅探攻击，由于未设防火墙，且未设置安全策略。数据被转移、密码被修改。\n\n## 勒索数据\n\n```\nHello,\n\nI am a security researcher from Sweden, \nhaving interest on web security and other focus areas.\n\nYour database \"mm_wiki\" was breached by a 3rd party and\nfiles were backed up to their cloud hosting storage.\n\nI accidently discovered this dedicated cloud storage and was able to secure the files.\n\nIt is scheduled to be sold online.\n\nThe short-term consequences of this data leak could be fees, fines and frustration.\n\nTo prevent this i will remove all files from online storage above\nand restore the database if needed.\n\n    please send exactly 0.1 bitcoin (BTC) to the following \n    bitcoin address: 1JekXdQGREcfKp3dAuaLTRs9XbTVxczq2V\n\nemail me after the payment confirms(about an hour),\nand I email you back the link to download the original \ndump file mm_wiki.sql.gz created with mysql mydumper.\n\nI will shred the files and terminate their cloud hosting account in 24hrs after the payment.\n\nincidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9\nemail: 0b1f61b3e0d3@mailinator.com\n\n\n\nTo buy bitcoin instantly you can use paxful.com like services.\n\nincidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9\nemail: 0b1f61b3e0d3@mailinator.com\n\n\n\ndatabase summary:\n\n* total tables count: 17\n* total approx. documents count for all tables: 388\n\ntable: \"mw_log\" => 127 documents\ntable: \"mw_privilege\" => 92 documents\ntable: \"mw_log_document\" => 88 documents\ntable: \"mw_role_privilege\" => 30 documents\ntable: \"mw_document\" => 20 documents\n.......................\n\nfull database dump file: mm_wiki.sql.gz, about 0.29 MB.\n\n* system/stat/views/functions/triggers or other special tables not counted.\n    these numbers for reference only.\n    binary format, total size depends on zlib compression ratio, data sparsity.\n\nincidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9\nemail: 0b1f61b3e0d3@mailinator.com\n```\n\n## 服务器防范措施\n\n- 1)服务器设置大写、小写、特殊字符、数字组成的12-16位的复杂密码 ，也可使用密码生成器自动生成复杂密码，这里给您一个链接参考：https://suijimimashengcheng.51240.com/\n- 2)删除服务器上设置的不需要的用户\n- 3)对于不需要登录的用户，请将用户的权限设置为禁止登录\n- 4)修改远程登录服务的默认端口号以及禁止超级管理员用户登陆\nWindows远程端口修改参考文档：https://cloud.tencent.com/developer/article/1052163\nLinux远程端口修改参考文档：https://cloud.tencent.com/developer/article/1124500\n- 5)较为安全的方法：只使用密钥登录禁止密码登陆 （针对Linux系统）\n- 6)腾讯云平台有安全组功能，里面您只需要放行业务协议和端口，不建议放行所有协议所有端口，参考文档： https://cloud.tencent.com/document/product/215/20398\n- 7)不建议向公网开放核心应用服务端口访问，例如mysql、redis等，您可修改为本地访问或禁止外网访问\n- 8)如果您的本地外网IP固定，建议使用安全组或者系统防火墙禁止除了本地外网IP之外所有IP的登录请求\n需注意：做好云服务器系统的安全防护可以有效加强云服务器系统安全， 但也无法保证绝对安全， 建议定期做好云服务器系统的安全巡检及数据备份，以防突发情况导致数据丢失、或业务不可用。\n- 9)企业级服务器，应购买企业级防火墙，动态日志、监控、预警、防护措施，针对来访地址和数据，调整防火墙规则。\n\n\n## 日常查看和维护\n\n- 定期修改密码``passwd``\n- 查看用户登录情况``who、who am i``\n- 查看用户登录信息``last``\n- 查看各个用户登录信息``lastlog``\n- 查看登录失败信息``lastb``，这个可以查看嗅探的IP，以此来禁用\n- 查看用户命令历史``history``\n- 日志和监控``ELK、Prometheus``","slug":"2017-9-27服务器被攻击勒索案例","published":1,"updated":"2022-06-28T14:48:22.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnj80003a4vv39ol061g","content":"<p>服务器被攻击勒索案例</p>\n<span id=\"more\"></span>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><code>2017-9-27</code>，服务器数据库端口3306被嗅探攻击，由于未设防火墙，且未设置安全策略。数据被转移、密码被修改。</p>\n<h2 id=\"勒索数据\"><a href=\"#勒索数据\" class=\"headerlink\" title=\"勒索数据\"></a>勒索数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello,</span><br><span class=\"line\"></span><br><span class=\"line\">I am a security researcher from Sweden, </span><br><span class=\"line\">having interest on web security and other focus areas.</span><br><span class=\"line\"></span><br><span class=\"line\">Your database &quot;mm_wiki&quot; was breached by a 3rd party and</span><br><span class=\"line\">files were backed up to their cloud hosting storage.</span><br><span class=\"line\"></span><br><span class=\"line\">I accidently discovered this dedicated cloud storage and was able to secure the files.</span><br><span class=\"line\"></span><br><span class=\"line\">It is scheduled to be sold online.</span><br><span class=\"line\"></span><br><span class=\"line\">The short-term consequences of this data leak could be fees, fines and frustration.</span><br><span class=\"line\"></span><br><span class=\"line\">To prevent this i will remove all files from online storage above</span><br><span class=\"line\">and restore the database if needed.</span><br><span class=\"line\"></span><br><span class=\"line\">    please send exactly 0.1 bitcoin (BTC) to the following </span><br><span class=\"line\">    bitcoin address: 1JekXdQGREcfKp3dAuaLTRs9XbTVxczq2V</span><br><span class=\"line\"></span><br><span class=\"line\">email me after the payment confirms(about an hour),</span><br><span class=\"line\">and I email you back the link to download the original </span><br><span class=\"line\">dump file mm_wiki.sql.gz created with mysql mydumper.</span><br><span class=\"line\"></span><br><span class=\"line\">I will shred the files and terminate their cloud hosting account in 24hrs after the payment.</span><br><span class=\"line\"></span><br><span class=\"line\">incidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9</span><br><span class=\"line\">email: 0b1f61b3e0d3@mailinator.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">To buy bitcoin instantly you can use paxful.com like services.</span><br><span class=\"line\"></span><br><span class=\"line\">incidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9</span><br><span class=\"line\">email: 0b1f61b3e0d3@mailinator.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">database summary:</span><br><span class=\"line\"></span><br><span class=\"line\">* total tables count: 17</span><br><span class=\"line\">* total approx. documents count for all tables: 388</span><br><span class=\"line\"></span><br><span class=\"line\">table: &quot;mw_log&quot; =&gt; 127 documents</span><br><span class=\"line\">table: &quot;mw_privilege&quot; =&gt; 92 documents</span><br><span class=\"line\">table: &quot;mw_log_document&quot; =&gt; 88 documents</span><br><span class=\"line\">table: &quot;mw_role_privilege&quot; =&gt; 30 documents</span><br><span class=\"line\">table: &quot;mw_document&quot; =&gt; 20 documents</span><br><span class=\"line\">.......................</span><br><span class=\"line\"></span><br><span class=\"line\">full database dump file: mm_wiki.sql.gz, about 0.29 MB.</span><br><span class=\"line\"></span><br><span class=\"line\">* system/stat/views/functions/triggers or other special tables not counted.</span><br><span class=\"line\">    these numbers for reference only.</span><br><span class=\"line\">    binary format, total size depends on zlib compression ratio, data sparsity.</span><br><span class=\"line\"></span><br><span class=\"line\">incidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9</span><br><span class=\"line\">email: 0b1f61b3e0d3@mailinator.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器防范措施\"><a href=\"#服务器防范措施\" class=\"headerlink\" title=\"服务器防范措施\"></a>服务器防范措施</h2><ul>\n<li>1)服务器设置大写、小写、特殊字符、数字组成的12-16位的复杂密码 ，也可使用密码生成器自动生成复杂密码，这里给您一个链接参考：<a href=\"https://suijimimashengcheng.51240.com/\">https://suijimimashengcheng.51240.com/</a></li>\n<li>2)删除服务器上设置的不需要的用户</li>\n<li>3)对于不需要登录的用户，请将用户的权限设置为禁止登录</li>\n<li>4)修改远程登录服务的默认端口号以及禁止超级管理员用户登陆<br>Windows远程端口修改参考文档：<a href=\"https://cloud.tencent.com/developer/article/1052163\">https://cloud.tencent.com/developer/article/1052163</a><br>Linux远程端口修改参考文档：<a href=\"https://cloud.tencent.com/developer/article/1124500\">https://cloud.tencent.com/developer/article/1124500</a></li>\n<li>5)较为安全的方法：只使用密钥登录禁止密码登陆 （针对Linux系统）</li>\n<li>6)腾讯云平台有安全组功能，里面您只需要放行业务协议和端口，不建议放行所有协议所有端口，参考文档： <a href=\"https://cloud.tencent.com/document/product/215/20398\">https://cloud.tencent.com/document/product/215/20398</a></li>\n<li>7)不建议向公网开放核心应用服务端口访问，例如mysql、redis等，您可修改为本地访问或禁止外网访问</li>\n<li>8)如果您的本地外网IP固定，建议使用安全组或者系统防火墙禁止除了本地外网IP之外所有IP的登录请求<br>需注意：做好云服务器系统的安全防护可以有效加强云服务器系统安全， 但也无法保证绝对安全， 建议定期做好云服务器系统的安全巡检及数据备份，以防突发情况导致数据丢失、或业务不可用。</li>\n<li>9)企业级服务器，应购买企业级防火墙，动态日志、监控、预警、防护措施，针对来访地址和数据，调整防火墙规则。</li>\n</ul>\n<h2 id=\"日常查看和维护\"><a href=\"#日常查看和维护\" class=\"headerlink\" title=\"日常查看和维护\"></a>日常查看和维护</h2><ul>\n<li>定期修改密码<code>passwd</code></li>\n<li>查看用户登录情况<code>who、who am i</code></li>\n<li>查看用户登录信息<code>last</code></li>\n<li>查看各个用户登录信息<code>lastlog</code></li>\n<li>查看登录失败信息<code>lastb</code>，这个可以查看嗅探的IP，以此来禁用</li>\n<li>查看用户命令历史<code>history</code></li>\n<li>日志和监控<code>ELK、Prometheus</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>服务器被攻击勒索案例</p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><code>2017-9-27</code>，服务器数据库端口3306被嗅探攻击，由于未设防火墙，且未设置安全策略。数据被转移、密码被修改。</p>\n<h2 id=\"勒索数据\"><a href=\"#勒索数据\" class=\"headerlink\" title=\"勒索数据\"></a>勒索数据</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello,</span><br><span class=\"line\"></span><br><span class=\"line\">I am a security researcher from Sweden, </span><br><span class=\"line\">having interest on web security and other focus areas.</span><br><span class=\"line\"></span><br><span class=\"line\">Your database &quot;mm_wiki&quot; was breached by a 3rd party and</span><br><span class=\"line\">files were backed up to their cloud hosting storage.</span><br><span class=\"line\"></span><br><span class=\"line\">I accidently discovered this dedicated cloud storage and was able to secure the files.</span><br><span class=\"line\"></span><br><span class=\"line\">It is scheduled to be sold online.</span><br><span class=\"line\"></span><br><span class=\"line\">The short-term consequences of this data leak could be fees, fines and frustration.</span><br><span class=\"line\"></span><br><span class=\"line\">To prevent this i will remove all files from online storage above</span><br><span class=\"line\">and restore the database if needed.</span><br><span class=\"line\"></span><br><span class=\"line\">    please send exactly 0.1 bitcoin (BTC) to the following </span><br><span class=\"line\">    bitcoin address: 1JekXdQGREcfKp3dAuaLTRs9XbTVxczq2V</span><br><span class=\"line\"></span><br><span class=\"line\">email me after the payment confirms(about an hour),</span><br><span class=\"line\">and I email you back the link to download the original </span><br><span class=\"line\">dump file mm_wiki.sql.gz created with mysql mydumper.</span><br><span class=\"line\"></span><br><span class=\"line\">I will shred the files and terminate their cloud hosting account in 24hrs after the payment.</span><br><span class=\"line\"></span><br><span class=\"line\">incidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9</span><br><span class=\"line\">email: 0b1f61b3e0d3@mailinator.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">To buy bitcoin instantly you can use paxful.com like services.</span><br><span class=\"line\"></span><br><span class=\"line\">incidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9</span><br><span class=\"line\">email: 0b1f61b3e0d3@mailinator.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">database summary:</span><br><span class=\"line\"></span><br><span class=\"line\">* total tables count: 17</span><br><span class=\"line\">* total approx. documents count for all tables: 388</span><br><span class=\"line\"></span><br><span class=\"line\">table: &quot;mw_log&quot; =&gt; 127 documents</span><br><span class=\"line\">table: &quot;mw_privilege&quot; =&gt; 92 documents</span><br><span class=\"line\">table: &quot;mw_log_document&quot; =&gt; 88 documents</span><br><span class=\"line\">table: &quot;mw_role_privilege&quot; =&gt; 30 documents</span><br><span class=\"line\">table: &quot;mw_document&quot; =&gt; 20 documents</span><br><span class=\"line\">.......................</span><br><span class=\"line\"></span><br><span class=\"line\">full database dump file: mm_wiki.sql.gz, about 0.29 MB.</span><br><span class=\"line\"></span><br><span class=\"line\">* system/stat/views/functions/triggers or other special tables not counted.</span><br><span class=\"line\">    these numbers for reference only.</span><br><span class=\"line\">    binary format, total size depends on zlib compression ratio, data sparsity.</span><br><span class=\"line\"></span><br><span class=\"line\">incidentId: 1eaa480d-bd6d-44f7-a2b1-2204b32049d9</span><br><span class=\"line\">email: 0b1f61b3e0d3@mailinator.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器防范措施\"><a href=\"#服务器防范措施\" class=\"headerlink\" title=\"服务器防范措施\"></a>服务器防范措施</h2><ul>\n<li>1)服务器设置大写、小写、特殊字符、数字组成的12-16位的复杂密码 ，也可使用密码生成器自动生成复杂密码，这里给您一个链接参考：<a href=\"https://suijimimashengcheng.51240.com/\">https://suijimimashengcheng.51240.com/</a></li>\n<li>2)删除服务器上设置的不需要的用户</li>\n<li>3)对于不需要登录的用户，请将用户的权限设置为禁止登录</li>\n<li>4)修改远程登录服务的默认端口号以及禁止超级管理员用户登陆<br>Windows远程端口修改参考文档：<a href=\"https://cloud.tencent.com/developer/article/1052163\">https://cloud.tencent.com/developer/article/1052163</a><br>Linux远程端口修改参考文档：<a href=\"https://cloud.tencent.com/developer/article/1124500\">https://cloud.tencent.com/developer/article/1124500</a></li>\n<li>5)较为安全的方法：只使用密钥登录禁止密码登陆 （针对Linux系统）</li>\n<li>6)腾讯云平台有安全组功能，里面您只需要放行业务协议和端口，不建议放行所有协议所有端口，参考文档： <a href=\"https://cloud.tencent.com/document/product/215/20398\">https://cloud.tencent.com/document/product/215/20398</a></li>\n<li>7)不建议向公网开放核心应用服务端口访问，例如mysql、redis等，您可修改为本地访问或禁止外网访问</li>\n<li>8)如果您的本地外网IP固定，建议使用安全组或者系统防火墙禁止除了本地外网IP之外所有IP的登录请求<br>需注意：做好云服务器系统的安全防护可以有效加强云服务器系统安全， 但也无法保证绝对安全， 建议定期做好云服务器系统的安全巡检及数据备份，以防突发情况导致数据丢失、或业务不可用。</li>\n<li>9)企业级服务器，应购买企业级防火墙，动态日志、监控、预警、防护措施，针对来访地址和数据，调整防火墙规则。</li>\n</ul>\n<h2 id=\"日常查看和维护\"><a href=\"#日常查看和维护\" class=\"headerlink\" title=\"日常查看和维护\"></a>日常查看和维护</h2><ul>\n<li>定期修改密码<code>passwd</code></li>\n<li>查看用户登录情况<code>who、who am i</code></li>\n<li>查看用户登录信息<code>last</code></li>\n<li>查看各个用户登录信息<code>lastlog</code></li>\n<li>查看登录失败信息<code>lastb</code>，这个可以查看嗅探的IP，以此来禁用</li>\n<li>查看用户命令历史<code>history</code></li>\n<li>日志和监控<code>ELK、Prometheus</code></li>\n</ul>"},{"title":"git merge策略解析","date":"2022-06-25T16:00:00.000Z","_content":"\ngit merge策略解析\n\n<!--more-->\n\n## 命令\n``git merge BRANCH_NAME [-s, --strategy <strategy>] [-X, --strategy-option <option=value>]``\n\n## git merge策略，参数：``-s``\n\n- resolve\n- recursive\n- octopus\n- ours\n- subtree\n\n### resolve\n\n```\n这使用的是三路合并算法。的三路合并算法会存在发现多个共同祖先的问题。\n此策略会 “仔细地” 寻找其中一个共同祖先。\n由于不需要递归合并出虚拟节点，所以此方法合并时会比较快速，但也可能会带来更多冲突。\n不敢说带来更多冲突是好事还是坏事，因为自动合并成功并不一定意味着在代码含义上也算是正确的合并。\n所以如果自动合并总是成功但代码含义上会失败，可以考虑此合并策略，这将让更多的冲突变成手工合并而不是自动合并。\n```\n\n### recursive\n\n```\n这是默认的合并策略，如果你不指定策略参数，那么将使用这个合并策略。这将直接使用递归三路合并算法进行合并。\n```\n\n### octopus\n\n```\n此策略允许合并多个 git 提交节点（分支）。\n不过，如果会出现需要手工解决的冲突，那么此策略将不会执行。\n此策略就是用来把多个分支聚集在一起的。\n```\n\n### ours\n\n```\n在合并的时候，无论有多少个合并分支，当前分支就直接是最终的合并结果。无论其他人有多少修改，在此次合并之后，都将不存在（当然历史里面还有）。\n\n你可能觉得这种丢失改动的合并策略没有什么用。但如果你准备重新在你的仓库中进行开发（程序员最喜欢的重构），那么当你的修改与旧分支合并时，采用此合并策略就非常有用，你新的重构代码将完全不会被旧分支的改动所影响。\n\n注意 recursive 策略中也有一个 ours 参数，与这个不同的。\n```\n\n### subtree\n\n```\n此策略使用的是修改后的递归三路合并算法。与 recursive 不同的是，此策略会将合并的两个分支的其中一个视为另一个的子树，就像 git subtree 中使用的子树一样。\n```\n\n## git merge策略的参数，参数：``-X``\n\n- ours\n- theirs\n- ignore-space-change\n- find-renames=0\n- diff-algorithm={patience|minimal|histogram|myers}\n\n### resolve\n\n```\n-X ours（使用我们的）\n-X theirs（使用他们的）\n-X ignore-space-change（空格改动的话就忽略）\n-X find-renames=0（值越小，使文件越相同）\n-X diff-algorithm={patience|minimal|histogram|myers}（指定一个差异算法，myers是默认的，具体算法差异可通过man手册来查看）\n    此策略的名称叫 “耐心”，因为 git 将话费更多的时间来进行合并一些看起来不怎么重要的行，合并的结果也更加准确。当然，使用的算法是 recursive 即递归三路合并算法\n```\n\n## git merge其他参数\n\n``git merge BRANCH_NAME``\n\n- no-ff               强行关掉fast-forward，所以在使用这种方式后，分支合并后会生成一个新的commit（默认--ff）\n- no-edit             不进入编辑页面，直接提交\n- squash              创建一个单独的提交而不是做一次合并\n- stat                show a diffstat at the end of the merge\n- summary             (synonym to --stat)\n\n\n## git merge方案\n\n- 可使用``git merge-base -a [branch1] [branch2]``查看两个分支或节点共同祖先，可提炼出需要合入的修改有哪些\n- 使用``git merge --no-ff -s recursive -X ignore-space-change  -m \"Upgrade from xxx\" --no-edit -q [BRANCH_NAME]``合入代码\n- 使用``git ls-files -u``查看未合并的文件\n- 提交到审查系统修改后统一合入\n","source":"_posts/2022-6-26git merge策略解析.md","raw":"---\ntitle: git merge策略解析\ndate: 2022-6-26\ntags: [git, merge, 策略]\n---\n\ngit merge策略解析\n\n<!--more-->\n\n## 命令\n``git merge BRANCH_NAME [-s, --strategy <strategy>] [-X, --strategy-option <option=value>]``\n\n## git merge策略，参数：``-s``\n\n- resolve\n- recursive\n- octopus\n- ours\n- subtree\n\n### resolve\n\n```\n这使用的是三路合并算法。的三路合并算法会存在发现多个共同祖先的问题。\n此策略会 “仔细地” 寻找其中一个共同祖先。\n由于不需要递归合并出虚拟节点，所以此方法合并时会比较快速，但也可能会带来更多冲突。\n不敢说带来更多冲突是好事还是坏事，因为自动合并成功并不一定意味着在代码含义上也算是正确的合并。\n所以如果自动合并总是成功但代码含义上会失败，可以考虑此合并策略，这将让更多的冲突变成手工合并而不是自动合并。\n```\n\n### recursive\n\n```\n这是默认的合并策略，如果你不指定策略参数，那么将使用这个合并策略。这将直接使用递归三路合并算法进行合并。\n```\n\n### octopus\n\n```\n此策略允许合并多个 git 提交节点（分支）。\n不过，如果会出现需要手工解决的冲突，那么此策略将不会执行。\n此策略就是用来把多个分支聚集在一起的。\n```\n\n### ours\n\n```\n在合并的时候，无论有多少个合并分支，当前分支就直接是最终的合并结果。无论其他人有多少修改，在此次合并之后，都将不存在（当然历史里面还有）。\n\n你可能觉得这种丢失改动的合并策略没有什么用。但如果你准备重新在你的仓库中进行开发（程序员最喜欢的重构），那么当你的修改与旧分支合并时，采用此合并策略就非常有用，你新的重构代码将完全不会被旧分支的改动所影响。\n\n注意 recursive 策略中也有一个 ours 参数，与这个不同的。\n```\n\n### subtree\n\n```\n此策略使用的是修改后的递归三路合并算法。与 recursive 不同的是，此策略会将合并的两个分支的其中一个视为另一个的子树，就像 git subtree 中使用的子树一样。\n```\n\n## git merge策略的参数，参数：``-X``\n\n- ours\n- theirs\n- ignore-space-change\n- find-renames=0\n- diff-algorithm={patience|minimal|histogram|myers}\n\n### resolve\n\n```\n-X ours（使用我们的）\n-X theirs（使用他们的）\n-X ignore-space-change（空格改动的话就忽略）\n-X find-renames=0（值越小，使文件越相同）\n-X diff-algorithm={patience|minimal|histogram|myers}（指定一个差异算法，myers是默认的，具体算法差异可通过man手册来查看）\n    此策略的名称叫 “耐心”，因为 git 将话费更多的时间来进行合并一些看起来不怎么重要的行，合并的结果也更加准确。当然，使用的算法是 recursive 即递归三路合并算法\n```\n\n## git merge其他参数\n\n``git merge BRANCH_NAME``\n\n- no-ff               强行关掉fast-forward，所以在使用这种方式后，分支合并后会生成一个新的commit（默认--ff）\n- no-edit             不进入编辑页面，直接提交\n- squash              创建一个单独的提交而不是做一次合并\n- stat                show a diffstat at the end of the merge\n- summary             (synonym to --stat)\n\n\n## git merge方案\n\n- 可使用``git merge-base -a [branch1] [branch2]``查看两个分支或节点共同祖先，可提炼出需要合入的修改有哪些\n- 使用``git merge --no-ff -s recursive -X ignore-space-change  -m \"Upgrade from xxx\" --no-edit -q [BRANCH_NAME]``合入代码\n- 使用``git ls-files -u``查看未合并的文件\n- 提交到审查系统修改后统一合入\n","slug":"2022-6-26git merge策略解析","published":1,"updated":"2022-06-28T14:55:31.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnj90004a4vveqryg3es","content":"<p>git merge策略解析</p>\n<span id=\"more\"></span>\n\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p><code>git merge BRANCH_NAME [-s, --strategy &lt;strategy&gt;] [-X, --strategy-option &lt;option=value&gt;]</code></p>\n<h2 id=\"git-merge策略，参数：-s\"><a href=\"#git-merge策略，参数：-s\" class=\"headerlink\" title=\"git merge策略，参数：-s\"></a>git merge策略，参数：<code>-s</code></h2><ul>\n<li>resolve</li>\n<li>recursive</li>\n<li>octopus</li>\n<li>ours</li>\n<li>subtree</li>\n</ul>\n<h3 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这使用的是三路合并算法。的三路合并算法会存在发现多个共同祖先的问题。</span><br><span class=\"line\">此策略会 “仔细地” 寻找其中一个共同祖先。</span><br><span class=\"line\">由于不需要递归合并出虚拟节点，所以此方法合并时会比较快速，但也可能会带来更多冲突。</span><br><span class=\"line\">不敢说带来更多冲突是好事还是坏事，因为自动合并成功并不一定意味着在代码含义上也算是正确的合并。</span><br><span class=\"line\">所以如果自动合并总是成功但代码含义上会失败，可以考虑此合并策略，这将让更多的冲突变成手工合并而不是自动合并。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"recursive\"><a href=\"#recursive\" class=\"headerlink\" title=\"recursive\"></a>recursive</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是默认的合并策略，如果你不指定策略参数，那么将使用这个合并策略。这将直接使用递归三路合并算法进行合并。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"octopus\"><a href=\"#octopus\" class=\"headerlink\" title=\"octopus\"></a>octopus</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此策略允许合并多个 git 提交节点（分支）。</span><br><span class=\"line\">不过，如果会出现需要手工解决的冲突，那么此策略将不会执行。</span><br><span class=\"line\">此策略就是用来把多个分支聚集在一起的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ours\"><a href=\"#ours\" class=\"headerlink\" title=\"ours\"></a>ours</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在合并的时候，无论有多少个合并分支，当前分支就直接是最终的合并结果。无论其他人有多少修改，在此次合并之后，都将不存在（当然历史里面还有）。</span><br><span class=\"line\"></span><br><span class=\"line\">你可能觉得这种丢失改动的合并策略没有什么用。但如果你准备重新在你的仓库中进行开发（程序员最喜欢的重构），那么当你的修改与旧分支合并时，采用此合并策略就非常有用，你新的重构代码将完全不会被旧分支的改动所影响。</span><br><span class=\"line\"></span><br><span class=\"line\">注意 recursive 策略中也有一个 ours 参数，与这个不同的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"subtree\"><a href=\"#subtree\" class=\"headerlink\" title=\"subtree\"></a>subtree</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此策略使用的是修改后的递归三路合并算法。与 recursive 不同的是，此策略会将合并的两个分支的其中一个视为另一个的子树，就像 git subtree 中使用的子树一样。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-merge策略的参数，参数：-X\"><a href=\"#git-merge策略的参数，参数：-X\" class=\"headerlink\" title=\"git merge策略的参数，参数：-X\"></a>git merge策略的参数，参数：<code>-X</code></h2><ul>\n<li>ours</li>\n<li>theirs</li>\n<li>ignore-space-change</li>\n<li>find-renames&#x3D;0</li>\n<li>diff-algorithm&#x3D;{patience|minimal|histogram|myers}</li>\n</ul>\n<h3 id=\"resolve-1\"><a href=\"#resolve-1\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-X ours（使用我们的）</span><br><span class=\"line\">-X theirs（使用他们的）</span><br><span class=\"line\">-X ignore-space-change（空格改动的话就忽略）</span><br><span class=\"line\">-X find-renames=0（值越小，使文件越相同）</span><br><span class=\"line\">-X diff-algorithm=&#123;patience|minimal|histogram|myers&#125;（指定一个差异算法，myers是默认的，具体算法差异可通过man手册来查看）</span><br><span class=\"line\">    此策略的名称叫 “耐心”，因为 git 将话费更多的时间来进行合并一些看起来不怎么重要的行，合并的结果也更加准确。当然，使用的算法是 recursive 即递归三路合并算法</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-merge其他参数\"><a href=\"#git-merge其他参数\" class=\"headerlink\" title=\"git merge其他参数\"></a>git merge其他参数</h2><p><code>git merge BRANCH_NAME</code></p>\n<ul>\n<li>no-ff               强行关掉fast-forward，所以在使用这种方式后，分支合并后会生成一个新的commit（默认–ff）</li>\n<li>no-edit             不进入编辑页面，直接提交</li>\n<li>squash              创建一个单独的提交而不是做一次合并</li>\n<li>stat                show a diffstat at the end of the merge</li>\n<li>summary             (synonym to –stat)</li>\n</ul>\n<h2 id=\"git-merge方案\"><a href=\"#git-merge方案\" class=\"headerlink\" title=\"git merge方案\"></a>git merge方案</h2><ul>\n<li>可使用<code>git merge-base -a [branch1] [branch2]</code>查看两个分支或节点共同祖先，可提炼出需要合入的修改有哪些</li>\n<li>使用<code>git merge --no-ff -s recursive -X ignore-space-change  -m &quot;Upgrade from xxx&quot; --no-edit -q [BRANCH_NAME]</code>合入代码</li>\n<li>使用<code>git ls-files -u</code>查看未合并的文件</li>\n<li>提交到审查系统修改后统一合入</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>git merge策略解析</p>","more":"<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p><code>git merge BRANCH_NAME [-s, --strategy &lt;strategy&gt;] [-X, --strategy-option &lt;option=value&gt;]</code></p>\n<h2 id=\"git-merge策略，参数：-s\"><a href=\"#git-merge策略，参数：-s\" class=\"headerlink\" title=\"git merge策略，参数：-s\"></a>git merge策略，参数：<code>-s</code></h2><ul>\n<li>resolve</li>\n<li>recursive</li>\n<li>octopus</li>\n<li>ours</li>\n<li>subtree</li>\n</ul>\n<h3 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这使用的是三路合并算法。的三路合并算法会存在发现多个共同祖先的问题。</span><br><span class=\"line\">此策略会 “仔细地” 寻找其中一个共同祖先。</span><br><span class=\"line\">由于不需要递归合并出虚拟节点，所以此方法合并时会比较快速，但也可能会带来更多冲突。</span><br><span class=\"line\">不敢说带来更多冲突是好事还是坏事，因为自动合并成功并不一定意味着在代码含义上也算是正确的合并。</span><br><span class=\"line\">所以如果自动合并总是成功但代码含义上会失败，可以考虑此合并策略，这将让更多的冲突变成手工合并而不是自动合并。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"recursive\"><a href=\"#recursive\" class=\"headerlink\" title=\"recursive\"></a>recursive</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是默认的合并策略，如果你不指定策略参数，那么将使用这个合并策略。这将直接使用递归三路合并算法进行合并。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"octopus\"><a href=\"#octopus\" class=\"headerlink\" title=\"octopus\"></a>octopus</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此策略允许合并多个 git 提交节点（分支）。</span><br><span class=\"line\">不过，如果会出现需要手工解决的冲突，那么此策略将不会执行。</span><br><span class=\"line\">此策略就是用来把多个分支聚集在一起的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ours\"><a href=\"#ours\" class=\"headerlink\" title=\"ours\"></a>ours</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在合并的时候，无论有多少个合并分支，当前分支就直接是最终的合并结果。无论其他人有多少修改，在此次合并之后，都将不存在（当然历史里面还有）。</span><br><span class=\"line\"></span><br><span class=\"line\">你可能觉得这种丢失改动的合并策略没有什么用。但如果你准备重新在你的仓库中进行开发（程序员最喜欢的重构），那么当你的修改与旧分支合并时，采用此合并策略就非常有用，你新的重构代码将完全不会被旧分支的改动所影响。</span><br><span class=\"line\"></span><br><span class=\"line\">注意 recursive 策略中也有一个 ours 参数，与这个不同的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"subtree\"><a href=\"#subtree\" class=\"headerlink\" title=\"subtree\"></a>subtree</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此策略使用的是修改后的递归三路合并算法。与 recursive 不同的是，此策略会将合并的两个分支的其中一个视为另一个的子树，就像 git subtree 中使用的子树一样。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-merge策略的参数，参数：-X\"><a href=\"#git-merge策略的参数，参数：-X\" class=\"headerlink\" title=\"git merge策略的参数，参数：-X\"></a>git merge策略的参数，参数：<code>-X</code></h2><ul>\n<li>ours</li>\n<li>theirs</li>\n<li>ignore-space-change</li>\n<li>find-renames&#x3D;0</li>\n<li>diff-algorithm&#x3D;{patience|minimal|histogram|myers}</li>\n</ul>\n<h3 id=\"resolve-1\"><a href=\"#resolve-1\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-X ours（使用我们的）</span><br><span class=\"line\">-X theirs（使用他们的）</span><br><span class=\"line\">-X ignore-space-change（空格改动的话就忽略）</span><br><span class=\"line\">-X find-renames=0（值越小，使文件越相同）</span><br><span class=\"line\">-X diff-algorithm=&#123;patience|minimal|histogram|myers&#125;（指定一个差异算法，myers是默认的，具体算法差异可通过man手册来查看）</span><br><span class=\"line\">    此策略的名称叫 “耐心”，因为 git 将话费更多的时间来进行合并一些看起来不怎么重要的行，合并的结果也更加准确。当然，使用的算法是 recursive 即递归三路合并算法</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-merge其他参数\"><a href=\"#git-merge其他参数\" class=\"headerlink\" title=\"git merge其他参数\"></a>git merge其他参数</h2><p><code>git merge BRANCH_NAME</code></p>\n<ul>\n<li>no-ff               强行关掉fast-forward，所以在使用这种方式后，分支合并后会生成一个新的commit（默认–ff）</li>\n<li>no-edit             不进入编辑页面，直接提交</li>\n<li>squash              创建一个单独的提交而不是做一次合并</li>\n<li>stat                show a diffstat at the end of the merge</li>\n<li>summary             (synonym to –stat)</li>\n</ul>\n<h2 id=\"git-merge方案\"><a href=\"#git-merge方案\" class=\"headerlink\" title=\"git merge方案\"></a>git merge方案</h2><ul>\n<li>可使用<code>git merge-base -a [branch1] [branch2]</code>查看两个分支或节点共同祖先，可提炼出需要合入的修改有哪些</li>\n<li>使用<code>git merge --no-ff -s recursive -X ignore-space-change  -m &quot;Upgrade from xxx&quot; --no-edit -q [BRANCH_NAME]</code>合入代码</li>\n<li>使用<code>git ls-files -u</code>查看未合并的文件</li>\n<li>提交到审查系统修改后统一合入</li>\n</ul>"},{"title":"Python常见问题","date":"2022-06-28T16:00:00.000Z","_content":"\nPython常见问题\n\n<!--more-->\n\n## python和pip安装\n```\npython\n    安装：sudo apt install python3\n\n    运行\n        python3 xxx.py\n            -u：不带缓存输出\n            -m：模块当做脚本运行\n            -i：镜像源\n            -c：允许cmd\npip\n    安装：sudo apt install python3-pip\n\n    查看所有库：pip3 list\n    升级pip：pip3 install --upgrade pip\n    安装库：pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple\n    卸载并重装pip：sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall\n\n库安装\n    1.离线安装\n        python install setup.py\n    2.pip安装\n        pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple\n    3.idea安装\n        Settings -> Project: script -> Project Interpreter\n```\n\n## 设置镜像源\n```\nubuntu：\n    vim ~/.pip/pip.conf\n        [global]\n        index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n\nwindows：\n    C:\\Users\\xxx\\pip\\pip.ini\n        [global]\n        index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## Pycharm设置\n```\nSettings -> Editor -> File Encodings -> UTF-8\nSettings -> Editor -> Code Style -> Tab size 改成 4\nSettings -> Project: script -> Project Interpreter -> 设置python版本\nSettings -> Project: script -> Project Interpreter -> 点+号，设置镜像源（https://pypi.tuna.tsinghua.edu.cn/simple）\n```\n\n## 生成包依赖\n```\n安装\n    pip3 install pipreqs\n生成\n    pipreqs ./ --encoding=utf8\n安装依赖\n    pip3 install -r requirements.txt\n```\n\n## 虚拟环境\n```\nlinux\n    mkdir myproject\n    cd myproject\n    python3 -m venv venv\n    . venv/bin/activate\n\nwindows\n    mkdir myproject\n    cd myproject\n    py -3 -m venv venv\n    venv\\Scripts\\activate\n```\n\n## 模块导入和使用\n```\n1. 在同一目录下:\n    # 导入模块\n        import support\n    # 使用\n        support.print_func('Runoob')\n        print(support.count)\n\n    # 导入模块内具体内容\n        from support import print_func\n        from support import count\n    # 使用\n        print_func('Runoob')\n        print(count)\n\n2. 子目录\n    import os\n    import sys\n    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'sub_dir'))\n\n3. 父目录\n    import os\n    import sys\n    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n```\n\n## 默认解释器、编码\n```\n#!/usr/bin/python3\n# encoding: utf-8\n```\n\n## Python引号\n```\nPython 可以使用引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 来表示字符串，其中三引号可以由多行组成。\nword = 'word'\nsentence = \"这是一个句子。\"\nparagraph = \"\"\"这是一个段落。\n包含了多个语句\"\"\"\n```\n\n## is 与 == 区别\n```\nis 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。\n```\n\n## 异常处理\n```\n捕获异常：\ntry:\n    doxxx\nexcept Exception as e:\n    print(e)\n    print(traceback.format_exc())\n\n抛出异常：\nraise Exception('haha')\n```\n\n## 全局变量\n```\n引用全局变量，不需要global声明，修改全局变量，需要使用global声明\n```\n\n## 解析参数\n```\nopts,args = getopt.getopt(sys.argv[1:],'hf:v',['help','filename=','version'])\nfor opt_name,opt_value in opts:\n    if opt_name in ('-h','--help'):\n        print(\"[*] Help info\")\n        sys.exit()\n    if opt_name in ('-v','--version'):\n        print(\"[*] Version is 0.01 \")\n        sys.exit()\n    if opt_name in ('-f','--filename'):\n        fileName = opt_value\n        print(\"[*] Filename is \",fileName)\n        # do something\n        sys.exit()\n```\n\n\n## wheel包\n```\n    安装\n        pip3 install wheel\n        pip3 install --upgrade setuptools\n\n    setup.py\n        from setuptools import setup\n\n        setup(\n            name='webscm',\n            version='1.0',\n            py_modules='webscm'\n        )\n\n    生成包\n        python3 setup.py bdist_wheel\n\n    导入包\n        pip3 install webscm-1.0-py3-none-any.whl\n\n    部署\n        pip3 install waitress\n        waitress-serve --call 'flaskr:create_app'\n```\n\n## url编码和解码\n```\nfrom urllib.parse import quote\n\n# 将字符串‘程序设计’进行编码\ntext = quote(\"程序设计\", 'utf-8')\n\n# 对字符串‘%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1’进行解密\ntext = unquote(\"%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\", 'utf-8')\n```\n\n## 列表推导\n```\nlist comprehensions\ntmp_list = [var['file_name'] for var in LONG_SAVE_FILE_LIST]\n```","source":"_posts/2022-6-29Python常见问题.md","raw":"---\ntitle: Python常见问题\ndate: 2022-6-29\ntags: [python]\n---\n\nPython常见问题\n\n<!--more-->\n\n## python和pip安装\n```\npython\n    安装：sudo apt install python3\n\n    运行\n        python3 xxx.py\n            -u：不带缓存输出\n            -m：模块当做脚本运行\n            -i：镜像源\n            -c：允许cmd\npip\n    安装：sudo apt install python3-pip\n\n    查看所有库：pip3 list\n    升级pip：pip3 install --upgrade pip\n    安装库：pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple\n    卸载并重装pip：sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall\n\n库安装\n    1.离线安装\n        python install setup.py\n    2.pip安装\n        pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple\n    3.idea安装\n        Settings -> Project: script -> Project Interpreter\n```\n\n## 设置镜像源\n```\nubuntu：\n    vim ~/.pip/pip.conf\n        [global]\n        index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n\nwindows：\n    C:\\Users\\xxx\\pip\\pip.ini\n        [global]\n        index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## Pycharm设置\n```\nSettings -> Editor -> File Encodings -> UTF-8\nSettings -> Editor -> Code Style -> Tab size 改成 4\nSettings -> Project: script -> Project Interpreter -> 设置python版本\nSettings -> Project: script -> Project Interpreter -> 点+号，设置镜像源（https://pypi.tuna.tsinghua.edu.cn/simple）\n```\n\n## 生成包依赖\n```\n安装\n    pip3 install pipreqs\n生成\n    pipreqs ./ --encoding=utf8\n安装依赖\n    pip3 install -r requirements.txt\n```\n\n## 虚拟环境\n```\nlinux\n    mkdir myproject\n    cd myproject\n    python3 -m venv venv\n    . venv/bin/activate\n\nwindows\n    mkdir myproject\n    cd myproject\n    py -3 -m venv venv\n    venv\\Scripts\\activate\n```\n\n## 模块导入和使用\n```\n1. 在同一目录下:\n    # 导入模块\n        import support\n    # 使用\n        support.print_func('Runoob')\n        print(support.count)\n\n    # 导入模块内具体内容\n        from support import print_func\n        from support import count\n    # 使用\n        print_func('Runoob')\n        print(count)\n\n2. 子目录\n    import os\n    import sys\n    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'sub_dir'))\n\n3. 父目录\n    import os\n    import sys\n    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n```\n\n## 默认解释器、编码\n```\n#!/usr/bin/python3\n# encoding: utf-8\n```\n\n## Python引号\n```\nPython 可以使用引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 来表示字符串，其中三引号可以由多行组成。\nword = 'word'\nsentence = \"这是一个句子。\"\nparagraph = \"\"\"这是一个段落。\n包含了多个语句\"\"\"\n```\n\n## is 与 == 区别\n```\nis 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。\n```\n\n## 异常处理\n```\n捕获异常：\ntry:\n    doxxx\nexcept Exception as e:\n    print(e)\n    print(traceback.format_exc())\n\n抛出异常：\nraise Exception('haha')\n```\n\n## 全局变量\n```\n引用全局变量，不需要global声明，修改全局变量，需要使用global声明\n```\n\n## 解析参数\n```\nopts,args = getopt.getopt(sys.argv[1:],'hf:v',['help','filename=','version'])\nfor opt_name,opt_value in opts:\n    if opt_name in ('-h','--help'):\n        print(\"[*] Help info\")\n        sys.exit()\n    if opt_name in ('-v','--version'):\n        print(\"[*] Version is 0.01 \")\n        sys.exit()\n    if opt_name in ('-f','--filename'):\n        fileName = opt_value\n        print(\"[*] Filename is \",fileName)\n        # do something\n        sys.exit()\n```\n\n\n## wheel包\n```\n    安装\n        pip3 install wheel\n        pip3 install --upgrade setuptools\n\n    setup.py\n        from setuptools import setup\n\n        setup(\n            name='webscm',\n            version='1.0',\n            py_modules='webscm'\n        )\n\n    生成包\n        python3 setup.py bdist_wheel\n\n    导入包\n        pip3 install webscm-1.0-py3-none-any.whl\n\n    部署\n        pip3 install waitress\n        waitress-serve --call 'flaskr:create_app'\n```\n\n## url编码和解码\n```\nfrom urllib.parse import quote\n\n# 将字符串‘程序设计’进行编码\ntext = quote(\"程序设计\", 'utf-8')\n\n# 对字符串‘%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1’进行解密\ntext = unquote(\"%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\", 'utf-8')\n```\n\n## 列表推导\n```\nlist comprehensions\ntmp_list = [var['file_name'] for var in LONG_SAVE_FILE_LIST]\n```","slug":"2022-6-29Python常见问题","published":1,"updated":"2022-06-29T08:17:31.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnja0005a4vvfhvffcc8","content":"<p>Python常见问题</p>\n<span id=\"more\"></span>\n\n<h2 id=\"python和pip安装\"><a href=\"#python和pip安装\" class=\"headerlink\" title=\"python和pip安装\"></a>python和pip安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">    安装：sudo apt install python3</span><br><span class=\"line\"></span><br><span class=\"line\">    运行</span><br><span class=\"line\">        python3 xxx.py</span><br><span class=\"line\">            -u：不带缓存输出</span><br><span class=\"line\">            -m：模块当做脚本运行</span><br><span class=\"line\">            -i：镜像源</span><br><span class=\"line\">            -c：允许cmd</span><br><span class=\"line\">pip</span><br><span class=\"line\">    安装：sudo apt install python3-pip</span><br><span class=\"line\"></span><br><span class=\"line\">    查看所有库：pip3 list</span><br><span class=\"line\">    升级pip：pip3 install --upgrade pip</span><br><span class=\"line\">    安装库：pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">    卸载并重装pip：sudo python3 -m pip uninstall pip &amp;&amp; sudo apt install python3-pip --reinstall</span><br><span class=\"line\"></span><br><span class=\"line\">库安装</span><br><span class=\"line\">    1.离线安装</span><br><span class=\"line\">        python install setup.py</span><br><span class=\"line\">    2.pip安装</span><br><span class=\"line\">        pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">    3.idea安装</span><br><span class=\"line\">        Settings -&gt; Project: script -&gt; Project Interpreter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置镜像源\"><a href=\"#设置镜像源\" class=\"headerlink\" title=\"设置镜像源\"></a>设置镜像源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu：</span><br><span class=\"line\">    vim ~/.pip/pip.conf</span><br><span class=\"line\">        [global]</span><br><span class=\"line\">        index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"></span><br><span class=\"line\">windows：</span><br><span class=\"line\">    C:\\Users\\xxx\\pip\\pip.ini</span><br><span class=\"line\">        [global]</span><br><span class=\"line\">        index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pycharm设置\"><a href=\"#Pycharm设置\" class=\"headerlink\" title=\"Pycharm设置\"></a>Pycharm设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings -&gt; Editor -&gt; File Encodings -&gt; UTF-8</span><br><span class=\"line\">Settings -&gt; Editor -&gt; Code Style -&gt; Tab size 改成 4</span><br><span class=\"line\">Settings -&gt; Project: script -&gt; Project Interpreter -&gt; 设置python版本</span><br><span class=\"line\">Settings -&gt; Project: script -&gt; Project Interpreter -&gt; 点+号，设置镜像源（https://pypi.tuna.tsinghua.edu.cn/simple）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成包依赖\"><a href=\"#生成包依赖\" class=\"headerlink\" title=\"生成包依赖\"></a>生成包依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\">    pip3 install pipreqs</span><br><span class=\"line\">生成</span><br><span class=\"line\">    pipreqs ./ --encoding=utf8</span><br><span class=\"line\">安装依赖</span><br><span class=\"line\">    pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linux</span><br><span class=\"line\">    mkdir myproject</span><br><span class=\"line\">    cd myproject</span><br><span class=\"line\">    python3 -m venv venv</span><br><span class=\"line\">    . venv/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\">windows</span><br><span class=\"line\">    mkdir myproject</span><br><span class=\"line\">    cd myproject</span><br><span class=\"line\">    py -3 -m venv venv</span><br><span class=\"line\">    venv\\Scripts\\activate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块导入和使用\"><a href=\"#模块导入和使用\" class=\"headerlink\" title=\"模块导入和使用\"></a>模块导入和使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 在同一目录下:</span><br><span class=\"line\">    # 导入模块</span><br><span class=\"line\">        import support</span><br><span class=\"line\">    # 使用</span><br><span class=\"line\">        support.print_func(&#x27;Runoob&#x27;)</span><br><span class=\"line\">        print(support.count)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 导入模块内具体内容</span><br><span class=\"line\">        from support import print_func</span><br><span class=\"line\">        from support import count</span><br><span class=\"line\">    # 使用</span><br><span class=\"line\">        print_func(&#x27;Runoob&#x27;)</span><br><span class=\"line\">        print(count)</span><br><span class=\"line\"></span><br><span class=\"line\">2. 子目录</span><br><span class=\"line\">    import os</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), &#x27;sub_dir&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">3. 父目录</span><br><span class=\"line\">    import os</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认解释器、编码\"><a href=\"#默认解释器、编码\" class=\"headerlink\" title=\"默认解释器、编码\"></a>默认解释器、编码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"># encoding: utf-8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python引号\"><a href=\"#Python引号\" class=\"headerlink\" title=\"Python引号\"></a>Python引号</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 可以使用引号( &#x27; )、双引号( &quot; )、三引号( &#x27;&#x27;&#x27; 或 &quot;&quot;&quot; ) 来表示字符串，其中三引号可以由多行组成。</span><br><span class=\"line\">word = &#x27;word&#x27;</span><br><span class=\"line\">sentence = &quot;这是一个句子。&quot;</span><br><span class=\"line\">paragraph = &quot;&quot;&quot;这是一个段落。</span><br><span class=\"line\">包含了多个语句&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"is-与-x3D-x3D-区别\"><a href=\"#is-与-x3D-x3D-区别\" class=\"headerlink\" title=\"is 与 &#x3D;&#x3D; 区别\"></a>is 与 &#x3D;&#x3D; 区别</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">捕获异常：</span><br><span class=\"line\">try:</span><br><span class=\"line\">    doxxx</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">    print(traceback.format_exc())</span><br><span class=\"line\"></span><br><span class=\"line\">抛出异常：</span><br><span class=\"line\">raise Exception(&#x27;haha&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用全局变量，不需要global声明，修改全局变量，需要使用global声明</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析参数\"><a href=\"#解析参数\" class=\"headerlink\" title=\"解析参数\"></a>解析参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opts,args = getopt.getopt(sys.argv[1:],&#x27;hf:v&#x27;,[&#x27;help&#x27;,&#x27;filename=&#x27;,&#x27;version&#x27;])</span><br><span class=\"line\">for opt_name,opt_value in opts:</span><br><span class=\"line\">    if opt_name in (&#x27;-h&#x27;,&#x27;--help&#x27;):</span><br><span class=\"line\">        print(&quot;[*] Help info&quot;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    if opt_name in (&#x27;-v&#x27;,&#x27;--version&#x27;):</span><br><span class=\"line\">        print(&quot;[*] Version is 0.01 &quot;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    if opt_name in (&#x27;-f&#x27;,&#x27;--filename&#x27;):</span><br><span class=\"line\">        fileName = opt_value</span><br><span class=\"line\">        print(&quot;[*] Filename is &quot;,fileName)</span><br><span class=\"line\">        # do something</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"wheel包\"><a href=\"#wheel包\" class=\"headerlink\" title=\"wheel包\"></a>wheel包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\">    pip3 install wheel</span><br><span class=\"line\">    pip3 install --upgrade setuptools</span><br><span class=\"line\"></span><br><span class=\"line\">setup.py</span><br><span class=\"line\">    from setuptools import setup</span><br><span class=\"line\"></span><br><span class=\"line\">    setup(</span><br><span class=\"line\">        name=&#x27;webscm&#x27;,</span><br><span class=\"line\">        version=&#x27;1.0&#x27;,</span><br><span class=\"line\">        py_modules=&#x27;webscm&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">生成包</span><br><span class=\"line\">    python3 setup.py bdist_wheel</span><br><span class=\"line\"></span><br><span class=\"line\">导入包</span><br><span class=\"line\">    pip3 install webscm-1.0-py3-none-any.whl</span><br><span class=\"line\"></span><br><span class=\"line\">部署</span><br><span class=\"line\">    pip3 install waitress</span><br><span class=\"line\">    waitress-serve --call &#x27;flaskr:create_app&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"url编码和解码\"><a href=\"#url编码和解码\" class=\"headerlink\" title=\"url编码和解码\"></a>url编码和解码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.parse import quote</span><br><span class=\"line\"></span><br><span class=\"line\"># 将字符串‘程序设计’进行编码</span><br><span class=\"line\">text = quote(&quot;程序设计&quot;, &#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 对字符串‘%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1’进行解密</span><br><span class=\"line\">text = unquote(&quot;%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&quot;, &#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表推导\"><a href=\"#列表推导\" class=\"headerlink\" title=\"列表推导\"></a>列表推导</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list comprehensions</span><br><span class=\"line\">tmp_list = [var[&#x27;file_name&#x27;] for var in LONG_SAVE_FILE_LIST]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Python常见问题</p>","more":"<h2 id=\"python和pip安装\"><a href=\"#python和pip安装\" class=\"headerlink\" title=\"python和pip安装\"></a>python和pip安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">    安装：sudo apt install python3</span><br><span class=\"line\"></span><br><span class=\"line\">    运行</span><br><span class=\"line\">        python3 xxx.py</span><br><span class=\"line\">            -u：不带缓存输出</span><br><span class=\"line\">            -m：模块当做脚本运行</span><br><span class=\"line\">            -i：镜像源</span><br><span class=\"line\">            -c：允许cmd</span><br><span class=\"line\">pip</span><br><span class=\"line\">    安装：sudo apt install python3-pip</span><br><span class=\"line\"></span><br><span class=\"line\">    查看所有库：pip3 list</span><br><span class=\"line\">    升级pip：pip3 install --upgrade pip</span><br><span class=\"line\">    安装库：pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">    卸载并重装pip：sudo python3 -m pip uninstall pip &amp;&amp; sudo apt install python3-pip --reinstall</span><br><span class=\"line\"></span><br><span class=\"line\">库安装</span><br><span class=\"line\">    1.离线安装</span><br><span class=\"line\">        python install setup.py</span><br><span class=\"line\">    2.pip安装</span><br><span class=\"line\">        pip3 install requests=[版本号] -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">    3.idea安装</span><br><span class=\"line\">        Settings -&gt; Project: script -&gt; Project Interpreter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置镜像源\"><a href=\"#设置镜像源\" class=\"headerlink\" title=\"设置镜像源\"></a>设置镜像源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu：</span><br><span class=\"line\">    vim ~/.pip/pip.conf</span><br><span class=\"line\">        [global]</span><br><span class=\"line\">        index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\"></span><br><span class=\"line\">windows：</span><br><span class=\"line\">    C:\\Users\\xxx\\pip\\pip.ini</span><br><span class=\"line\">        [global]</span><br><span class=\"line\">        index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pycharm设置\"><a href=\"#Pycharm设置\" class=\"headerlink\" title=\"Pycharm设置\"></a>Pycharm设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings -&gt; Editor -&gt; File Encodings -&gt; UTF-8</span><br><span class=\"line\">Settings -&gt; Editor -&gt; Code Style -&gt; Tab size 改成 4</span><br><span class=\"line\">Settings -&gt; Project: script -&gt; Project Interpreter -&gt; 设置python版本</span><br><span class=\"line\">Settings -&gt; Project: script -&gt; Project Interpreter -&gt; 点+号，设置镜像源（https://pypi.tuna.tsinghua.edu.cn/simple）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成包依赖\"><a href=\"#生成包依赖\" class=\"headerlink\" title=\"生成包依赖\"></a>生成包依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\">    pip3 install pipreqs</span><br><span class=\"line\">生成</span><br><span class=\"line\">    pipreqs ./ --encoding=utf8</span><br><span class=\"line\">安装依赖</span><br><span class=\"line\">    pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linux</span><br><span class=\"line\">    mkdir myproject</span><br><span class=\"line\">    cd myproject</span><br><span class=\"line\">    python3 -m venv venv</span><br><span class=\"line\">    . venv/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\">windows</span><br><span class=\"line\">    mkdir myproject</span><br><span class=\"line\">    cd myproject</span><br><span class=\"line\">    py -3 -m venv venv</span><br><span class=\"line\">    venv\\Scripts\\activate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块导入和使用\"><a href=\"#模块导入和使用\" class=\"headerlink\" title=\"模块导入和使用\"></a>模块导入和使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 在同一目录下:</span><br><span class=\"line\">    # 导入模块</span><br><span class=\"line\">        import support</span><br><span class=\"line\">    # 使用</span><br><span class=\"line\">        support.print_func(&#x27;Runoob&#x27;)</span><br><span class=\"line\">        print(support.count)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 导入模块内具体内容</span><br><span class=\"line\">        from support import print_func</span><br><span class=\"line\">        from support import count</span><br><span class=\"line\">    # 使用</span><br><span class=\"line\">        print_func(&#x27;Runoob&#x27;)</span><br><span class=\"line\">        print(count)</span><br><span class=\"line\"></span><br><span class=\"line\">2. 子目录</span><br><span class=\"line\">    import os</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), &#x27;sub_dir&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">3. 父目录</span><br><span class=\"line\">    import os</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认解释器、编码\"><a href=\"#默认解释器、编码\" class=\"headerlink\" title=\"默认解释器、编码\"></a>默认解释器、编码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"># encoding: utf-8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python引号\"><a href=\"#Python引号\" class=\"headerlink\" title=\"Python引号\"></a>Python引号</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 可以使用引号( &#x27; )、双引号( &quot; )、三引号( &#x27;&#x27;&#x27; 或 &quot;&quot;&quot; ) 来表示字符串，其中三引号可以由多行组成。</span><br><span class=\"line\">word = &#x27;word&#x27;</span><br><span class=\"line\">sentence = &quot;这是一个句子。&quot;</span><br><span class=\"line\">paragraph = &quot;&quot;&quot;这是一个段落。</span><br><span class=\"line\">包含了多个语句&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"is-与-x3D-x3D-区别\"><a href=\"#is-与-x3D-x3D-区别\" class=\"headerlink\" title=\"is 与 &#x3D;&#x3D; 区别\"></a>is 与 &#x3D;&#x3D; 区别</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">捕获异常：</span><br><span class=\"line\">try:</span><br><span class=\"line\">    doxxx</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">    print(traceback.format_exc())</span><br><span class=\"line\"></span><br><span class=\"line\">抛出异常：</span><br><span class=\"line\">raise Exception(&#x27;haha&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用全局变量，不需要global声明，修改全局变量，需要使用global声明</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析参数\"><a href=\"#解析参数\" class=\"headerlink\" title=\"解析参数\"></a>解析参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opts,args = getopt.getopt(sys.argv[1:],&#x27;hf:v&#x27;,[&#x27;help&#x27;,&#x27;filename=&#x27;,&#x27;version&#x27;])</span><br><span class=\"line\">for opt_name,opt_value in opts:</span><br><span class=\"line\">    if opt_name in (&#x27;-h&#x27;,&#x27;--help&#x27;):</span><br><span class=\"line\">        print(&quot;[*] Help info&quot;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    if opt_name in (&#x27;-v&#x27;,&#x27;--version&#x27;):</span><br><span class=\"line\">        print(&quot;[*] Version is 0.01 &quot;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    if opt_name in (&#x27;-f&#x27;,&#x27;--filename&#x27;):</span><br><span class=\"line\">        fileName = opt_value</span><br><span class=\"line\">        print(&quot;[*] Filename is &quot;,fileName)</span><br><span class=\"line\">        # do something</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"wheel包\"><a href=\"#wheel包\" class=\"headerlink\" title=\"wheel包\"></a>wheel包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\">    pip3 install wheel</span><br><span class=\"line\">    pip3 install --upgrade setuptools</span><br><span class=\"line\"></span><br><span class=\"line\">setup.py</span><br><span class=\"line\">    from setuptools import setup</span><br><span class=\"line\"></span><br><span class=\"line\">    setup(</span><br><span class=\"line\">        name=&#x27;webscm&#x27;,</span><br><span class=\"line\">        version=&#x27;1.0&#x27;,</span><br><span class=\"line\">        py_modules=&#x27;webscm&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">生成包</span><br><span class=\"line\">    python3 setup.py bdist_wheel</span><br><span class=\"line\"></span><br><span class=\"line\">导入包</span><br><span class=\"line\">    pip3 install webscm-1.0-py3-none-any.whl</span><br><span class=\"line\"></span><br><span class=\"line\">部署</span><br><span class=\"line\">    pip3 install waitress</span><br><span class=\"line\">    waitress-serve --call &#x27;flaskr:create_app&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"url编码和解码\"><a href=\"#url编码和解码\" class=\"headerlink\" title=\"url编码和解码\"></a>url编码和解码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.parse import quote</span><br><span class=\"line\"></span><br><span class=\"line\"># 将字符串‘程序设计’进行编码</span><br><span class=\"line\">text = quote(&quot;程序设计&quot;, &#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 对字符串‘%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1’进行解密</span><br><span class=\"line\">text = unquote(&quot;%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&quot;, &#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表推导\"><a href=\"#列表推导\" class=\"headerlink\" title=\"列表推导\"></a>列表推导</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list comprehensions</span><br><span class=\"line\">tmp_list = [var[&#x27;file_name&#x27;] for var in LONG_SAVE_FILE_LIST]</span><br></pre></td></tr></table></figure>"},{"title":"git-lfs","date":"2022-06-29T16:00:00.000Z","_content":"\ngit-lfs\n\n<!--more-->\n\n## Github 对文件大小的限制\n如果你在命令行用 ``git push > 50 MB`` 的文件，你会收到一个 ``warning``，但是你仍然可以正常 ``push``，但是 ``> 100 MB`` 的时候就无法 push 了\n\n如果你在浏览器要上传文件的话，限制更为严重，不能超过 25 MB\n\n另外有几点值得注意：\n\nGithub 建议仓库的大小理想情况下不要超过 1 GB，最好不要超过 5 GB\nGithub 从来不建议把仓库当成一种备份工具\n\n## 为什么需要 gif-lfs\n前面提到的 Github 对文件大小的限制是一点\n\n另外因为每次我们在使用 ``git commit`` 的时候，其实是给当前的仓库创建了一次快照，本质是全仓库的克隆，如果大文件太多是很不好的，你的 Git 仓库会越来越大\n\n## 什么情况下不需要用 gif-lfs\n文件没有超过限制当然就没有必要用了\n如果是要分发二进制文件（比如 *.exe）等，此时直接用 Github 提供的 release 功能就好了\n\n## git-lfs 原理\n使用 ``gif-lfs`` 之后，在仓库中存储的其实是对大文件的引用，可以理解为指针。而真正的大文件托管在 Git Lfs 的服务器上\n\nGithub 给不同用户的 ``git-lfs`` 提供的额度不一样，免费用户和 Pro 用户都是 2 GB\n\n## 引用文件长什么样子\n比如官方文档里面提到的例子：\n```\nversion https://git-lfs.github.com/spec/v1\noid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5\nsize 84977953\n```\n其中 ``version`` 是你正在使用的 ``git-lfs`` 的版本，``oid`` 是标志符（id），``size`` 是文件的真实大小\n\n## 开始使用 git-lfs\n### 如何安装 git-lfs (Mac 环境下)\n```commandline\n> brew install git-lfs\n> git lfa install                 # 如果输出为 Git LFS initialized. 就是正常安装好了\n```\n\n### Case 1. 从 0 开始配置使用 git-lfs\n我们要指定 ``git-lfs`` 会把哪些文件当作大文件，指定方式比如有：\n\n指定文件后缀名——``git lfs track \"*.filetype\"``\n\n指定某个目录下的所有文件——``git lfs track \"directory/*\"``\n\n具体指定某个文件——``git lfs track \"path/to/file\"``\n\n```\n> mkdir <repo>\n> cd <repo>\n> git init\n> git lfs track \"*.filetype\"         # 比如 *.zip\n \n# 其实 git lfs track 会修改 .gitattributes 文件的内容，可以做一个快速的验证\n# > cat .gitattributes\n# *.zip filter=lfs diff=lfs merge=lfs -text\n \n# 下面假定在 Github 有一个远程仓库供我们使用\n# 往仓库里加你先前指定的文件类型的大文件\n> git add .                                         \n> git commit -m \"\"\n> git branch -M main\n> git remote add origin git@github.com:<username>/<remote_repo_name>.git     # 这里替换为自己的用户名和远程仓库名\n> git push -u origin main\n# 此时命令行会显示\n# > uploading LFS objects\n# 如果没有采用 git-lfs，则显示如下内容\n# > Enumerating objects: 3, done.\n#   Counting objects: 100% (3/3), done.\n#   Delta compression using up to 8 threads\n#   Compressing objects: 100% (2/2), done.\n```\n\n### Case 2. 要在已有的仓库上用 git-lfs 追踪某些文件\n\n此时只是简单的使用 ``git lfs track \"\"`` 是没用的，因为你之前的 commit 已经生成了快照，你无法追踪历史中的这些大文件。\n\n``git-lfs`` **只会在你开始设置的此刻之后追踪新生成的指定文件**\n\n可以快速做个验证，假设我们还在这个仓库里\n\n```\n> ls > test1.txt\n> ls -l > test2.txt\n> git add test1.txt test2.txt\n> git commit -m \"Add txt files\"\n \n# 假设我们现在要把 txt 文件当成是大文件，我们可能会想这么做\n> git lfs track \"*.txt\"\n> git add .gitattributes\n> git commit -m \"Track *.txt files\"\n> git lfs ls-files                      # 此时你会发现 git-lfs 并没有追踪 txt 文件\n \n> echo \"hello\" > test3.txt\n> git add test3.txt\n> git commit -m \"Add test3.txt\"\n> git lfs ls-files                      # 此时你可以在输出中看到 test3.txt\n```\n\n正确的方法是使用 ``git lfs migrate``，这里只列举了简单的用法，更复杂的可以看看手册。比如可以用 ``--include-ref=`` 指定分支，多个分支的时候最好一个分支一个分支地迁移，最后是 ``git push --all -f``\n\n```\n> git lfs migrate import --include=\"*.txt\"  # 在当前分支上执行\n> git lfs ls-files                          # 此时可以发现 text1.txt 和 text2.txt 也被追踪到了\n> git push --force                          # 让远程仓库也改过来\n```\n\n### Case 3. 不再跟踪某些文件\n```\n> git lfs untrack \"*.filetype\"\n> git rm --cached \"*.txt\"\n```\n\n### 其他常用命令\n查看当前 ``git-lfs`` 正在追踪的文件类型——``git lfs track``\n查看当前 ``git-lfs`` 正在追踪哪些文件——``git lfs ls-file``\n\n## 参考\nhttps://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\n\nhttp://www.zyiz.net/tech/detail-259950.html","source":"_posts/2022-6-30git-lfs.md","raw":"---\ntitle: git-lfs\ndate: 2022-6-30\ntags: [git, lfs]\n---\n\ngit-lfs\n\n<!--more-->\n\n## Github 对文件大小的限制\n如果你在命令行用 ``git push > 50 MB`` 的文件，你会收到一个 ``warning``，但是你仍然可以正常 ``push``，但是 ``> 100 MB`` 的时候就无法 push 了\n\n如果你在浏览器要上传文件的话，限制更为严重，不能超过 25 MB\n\n另外有几点值得注意：\n\nGithub 建议仓库的大小理想情况下不要超过 1 GB，最好不要超过 5 GB\nGithub 从来不建议把仓库当成一种备份工具\n\n## 为什么需要 gif-lfs\n前面提到的 Github 对文件大小的限制是一点\n\n另外因为每次我们在使用 ``git commit`` 的时候，其实是给当前的仓库创建了一次快照，本质是全仓库的克隆，如果大文件太多是很不好的，你的 Git 仓库会越来越大\n\n## 什么情况下不需要用 gif-lfs\n文件没有超过限制当然就没有必要用了\n如果是要分发二进制文件（比如 *.exe）等，此时直接用 Github 提供的 release 功能就好了\n\n## git-lfs 原理\n使用 ``gif-lfs`` 之后，在仓库中存储的其实是对大文件的引用，可以理解为指针。而真正的大文件托管在 Git Lfs 的服务器上\n\nGithub 给不同用户的 ``git-lfs`` 提供的额度不一样，免费用户和 Pro 用户都是 2 GB\n\n## 引用文件长什么样子\n比如官方文档里面提到的例子：\n```\nversion https://git-lfs.github.com/spec/v1\noid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5\nsize 84977953\n```\n其中 ``version`` 是你正在使用的 ``git-lfs`` 的版本，``oid`` 是标志符（id），``size`` 是文件的真实大小\n\n## 开始使用 git-lfs\n### 如何安装 git-lfs (Mac 环境下)\n```commandline\n> brew install git-lfs\n> git lfa install                 # 如果输出为 Git LFS initialized. 就是正常安装好了\n```\n\n### Case 1. 从 0 开始配置使用 git-lfs\n我们要指定 ``git-lfs`` 会把哪些文件当作大文件，指定方式比如有：\n\n指定文件后缀名——``git lfs track \"*.filetype\"``\n\n指定某个目录下的所有文件——``git lfs track \"directory/*\"``\n\n具体指定某个文件——``git lfs track \"path/to/file\"``\n\n```\n> mkdir <repo>\n> cd <repo>\n> git init\n> git lfs track \"*.filetype\"         # 比如 *.zip\n \n# 其实 git lfs track 会修改 .gitattributes 文件的内容，可以做一个快速的验证\n# > cat .gitattributes\n# *.zip filter=lfs diff=lfs merge=lfs -text\n \n# 下面假定在 Github 有一个远程仓库供我们使用\n# 往仓库里加你先前指定的文件类型的大文件\n> git add .                                         \n> git commit -m \"\"\n> git branch -M main\n> git remote add origin git@github.com:<username>/<remote_repo_name>.git     # 这里替换为自己的用户名和远程仓库名\n> git push -u origin main\n# 此时命令行会显示\n# > uploading LFS objects\n# 如果没有采用 git-lfs，则显示如下内容\n# > Enumerating objects: 3, done.\n#   Counting objects: 100% (3/3), done.\n#   Delta compression using up to 8 threads\n#   Compressing objects: 100% (2/2), done.\n```\n\n### Case 2. 要在已有的仓库上用 git-lfs 追踪某些文件\n\n此时只是简单的使用 ``git lfs track \"\"`` 是没用的，因为你之前的 commit 已经生成了快照，你无法追踪历史中的这些大文件。\n\n``git-lfs`` **只会在你开始设置的此刻之后追踪新生成的指定文件**\n\n可以快速做个验证，假设我们还在这个仓库里\n\n```\n> ls > test1.txt\n> ls -l > test2.txt\n> git add test1.txt test2.txt\n> git commit -m \"Add txt files\"\n \n# 假设我们现在要把 txt 文件当成是大文件，我们可能会想这么做\n> git lfs track \"*.txt\"\n> git add .gitattributes\n> git commit -m \"Track *.txt files\"\n> git lfs ls-files                      # 此时你会发现 git-lfs 并没有追踪 txt 文件\n \n> echo \"hello\" > test3.txt\n> git add test3.txt\n> git commit -m \"Add test3.txt\"\n> git lfs ls-files                      # 此时你可以在输出中看到 test3.txt\n```\n\n正确的方法是使用 ``git lfs migrate``，这里只列举了简单的用法，更复杂的可以看看手册。比如可以用 ``--include-ref=`` 指定分支，多个分支的时候最好一个分支一个分支地迁移，最后是 ``git push --all -f``\n\n```\n> git lfs migrate import --include=\"*.txt\"  # 在当前分支上执行\n> git lfs ls-files                          # 此时可以发现 text1.txt 和 text2.txt 也被追踪到了\n> git push --force                          # 让远程仓库也改过来\n```\n\n### Case 3. 不再跟踪某些文件\n```\n> git lfs untrack \"*.filetype\"\n> git rm --cached \"*.txt\"\n```\n\n### 其他常用命令\n查看当前 ``git-lfs`` 正在追踪的文件类型——``git lfs track``\n查看当前 ``git-lfs`` 正在追踪哪些文件——``git lfs ls-file``\n\n## 参考\nhttps://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\n\nhttp://www.zyiz.net/tech/detail-259950.html","slug":"2022-6-30git-lfs","published":1,"updated":"2022-06-30T09:32:02.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnjb0008a4vva652hpkd","content":"<p>git-lfs</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Github-对文件大小的限制\"><a href=\"#Github-对文件大小的限制\" class=\"headerlink\" title=\"Github 对文件大小的限制\"></a>Github 对文件大小的限制</h2><p>如果你在命令行用 <code>git push &gt; 50 MB</code> 的文件，你会收到一个 <code>warning</code>，但是你仍然可以正常 <code>push</code>，但是 <code>&gt; 100 MB</code> 的时候就无法 push 了</p>\n<p>如果你在浏览器要上传文件的话，限制更为严重，不能超过 25 MB</p>\n<p>另外有几点值得注意：</p>\n<p>Github 建议仓库的大小理想情况下不要超过 1 GB，最好不要超过 5 GB<br>Github 从来不建议把仓库当成一种备份工具</p>\n<h2 id=\"为什么需要-gif-lfs\"><a href=\"#为什么需要-gif-lfs\" class=\"headerlink\" title=\"为什么需要 gif-lfs\"></a>为什么需要 gif-lfs</h2><p>前面提到的 Github 对文件大小的限制是一点</p>\n<p>另外因为每次我们在使用 <code>git commit</code> 的时候，其实是给当前的仓库创建了一次快照，本质是全仓库的克隆，如果大文件太多是很不好的，你的 Git 仓库会越来越大</p>\n<h2 id=\"什么情况下不需要用-gif-lfs\"><a href=\"#什么情况下不需要用-gif-lfs\" class=\"headerlink\" title=\"什么情况下不需要用 gif-lfs\"></a>什么情况下不需要用 gif-lfs</h2><p>文件没有超过限制当然就没有必要用了<br>如果是要分发二进制文件（比如 *.exe）等，此时直接用 Github 提供的 release 功能就好了</p>\n<h2 id=\"git-lfs-原理\"><a href=\"#git-lfs-原理\" class=\"headerlink\" title=\"git-lfs 原理\"></a>git-lfs 原理</h2><p>使用 <code>gif-lfs</code> 之后，在仓库中存储的其实是对大文件的引用，可以理解为指针。而真正的大文件托管在 Git Lfs 的服务器上</p>\n<p>Github 给不同用户的 <code>git-lfs</code> 提供的额度不一样，免费用户和 Pro 用户都是 2 GB</p>\n<h2 id=\"引用文件长什么样子\"><a href=\"#引用文件长什么样子\" class=\"headerlink\" title=\"引用文件长什么样子\"></a>引用文件长什么样子</h2><p>比如官方文档里面提到的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version https://git-lfs.github.com/spec/v1</span><br><span class=\"line\">oid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5</span><br><span class=\"line\">size 84977953</span><br></pre></td></tr></table></figure>\n<p>其中 <code>version</code> 是你正在使用的 <code>git-lfs</code> 的版本，<code>oid</code> 是标志符（id），<code>size</code> 是文件的真实大小</p>\n<h2 id=\"开始使用-git-lfs\"><a href=\"#开始使用-git-lfs\" class=\"headerlink\" title=\"开始使用 git-lfs\"></a>开始使用 git-lfs</h2><h3 id=\"如何安装-git-lfs-Mac-环境下\"><a href=\"#如何安装-git-lfs-Mac-环境下\" class=\"headerlink\" title=\"如何安装 git-lfs (Mac 环境下)\"></a>如何安装 git-lfs (Mac 环境下)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; brew install git-lfs</span><br><span class=\"line\">&gt; git lfa install                 # 如果输出为 Git LFS initialized. 就是正常安装好了</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case-1-从-0-开始配置使用-git-lfs\"><a href=\"#Case-1-从-0-开始配置使用-git-lfs\" class=\"headerlink\" title=\"Case 1. 从 0 开始配置使用 git-lfs\"></a>Case 1. 从 0 开始配置使用 git-lfs</h3><p>我们要指定 <code>git-lfs</code> 会把哪些文件当作大文件，指定方式比如有：</p>\n<p>指定文件后缀名——<code>git lfs track &quot;*.filetype&quot;</code></p>\n<p>指定某个目录下的所有文件——<code>git lfs track &quot;directory/*&quot;</code></p>\n<p>具体指定某个文件——<code>git lfs track &quot;path/to/file&quot;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir &lt;repo&gt;</span><br><span class=\"line\">&gt; cd &lt;repo&gt;</span><br><span class=\"line\">&gt; git init</span><br><span class=\"line\">&gt; git lfs track &quot;*.filetype&quot;         # 比如 *.zip</span><br><span class=\"line\"> </span><br><span class=\"line\"># 其实 git lfs track 会修改 .gitattributes 文件的内容，可以做一个快速的验证</span><br><span class=\"line\"># &gt; cat .gitattributes</span><br><span class=\"line\"># *.zip filter=lfs diff=lfs merge=lfs -text</span><br><span class=\"line\"> </span><br><span class=\"line\"># 下面假定在 Github 有一个远程仓库供我们使用</span><br><span class=\"line\"># 往仓库里加你先前指定的文件类型的大文件</span><br><span class=\"line\">&gt; git add .                                         </span><br><span class=\"line\">&gt; git commit -m &quot;&quot;</span><br><span class=\"line\">&gt; git branch -M main</span><br><span class=\"line\">&gt; git remote add origin git@github.com:&lt;username&gt;/&lt;remote_repo_name&gt;.git     # 这里替换为自己的用户名和远程仓库名</span><br><span class=\"line\">&gt; git push -u origin main</span><br><span class=\"line\"># 此时命令行会显示</span><br><span class=\"line\"># &gt; uploading LFS objects</span><br><span class=\"line\"># 如果没有采用 git-lfs，则显示如下内容</span><br><span class=\"line\"># &gt; Enumerating objects: 3, done.</span><br><span class=\"line\">#   Counting objects: 100% (3/3), done.</span><br><span class=\"line\">#   Delta compression using up to 8 threads</span><br><span class=\"line\">#   Compressing objects: 100% (2/2), done.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case-2-要在已有的仓库上用-git-lfs-追踪某些文件\"><a href=\"#Case-2-要在已有的仓库上用-git-lfs-追踪某些文件\" class=\"headerlink\" title=\"Case 2. 要在已有的仓库上用 git-lfs 追踪某些文件\"></a>Case 2. 要在已有的仓库上用 git-lfs 追踪某些文件</h3><p>此时只是简单的使用 <code>git lfs track &quot;&quot;</code> 是没用的，因为你之前的 commit 已经生成了快照，你无法追踪历史中的这些大文件。</p>\n<p><code>git-lfs</code> <strong>只会在你开始设置的此刻之后追踪新生成的指定文件</strong></p>\n<p>可以快速做个验证，假设我们还在这个仓库里</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ls &gt; test1.txt</span><br><span class=\"line\">&gt; ls -l &gt; test2.txt</span><br><span class=\"line\">&gt; git add test1.txt test2.txt</span><br><span class=\"line\">&gt; git commit -m &quot;Add txt files&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 假设我们现在要把 txt 文件当成是大文件，我们可能会想这么做</span><br><span class=\"line\">&gt; git lfs track &quot;*.txt&quot;</span><br><span class=\"line\">&gt; git add .gitattributes</span><br><span class=\"line\">&gt; git commit -m &quot;Track *.txt files&quot;</span><br><span class=\"line\">&gt; git lfs ls-files                      # 此时你会发现 git-lfs 并没有追踪 txt 文件</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt; echo &quot;hello&quot; &gt; test3.txt</span><br><span class=\"line\">&gt; git add test3.txt</span><br><span class=\"line\">&gt; git commit -m &quot;Add test3.txt&quot;</span><br><span class=\"line\">&gt; git lfs ls-files                      # 此时你可以在输出中看到 test3.txt</span><br></pre></td></tr></table></figure>\n\n<p>正确的方法是使用 <code>git lfs migrate</code>，这里只列举了简单的用法，更复杂的可以看看手册。比如可以用 <code>--include-ref=</code> 指定分支，多个分支的时候最好一个分支一个分支地迁移，最后是 <code>git push --all -f</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git lfs migrate import --include=&quot;*.txt&quot;  # 在当前分支上执行</span><br><span class=\"line\">&gt; git lfs ls-files                          # 此时可以发现 text1.txt 和 text2.txt 也被追踪到了</span><br><span class=\"line\">&gt; git push --force                          # 让远程仓库也改过来</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case-3-不再跟踪某些文件\"><a href=\"#Case-3-不再跟踪某些文件\" class=\"headerlink\" title=\"Case 3. 不再跟踪某些文件\"></a>Case 3. 不再跟踪某些文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git lfs untrack &quot;*.filetype&quot;</span><br><span class=\"line\">&gt; git rm --cached &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h3><p>查看当前 <code>git-lfs</code> 正在追踪的文件类型——<code>git lfs track</code><br>查看当前 <code>git-lfs</code> 正在追踪哪些文件——<code>git lfs ls-file</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\">https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github</a></p>\n<p><a href=\"http://www.zyiz.net/tech/detail-259950.html\">http://www.zyiz.net/tech/detail-259950.html</a></p>\n","site":{"data":{}},"excerpt":"<p>git-lfs</p>","more":"<h2 id=\"Github-对文件大小的限制\"><a href=\"#Github-对文件大小的限制\" class=\"headerlink\" title=\"Github 对文件大小的限制\"></a>Github 对文件大小的限制</h2><p>如果你在命令行用 <code>git push &gt; 50 MB</code> 的文件，你会收到一个 <code>warning</code>，但是你仍然可以正常 <code>push</code>，但是 <code>&gt; 100 MB</code> 的时候就无法 push 了</p>\n<p>如果你在浏览器要上传文件的话，限制更为严重，不能超过 25 MB</p>\n<p>另外有几点值得注意：</p>\n<p>Github 建议仓库的大小理想情况下不要超过 1 GB，最好不要超过 5 GB<br>Github 从来不建议把仓库当成一种备份工具</p>\n<h2 id=\"为什么需要-gif-lfs\"><a href=\"#为什么需要-gif-lfs\" class=\"headerlink\" title=\"为什么需要 gif-lfs\"></a>为什么需要 gif-lfs</h2><p>前面提到的 Github 对文件大小的限制是一点</p>\n<p>另外因为每次我们在使用 <code>git commit</code> 的时候，其实是给当前的仓库创建了一次快照，本质是全仓库的克隆，如果大文件太多是很不好的，你的 Git 仓库会越来越大</p>\n<h2 id=\"什么情况下不需要用-gif-lfs\"><a href=\"#什么情况下不需要用-gif-lfs\" class=\"headerlink\" title=\"什么情况下不需要用 gif-lfs\"></a>什么情况下不需要用 gif-lfs</h2><p>文件没有超过限制当然就没有必要用了<br>如果是要分发二进制文件（比如 *.exe）等，此时直接用 Github 提供的 release 功能就好了</p>\n<h2 id=\"git-lfs-原理\"><a href=\"#git-lfs-原理\" class=\"headerlink\" title=\"git-lfs 原理\"></a>git-lfs 原理</h2><p>使用 <code>gif-lfs</code> 之后，在仓库中存储的其实是对大文件的引用，可以理解为指针。而真正的大文件托管在 Git Lfs 的服务器上</p>\n<p>Github 给不同用户的 <code>git-lfs</code> 提供的额度不一样，免费用户和 Pro 用户都是 2 GB</p>\n<h2 id=\"引用文件长什么样子\"><a href=\"#引用文件长什么样子\" class=\"headerlink\" title=\"引用文件长什么样子\"></a>引用文件长什么样子</h2><p>比如官方文档里面提到的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version https://git-lfs.github.com/spec/v1</span><br><span class=\"line\">oid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5</span><br><span class=\"line\">size 84977953</span><br></pre></td></tr></table></figure>\n<p>其中 <code>version</code> 是你正在使用的 <code>git-lfs</code> 的版本，<code>oid</code> 是标志符（id），<code>size</code> 是文件的真实大小</p>\n<h2 id=\"开始使用-git-lfs\"><a href=\"#开始使用-git-lfs\" class=\"headerlink\" title=\"开始使用 git-lfs\"></a>开始使用 git-lfs</h2><h3 id=\"如何安装-git-lfs-Mac-环境下\"><a href=\"#如何安装-git-lfs-Mac-环境下\" class=\"headerlink\" title=\"如何安装 git-lfs (Mac 环境下)\"></a>如何安装 git-lfs (Mac 环境下)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; brew install git-lfs</span><br><span class=\"line\">&gt; git lfa install                 # 如果输出为 Git LFS initialized. 就是正常安装好了</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case-1-从-0-开始配置使用-git-lfs\"><a href=\"#Case-1-从-0-开始配置使用-git-lfs\" class=\"headerlink\" title=\"Case 1. 从 0 开始配置使用 git-lfs\"></a>Case 1. 从 0 开始配置使用 git-lfs</h3><p>我们要指定 <code>git-lfs</code> 会把哪些文件当作大文件，指定方式比如有：</p>\n<p>指定文件后缀名——<code>git lfs track &quot;*.filetype&quot;</code></p>\n<p>指定某个目录下的所有文件——<code>git lfs track &quot;directory/*&quot;</code></p>\n<p>具体指定某个文件——<code>git lfs track &quot;path/to/file&quot;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir &lt;repo&gt;</span><br><span class=\"line\">&gt; cd &lt;repo&gt;</span><br><span class=\"line\">&gt; git init</span><br><span class=\"line\">&gt; git lfs track &quot;*.filetype&quot;         # 比如 *.zip</span><br><span class=\"line\"> </span><br><span class=\"line\"># 其实 git lfs track 会修改 .gitattributes 文件的内容，可以做一个快速的验证</span><br><span class=\"line\"># &gt; cat .gitattributes</span><br><span class=\"line\"># *.zip filter=lfs diff=lfs merge=lfs -text</span><br><span class=\"line\"> </span><br><span class=\"line\"># 下面假定在 Github 有一个远程仓库供我们使用</span><br><span class=\"line\"># 往仓库里加你先前指定的文件类型的大文件</span><br><span class=\"line\">&gt; git add .                                         </span><br><span class=\"line\">&gt; git commit -m &quot;&quot;</span><br><span class=\"line\">&gt; git branch -M main</span><br><span class=\"line\">&gt; git remote add origin git@github.com:&lt;username&gt;/&lt;remote_repo_name&gt;.git     # 这里替换为自己的用户名和远程仓库名</span><br><span class=\"line\">&gt; git push -u origin main</span><br><span class=\"line\"># 此时命令行会显示</span><br><span class=\"line\"># &gt; uploading LFS objects</span><br><span class=\"line\"># 如果没有采用 git-lfs，则显示如下内容</span><br><span class=\"line\"># &gt; Enumerating objects: 3, done.</span><br><span class=\"line\">#   Counting objects: 100% (3/3), done.</span><br><span class=\"line\">#   Delta compression using up to 8 threads</span><br><span class=\"line\">#   Compressing objects: 100% (2/2), done.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case-2-要在已有的仓库上用-git-lfs-追踪某些文件\"><a href=\"#Case-2-要在已有的仓库上用-git-lfs-追踪某些文件\" class=\"headerlink\" title=\"Case 2. 要在已有的仓库上用 git-lfs 追踪某些文件\"></a>Case 2. 要在已有的仓库上用 git-lfs 追踪某些文件</h3><p>此时只是简单的使用 <code>git lfs track &quot;&quot;</code> 是没用的，因为你之前的 commit 已经生成了快照，你无法追踪历史中的这些大文件。</p>\n<p><code>git-lfs</code> <strong>只会在你开始设置的此刻之后追踪新生成的指定文件</strong></p>\n<p>可以快速做个验证，假设我们还在这个仓库里</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ls &gt; test1.txt</span><br><span class=\"line\">&gt; ls -l &gt; test2.txt</span><br><span class=\"line\">&gt; git add test1.txt test2.txt</span><br><span class=\"line\">&gt; git commit -m &quot;Add txt files&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 假设我们现在要把 txt 文件当成是大文件，我们可能会想这么做</span><br><span class=\"line\">&gt; git lfs track &quot;*.txt&quot;</span><br><span class=\"line\">&gt; git add .gitattributes</span><br><span class=\"line\">&gt; git commit -m &quot;Track *.txt files&quot;</span><br><span class=\"line\">&gt; git lfs ls-files                      # 此时你会发现 git-lfs 并没有追踪 txt 文件</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt; echo &quot;hello&quot; &gt; test3.txt</span><br><span class=\"line\">&gt; git add test3.txt</span><br><span class=\"line\">&gt; git commit -m &quot;Add test3.txt&quot;</span><br><span class=\"line\">&gt; git lfs ls-files                      # 此时你可以在输出中看到 test3.txt</span><br></pre></td></tr></table></figure>\n\n<p>正确的方法是使用 <code>git lfs migrate</code>，这里只列举了简单的用法，更复杂的可以看看手册。比如可以用 <code>--include-ref=</code> 指定分支，多个分支的时候最好一个分支一个分支地迁移，最后是 <code>git push --all -f</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git lfs migrate import --include=&quot;*.txt&quot;  # 在当前分支上执行</span><br><span class=\"line\">&gt; git lfs ls-files                          # 此时可以发现 text1.txt 和 text2.txt 也被追踪到了</span><br><span class=\"line\">&gt; git push --force                          # 让远程仓库也改过来</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Case-3-不再跟踪某些文件\"><a href=\"#Case-3-不再跟踪某些文件\" class=\"headerlink\" title=\"Case 3. 不再跟踪某些文件\"></a>Case 3. 不再跟踪某些文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git lfs untrack &quot;*.filetype&quot;</span><br><span class=\"line\">&gt; git rm --cached &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h3><p>查看当前 <code>git-lfs</code> 正在追踪的文件类型——<code>git lfs track</code><br>查看当前 <code>git-lfs</code> 正在追踪哪些文件——<code>git lfs ls-file</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\">https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github</a></p>\n<p><a href=\"http://www.zyiz.net/tech/detail-259950.html\">http://www.zyiz.net/tech/detail-259950.html</a></p>"},{"title":"git底层原理","date":"2022-06-29T16:00:00.000Z","_content":"\ngit底层原理\n\n<!--more-->\n\n## Git的底层原理:\n### Blob 对象\ngit在本质上就是一个键值对(key-value)的数据库. key是根据内容计算出来的hash值. value则是你需要存储的数据. 你可以使用``git hash-object``来确认一段数据的key.\n在此之前, 请重新建一个新的git仓库\n\n```bash\ncd /tmp\nmkdir test-git2\ncd test-git2\ngit init\n```\n```bash\necho 'test content' | git hash-object -w --stdin\n# d670460b4b4aece5915caf5c68d12f560a9fe3e4\n```\n你这时候会发现你的``.git/objects``目录下面多了一个文件\n\n```bash\nls -l .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4\n# -r--r--r-- 1 cy cy 32 Feb 11 13:19 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4\n```\n在这个文件中, 存储的就是一些元信息和test content这个文件内容. 这个文件具体的内容, 可以查看[对象存储](https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1#_%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8)\n存储完了之后, 你也可以用``git cat-file``命令读取它\n```bash\ngit cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4\n# test content\n```\n你现在应该已经能初步理解git是如何存储信息的了. 任意数据你都可以存到git里. 它是最原始的信息, 我们把这种对象称之为``blob object``\n\n### Tree 对象\n敏锐的同学应该已经发现了, 那文件名存在哪里? 答案是git会单独用另外一种object来存储\n```commandline\ngit update-index --add --cacheinfo 100644 d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt\n```\n\n此时你使用运行``git status``会发现Index区域变了\n\n```bash\ngit status\n# HEAD detached from f8f34a1 \n# Changes to be committed: \n#   (use \"git restore --staged <file>...\" to unstage) \n#     new file:   test.txt \n#  \n# Changes not staged for commit: \n#   (use \"git add/rm <file>...\" to update what will be committed) \n#   (use \"git restore <file>...\" to discard changes in working directory) \n#     deleted:    test.txt \n# \n```\n\n``git add``实际上就是``git hash-object``和``git update-index``的组合. ``实际上是把d670460b4b4aece5915caf5c68d12f560a9fe3e4`` 这个object复制到了Index区域\n\n接下来就可以使用``git write-tree``命令.将Index区域的内容写入到一个``Tree Object``中.\n\n```bash\ngit write-tree\n#  80865964295ae2f11d27383e5f9c0b58a8ef21da\ngit cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da\n# 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt\n```\n\n### Commit 对象\n\n有了树对象, 我们就可以创建一个提交对象了\n\n```bash\necho 'first commit' | git commit-tree 80865964295ae2f11d27383e5f9c0b58a8ef21da\ne137f356afa88b2b8984c4105326d74826a8c5c1\n```\n\n```bash\ngit log e137f356afa88b2b8984c4105326d74826a8c5c1\n\n# commit e137f356afa88b2b8984c4105326d74826a8c5c1 \n# Author: Cheng Yang <chengyang@xiaomi.com> \n# Date:   Fri Feb 11 19:39:09 2022 +0800 \n \n#     first commit \n```\n\n至此, 我们在不使用``git add``和``git commit``的情况下, 创建了一个提交\n\n### 反过来看看``Commit 对象``\n\ngit里, 万物皆对象.凡是有hash的东西一定是一个对象. 那么我们来从后往前看看, 一个提交里到底有什么?\n\n```bash\ngit cat-file -p e137f356afa88b2b8984c4105326d74826a8c5c1\n# tree 80865964295ae2f11d27383e5f9c0b58a8ef21da \n# author Cheng Yang <chengyang@xiaomi.com> 1644579549 +0800 \n# committer Cheng Yang <chengyang@xiaomi.com> 1644579549 +0800 \n \n# first commit \n```\n\n你会发现, ``Commit Object``也不过是一个普通object, 只不过内容是存储了提交者, 作者, 时间戳, 以及这个提交所包含的``Tree Object``. 一如你运行``git log``所看到的内容\n\n那么我们再次运行``cat-file``查看这个``Tree Object``\n\n```bash\ngit cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da \n# 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt\n```\n\n很显然, 和刚才一样, 这个``Tree Object``的意思是包含``test.txt``这个文件, 文件内容存储在`d670460b4b4aece5915caf5c68d12f560a9fe3e4` 这个对象中\n那么再继续看看这个对象\n\n```bash\ngit cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 \n# test content \n```\n\n所以, 这个`Commit Object`包含了一个`Tree Object`, 而这个`Tree Object`包含了一个叫`test.txt`, 而`test.txt`文件里的内容是`test content`.\n这里你会注意到, 我们的硬盘中甚至从头到尾都没有出现过一个叫`test.txt`的文件\n\n## 传输协议\n\n### Fetch:\n\n理解git的传输协议, 我们可以使用`GIT_TRACE_PACKET`宏, 让git能自动打印出所有发送的网络包\n```bash\ncd /tmp\nmkdir fetch-test\ncd fetch-test\n\nGIT_TRACE_PACKET=1 git -c protocol.version=1 clone /tmp/test-git1\n```\n\n这个地方设置`protocol.version=1`的原因是因为git默认使用v2协议还是2020年的事, 相当数量的服务器并未支持v2协议, 而且v2协议协商过程会稍微复杂一些, 所以我们使用比较常见的v1先来解释git如何远程传输数据\n\n```bash\nCloning into 'test-git1'... \n20:09:07.319608 pkt-line.c:80           packet:  upload-pack> version 1 \n20:09:07.319670 pkt-line.c:80           packet:        clone< version 1 \n20:09:07.319761 pkt-line.c:80           packet:  upload-pack> 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:09:07.319874 pkt-line.c:80           packet:  upload-pack> 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master \n20:09:07.319886 pkt-line.c:80           packet:  upload-pack> 0000 \n20:09:07.319908 pkt-line.c:80           packet:        clone< 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:09:07.319925 pkt-line.c:80           packet:        clone< 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master \n20:09:07.319929 pkt-line.c:80           packet:        clone< 0000 \ndone. \n20:09:07.321498 pkt-line.c:80           packet:        clone> 0000 \n20:09:07.321532 pkt-line.c:80           packet:  upload-pack< 0000\n```\n\n`<`表示收到, `>`表示发送. `upload-pack>`的意思就是`upload-pack`发送了数据. 而`upload-pack`是服务端上的进程, 其实意思也就是服务端发送了数据.\n在协商协议版本后, 远程服务器发送的第一项数据是一些元数据和能力, 主要是告诉客户端, 服务端支持哪些功能. 在此处我们不深入此处. 而第二项是最重要的\n`4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master`\n这个实际上是在告诉客户端, 服务端所拥有的所有`refs`.在此处我们的服务器只有`master`这么一个分支, 它指向`4cf4037e6bb2016fe30d1af96788ef6f8499d516` 这个`Commit Object`. 那么后面的传输信息也很好理解了. 就是客户端在告诉服务器, 我需要的是`refs/heads/master`这个`ref`上的所有内容.\n`clone`的过程比较简单, 那么增量`fetch`呢? 我们不妨给`test-git1`添加一个change\n\n```bash\ncd /tmp/test-git1\necho 3 > 1.txt\ngit commit -a -s -m \"3rd change\"\n```\n\n此时我们再执行fetch\n\n```bash\ncd /tmp/fetch-test/test-git1\nGIT_TRACE_PACKET=1 git -c protocol.version=1 fetch\n```\n\n```bash\n20:13:55.779809 pkt-line.c:80           packet:  upload-pack> version 1 \n20:13:55.779937 pkt-line.c:80           packet:        fetch< version 1 \n20:13:55.780221 pkt-line.c:80           packet:  upload-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:13:55.780500 pkt-line.c:80           packet:  upload-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master \n20:13:55.780531 pkt-line.c:80           packet:  upload-pack> 0000 \n20:13:55.780549 pkt-line.c:80           packet:        fetch< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:13:55.780596 pkt-line.c:80           packet:        fetch< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master \n20:13:55.780616 pkt-line.c:80           packet:        fetch< 0000 \n20:13:55.781535 pkt-line.c:80           packet:        fetch> want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 \n20:13:55.781553 pkt-line.c:80           packet:        fetch> 0000 \n20:13:55.781617 pkt-line.c:80           packet:        fetch> have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 \n20:13:55.781612 pkt-line.c:80           packet:  upload-pack< want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 \n20:13:55.781628 pkt-line.c:80           packet:        fetch> have 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.781635 pkt-line.c:80           packet:        fetch> done \n20:13:55.781800 pkt-line.c:80           packet:  upload-pack< 0000 \n20:13:55.781819 pkt-line.c:80           packet:  upload-pack< have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 \n20:13:55.781944 pkt-line.c:80           packet:  upload-pack> ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common \n20:13:55.781971 pkt-line.c:80           packet:  upload-pack< have 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.782004 pkt-line.c:80           packet:        fetch< ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common \n20:13:55.782061 pkt-line.c:80           packet:  upload-pack> ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common \n20:13:55.782094 pkt-line.c:80           packet:  upload-pack< done \n20:13:55.782109 pkt-line.c:80           packet:  upload-pack> ACK 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.782122 pkt-line.c:80           packet:        fetch< ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common \n20:13:55.782151 pkt-line.c:80           packet:        fetch< ACK 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.784146 pkt-line.c:80           packet:     sideband< \\2Enumerating objects: 5, done. \nremote: Enumerating objects: 5, done. \n20:13:55.784171 pkt-line.c:80           packet:     sideband< \\2Counting objects:  20% (1/5)\\15 \n20:13:55.784180 pkt-line.c:80           packet:     sideband< \\2Counting objects:  40% (2/5)\\15 \n20:13:55.784193 pkt-line.c:80           packet:     sideband< \\2Counting objects:  60% (3/5)\\15 \n20:13:55.784200 pkt-line.c:80           packet:     sideband< \\2Counting objects:  80% (4/5)\\15 \n20:13:55.784208 pkt-line.c:80           packet:     sideband< \\2Counting objects: 100% (5/5)\\15Counting objects: 100% (5/5), done. \nremote: Counting objects: 100% (5/5), done. \n20:13:55.784401 pkt-line.c:80           packet:     sideband< \\2Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 \n20:13:55.784421 pkt-line.c:80           packet:     sideband< PACK ... \n20:13:55.784526 pkt-line.c:80           packet:  upload-pack> 0000 \n20:13:55.784575 pkt-line.c:80           packet:     sideband< 0000 \nUnpacking objects: 100% (3/3), 360 bytes | 360.00 KiB/s, done. \nFrom /tmp/test-git1 \n   4cf4037..3fb2316  master     -> origin/master \n```\n\n最开始, 仍旧是服务器发送了他拥有的`refs`\n`upload-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master`\n此时, 客户端收到了之后, 就和自己的`refs/heads/master`做对比. 它告诉了服务器, 我需要哪个commit, 已经有了哪个commit\n\n```bash\n20:13:55.781535 pkt-line.c:80           packet:        fetch> want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed  \n20:13:55.781553 pkt-line.c:80           packet:        fetch> 0000 \n20:13:55.781617 pkt-line.c:80           packet:        fetch> have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 \n20:13:55.781628 pkt-line.c:80           packet:        fetch> have 889cc4292ce266e4607fd12aecb482cb89b1430d\n```\n\n这时候, git服务器的最优做法, 是指发送客户端没有的东西, 而不是发送整个的`refs/heads/master`\n接下来的`Enumerating Objects`和`Couting Objects`都是在整理\"服务端有, 客户端没有的东西\". 并且发送回来.\n\n### Push:\npush的过程其实相对来说就是fetch的逆向操作\n\n```bash\ncd /tmp/fetch-test/test-git1\ngit checkout origin/master\necho 4 > 1.txt\ngit commit -a -s -m \"4th change\"\n\nGIT_TRACE_PACKET=1 git -c protocol.version=1 push origin  HEAD:master\n```\n\n这条命令的意思是, 把本地`HEAD`指向的内容, push到远程`refs/heads/master`上.这里可以注意下, 如果你想, 你甚至可以把HEAD替换为其他任意hash值\n输出会有一些报错, 只是因为`test-git1`不是`bare`仓库. 这不影响我们分析\n\n```bash\n20:30:46.011723 pkt-line.c:80           packet: receive-pack> version 1 \n20:30:46.011807 pkt-line.c:80           packet:         push< version 1 \n20:30:46.011846 pkt-line.c:80           packet: receive-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 \n20:30:46.011865 pkt-line.c:80           packet: receive-pack> 0000 \n20:30:46.011867 pkt-line.c:80           packet:         push< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 \n20:30:46.011878 pkt-line.c:80           packet:         push< 0000 \n20:30:46.012115 pkt-line.c:80           packet:         push> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 \n20:30:46.012125 pkt-line.c:80           packet:         push> 0000 \n20:30:46.012145 pkt-line.c:80           packet: receive-pack< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 \n20:30:46.012163 pkt-line.c:80           packet: receive-pack< 0000 \nEnumerating objects: 5, done. \nCounting objects: 100% (5/5), done. \nWriting objects: 100% (3/3), 380 bytes | 380.00 KiB/s, done. \nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\n```\n\n当push收到了服务端`refs/heads/master`的内容之后\n\n```bash\npush< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1\n```\n\n然后对比自己所拥有的commit. 决定发送内容\n\n```bash\npush> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1\n```\n\n这个packet的意思是, 客户端会发送\n`3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90`和`37607550824f6769a97caa25d06a0335970abdb5`之间的内容.\n接下来和fetch如出一辙, 客户端开始计算这两笔commit之前所需要传送的object, 打包之后发送给服务器\n\n## 引用:\n\n- [ProGit](https://git-scm.com/book/zh/v2): Git开源社区官方维护的书籍\n- [Git Protocol v2](https://git-scm.com/docs/protocol-v2): git传输协议的官方文档","source":"_posts/2022-6-30git底层原理.md","raw":"---\ntitle: git底层原理\ndate: 2022-6-30\ntags: [git]\n---\n\ngit底层原理\n\n<!--more-->\n\n## Git的底层原理:\n### Blob 对象\ngit在本质上就是一个键值对(key-value)的数据库. key是根据内容计算出来的hash值. value则是你需要存储的数据. 你可以使用``git hash-object``来确认一段数据的key.\n在此之前, 请重新建一个新的git仓库\n\n```bash\ncd /tmp\nmkdir test-git2\ncd test-git2\ngit init\n```\n```bash\necho 'test content' | git hash-object -w --stdin\n# d670460b4b4aece5915caf5c68d12f560a9fe3e4\n```\n你这时候会发现你的``.git/objects``目录下面多了一个文件\n\n```bash\nls -l .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4\n# -r--r--r-- 1 cy cy 32 Feb 11 13:19 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4\n```\n在这个文件中, 存储的就是一些元信息和test content这个文件内容. 这个文件具体的内容, 可以查看[对象存储](https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1#_%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8)\n存储完了之后, 你也可以用``git cat-file``命令读取它\n```bash\ngit cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4\n# test content\n```\n你现在应该已经能初步理解git是如何存储信息的了. 任意数据你都可以存到git里. 它是最原始的信息, 我们把这种对象称之为``blob object``\n\n### Tree 对象\n敏锐的同学应该已经发现了, 那文件名存在哪里? 答案是git会单独用另外一种object来存储\n```commandline\ngit update-index --add --cacheinfo 100644 d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt\n```\n\n此时你使用运行``git status``会发现Index区域变了\n\n```bash\ngit status\n# HEAD detached from f8f34a1 \n# Changes to be committed: \n#   (use \"git restore --staged <file>...\" to unstage) \n#     new file:   test.txt \n#  \n# Changes not staged for commit: \n#   (use \"git add/rm <file>...\" to update what will be committed) \n#   (use \"git restore <file>...\" to discard changes in working directory) \n#     deleted:    test.txt \n# \n```\n\n``git add``实际上就是``git hash-object``和``git update-index``的组合. ``实际上是把d670460b4b4aece5915caf5c68d12f560a9fe3e4`` 这个object复制到了Index区域\n\n接下来就可以使用``git write-tree``命令.将Index区域的内容写入到一个``Tree Object``中.\n\n```bash\ngit write-tree\n#  80865964295ae2f11d27383e5f9c0b58a8ef21da\ngit cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da\n# 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt\n```\n\n### Commit 对象\n\n有了树对象, 我们就可以创建一个提交对象了\n\n```bash\necho 'first commit' | git commit-tree 80865964295ae2f11d27383e5f9c0b58a8ef21da\ne137f356afa88b2b8984c4105326d74826a8c5c1\n```\n\n```bash\ngit log e137f356afa88b2b8984c4105326d74826a8c5c1\n\n# commit e137f356afa88b2b8984c4105326d74826a8c5c1 \n# Author: Cheng Yang <chengyang@xiaomi.com> \n# Date:   Fri Feb 11 19:39:09 2022 +0800 \n \n#     first commit \n```\n\n至此, 我们在不使用``git add``和``git commit``的情况下, 创建了一个提交\n\n### 反过来看看``Commit 对象``\n\ngit里, 万物皆对象.凡是有hash的东西一定是一个对象. 那么我们来从后往前看看, 一个提交里到底有什么?\n\n```bash\ngit cat-file -p e137f356afa88b2b8984c4105326d74826a8c5c1\n# tree 80865964295ae2f11d27383e5f9c0b58a8ef21da \n# author Cheng Yang <chengyang@xiaomi.com> 1644579549 +0800 \n# committer Cheng Yang <chengyang@xiaomi.com> 1644579549 +0800 \n \n# first commit \n```\n\n你会发现, ``Commit Object``也不过是一个普通object, 只不过内容是存储了提交者, 作者, 时间戳, 以及这个提交所包含的``Tree Object``. 一如你运行``git log``所看到的内容\n\n那么我们再次运行``cat-file``查看这个``Tree Object``\n\n```bash\ngit cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da \n# 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt\n```\n\n很显然, 和刚才一样, 这个``Tree Object``的意思是包含``test.txt``这个文件, 文件内容存储在`d670460b4b4aece5915caf5c68d12f560a9fe3e4` 这个对象中\n那么再继续看看这个对象\n\n```bash\ngit cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 \n# test content \n```\n\n所以, 这个`Commit Object`包含了一个`Tree Object`, 而这个`Tree Object`包含了一个叫`test.txt`, 而`test.txt`文件里的内容是`test content`.\n这里你会注意到, 我们的硬盘中甚至从头到尾都没有出现过一个叫`test.txt`的文件\n\n## 传输协议\n\n### Fetch:\n\n理解git的传输协议, 我们可以使用`GIT_TRACE_PACKET`宏, 让git能自动打印出所有发送的网络包\n```bash\ncd /tmp\nmkdir fetch-test\ncd fetch-test\n\nGIT_TRACE_PACKET=1 git -c protocol.version=1 clone /tmp/test-git1\n```\n\n这个地方设置`protocol.version=1`的原因是因为git默认使用v2协议还是2020年的事, 相当数量的服务器并未支持v2协议, 而且v2协议协商过程会稍微复杂一些, 所以我们使用比较常见的v1先来解释git如何远程传输数据\n\n```bash\nCloning into 'test-git1'... \n20:09:07.319608 pkt-line.c:80           packet:  upload-pack> version 1 \n20:09:07.319670 pkt-line.c:80           packet:        clone< version 1 \n20:09:07.319761 pkt-line.c:80           packet:  upload-pack> 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:09:07.319874 pkt-line.c:80           packet:  upload-pack> 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master \n20:09:07.319886 pkt-line.c:80           packet:  upload-pack> 0000 \n20:09:07.319908 pkt-line.c:80           packet:        clone< 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:09:07.319925 pkt-line.c:80           packet:        clone< 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master \n20:09:07.319929 pkt-line.c:80           packet:        clone< 0000 \ndone. \n20:09:07.321498 pkt-line.c:80           packet:        clone> 0000 \n20:09:07.321532 pkt-line.c:80           packet:  upload-pack< 0000\n```\n\n`<`表示收到, `>`表示发送. `upload-pack>`的意思就是`upload-pack`发送了数据. 而`upload-pack`是服务端上的进程, 其实意思也就是服务端发送了数据.\n在协商协议版本后, 远程服务器发送的第一项数据是一些元数据和能力, 主要是告诉客户端, 服务端支持哪些功能. 在此处我们不深入此处. 而第二项是最重要的\n`4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master`\n这个实际上是在告诉客户端, 服务端所拥有的所有`refs`.在此处我们的服务器只有`master`这么一个分支, 它指向`4cf4037e6bb2016fe30d1af96788ef6f8499d516` 这个`Commit Object`. 那么后面的传输信息也很好理解了. 就是客户端在告诉服务器, 我需要的是`refs/heads/master`这个`ref`上的所有内容.\n`clone`的过程比较简单, 那么增量`fetch`呢? 我们不妨给`test-git1`添加一个change\n\n```bash\ncd /tmp/test-git1\necho 3 > 1.txt\ngit commit -a -s -m \"3rd change\"\n```\n\n此时我们再执行fetch\n\n```bash\ncd /tmp/fetch-test/test-git1\nGIT_TRACE_PACKET=1 git -c protocol.version=1 fetch\n```\n\n```bash\n20:13:55.779809 pkt-line.c:80           packet:  upload-pack> version 1 \n20:13:55.779937 pkt-line.c:80           packet:        fetch< version 1 \n20:13:55.780221 pkt-line.c:80           packet:  upload-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:13:55.780500 pkt-line.c:80           packet:  upload-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master \n20:13:55.780531 pkt-line.c:80           packet:  upload-pack> 0000 \n20:13:55.780549 pkt-line.c:80           packet:        fetch< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 \n20:13:55.780596 pkt-line.c:80           packet:        fetch< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master \n20:13:55.780616 pkt-line.c:80           packet:        fetch< 0000 \n20:13:55.781535 pkt-line.c:80           packet:        fetch> want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 \n20:13:55.781553 pkt-line.c:80           packet:        fetch> 0000 \n20:13:55.781617 pkt-line.c:80           packet:        fetch> have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 \n20:13:55.781612 pkt-line.c:80           packet:  upload-pack< want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 \n20:13:55.781628 pkt-line.c:80           packet:        fetch> have 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.781635 pkt-line.c:80           packet:        fetch> done \n20:13:55.781800 pkt-line.c:80           packet:  upload-pack< 0000 \n20:13:55.781819 pkt-line.c:80           packet:  upload-pack< have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 \n20:13:55.781944 pkt-line.c:80           packet:  upload-pack> ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common \n20:13:55.781971 pkt-line.c:80           packet:  upload-pack< have 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.782004 pkt-line.c:80           packet:        fetch< ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common \n20:13:55.782061 pkt-line.c:80           packet:  upload-pack> ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common \n20:13:55.782094 pkt-line.c:80           packet:  upload-pack< done \n20:13:55.782109 pkt-line.c:80           packet:  upload-pack> ACK 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.782122 pkt-line.c:80           packet:        fetch< ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common \n20:13:55.782151 pkt-line.c:80           packet:        fetch< ACK 889cc4292ce266e4607fd12aecb482cb89b1430d \n20:13:55.784146 pkt-line.c:80           packet:     sideband< \\2Enumerating objects: 5, done. \nremote: Enumerating objects: 5, done. \n20:13:55.784171 pkt-line.c:80           packet:     sideband< \\2Counting objects:  20% (1/5)\\15 \n20:13:55.784180 pkt-line.c:80           packet:     sideband< \\2Counting objects:  40% (2/5)\\15 \n20:13:55.784193 pkt-line.c:80           packet:     sideband< \\2Counting objects:  60% (3/5)\\15 \n20:13:55.784200 pkt-line.c:80           packet:     sideband< \\2Counting objects:  80% (4/5)\\15 \n20:13:55.784208 pkt-line.c:80           packet:     sideband< \\2Counting objects: 100% (5/5)\\15Counting objects: 100% (5/5), done. \nremote: Counting objects: 100% (5/5), done. \n20:13:55.784401 pkt-line.c:80           packet:     sideband< \\2Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 \n20:13:55.784421 pkt-line.c:80           packet:     sideband< PACK ... \n20:13:55.784526 pkt-line.c:80           packet:  upload-pack> 0000 \n20:13:55.784575 pkt-line.c:80           packet:     sideband< 0000 \nUnpacking objects: 100% (3/3), 360 bytes | 360.00 KiB/s, done. \nFrom /tmp/test-git1 \n   4cf4037..3fb2316  master     -> origin/master \n```\n\n最开始, 仍旧是服务器发送了他拥有的`refs`\n`upload-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master`\n此时, 客户端收到了之后, 就和自己的`refs/heads/master`做对比. 它告诉了服务器, 我需要哪个commit, 已经有了哪个commit\n\n```bash\n20:13:55.781535 pkt-line.c:80           packet:        fetch> want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed  \n20:13:55.781553 pkt-line.c:80           packet:        fetch> 0000 \n20:13:55.781617 pkt-line.c:80           packet:        fetch> have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 \n20:13:55.781628 pkt-line.c:80           packet:        fetch> have 889cc4292ce266e4607fd12aecb482cb89b1430d\n```\n\n这时候, git服务器的最优做法, 是指发送客户端没有的东西, 而不是发送整个的`refs/heads/master`\n接下来的`Enumerating Objects`和`Couting Objects`都是在整理\"服务端有, 客户端没有的东西\". 并且发送回来.\n\n### Push:\npush的过程其实相对来说就是fetch的逆向操作\n\n```bash\ncd /tmp/fetch-test/test-git1\ngit checkout origin/master\necho 4 > 1.txt\ngit commit -a -s -m \"4th change\"\n\nGIT_TRACE_PACKET=1 git -c protocol.version=1 push origin  HEAD:master\n```\n\n这条命令的意思是, 把本地`HEAD`指向的内容, push到远程`refs/heads/master`上.这里可以注意下, 如果你想, 你甚至可以把HEAD替换为其他任意hash值\n输出会有一些报错, 只是因为`test-git1`不是`bare`仓库. 这不影响我们分析\n\n```bash\n20:30:46.011723 pkt-line.c:80           packet: receive-pack> version 1 \n20:30:46.011807 pkt-line.c:80           packet:         push< version 1 \n20:30:46.011846 pkt-line.c:80           packet: receive-pack> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 \n20:30:46.011865 pkt-line.c:80           packet: receive-pack> 0000 \n20:30:46.011867 pkt-line.c:80           packet:         push< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 \n20:30:46.011878 pkt-line.c:80           packet:         push< 0000 \n20:30:46.012115 pkt-line.c:80           packet:         push> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 \n20:30:46.012125 pkt-line.c:80           packet:         push> 0000 \n20:30:46.012145 pkt-line.c:80           packet: receive-pack< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 \n20:30:46.012163 pkt-line.c:80           packet: receive-pack< 0000 \nEnumerating objects: 5, done. \nCounting objects: 100% (5/5), done. \nWriting objects: 100% (3/3), 380 bytes | 380.00 KiB/s, done. \nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\n```\n\n当push收到了服务端`refs/heads/master`的内容之后\n\n```bash\npush< 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1\n```\n\n然后对比自己所拥有的commit. 决定发送内容\n\n```bash\npush> 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1\n```\n\n这个packet的意思是, 客户端会发送\n`3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90`和`37607550824f6769a97caa25d06a0335970abdb5`之间的内容.\n接下来和fetch如出一辙, 客户端开始计算这两笔commit之前所需要传送的object, 打包之后发送给服务器\n\n## 引用:\n\n- [ProGit](https://git-scm.com/book/zh/v2): Git开源社区官方维护的书籍\n- [Git Protocol v2](https://git-scm.com/docs/protocol-v2): git传输协议的官方文档","slug":"2022-6-30git底层原理","published":1,"updated":"2022-06-30T15:22:09.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnjc0009a4vvborsgwuj","content":"<p>git底层原理</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Git的底层原理\"><a href=\"#Git的底层原理\" class=\"headerlink\" title=\"Git的底层原理:\"></a>Git的底层原理:</h2><h3 id=\"Blob-对象\"><a href=\"#Blob-对象\" class=\"headerlink\" title=\"Blob 对象\"></a>Blob 对象</h3><p>git在本质上就是一个键值对(key-value)的数据库. key是根据内容计算出来的hash值. value则是你需要存储的数据. 你可以使用<code>git hash-object</code>来确认一段数据的key.<br>在此之前, 请重新建一个新的git仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> test-git2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> test-git2</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;test content&#x27;</span> | git hash-object -w --stdin</span><br><span class=\"line\"><span class=\"comment\"># d670460b4b4aece5915caf5c68d12f560a9fe3e4</span></span><br></pre></td></tr></table></figure>\n<p>你这时候会发现你的<code>.git/objects</code>目录下面多了一个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -l .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"><span class=\"comment\"># -r--r--r-- 1 cy cy 32 Feb 11 13:19 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span></span><br></pre></td></tr></table></figure>\n<p>在这个文件中, 存储的就是一些元信息和test content这个文件内容. 这个文件具体的内容, 可以查看<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1#_%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8\">对象存储</a><br>存储完了之后, 你也可以用<code>git cat-file</code>命令读取它</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"><span class=\"comment\"># test content</span></span><br></pre></td></tr></table></figure>\n<p>你现在应该已经能初步理解git是如何存储信息的了. 任意数据你都可以存到git里. 它是最原始的信息, 我们把这种对象称之为<code>blob object</code></p>\n<h3 id=\"Tree-对象\"><a href=\"#Tree-对象\" class=\"headerlink\" title=\"Tree 对象\"></a>Tree 对象</h3><p>敏锐的同学应该已经发现了, 那文件名存在哪里? 答案是git会单独用另外一种object来存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --add --cacheinfo 100644 d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>此时你使用运行<code>git status</code>会发现Index区域变了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># HEAD detached from f8f34a1 </span></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed: </span></span><br><span class=\"line\"><span class=\"comment\">#   (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage) </span></span><br><span class=\"line\"><span class=\"comment\">#     new file:   test.txt </span></span><br><span class=\"line\"><span class=\"comment\">#  </span></span><br><span class=\"line\"><span class=\"comment\"># Changes not staged for commit: </span></span><br><span class=\"line\"><span class=\"comment\">#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed) </span></span><br><span class=\"line\"><span class=\"comment\">#   (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory) </span></span><br><span class=\"line\"><span class=\"comment\">#     deleted:    test.txt </span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p><code>git add</code>实际上就是<code>git hash-object</code>和<code>git update-index</code>的组合. <code>实际上是把d670460b4b4aece5915caf5c68d12f560a9fe3e4</code> 这个object复制到了Index区域</p>\n<p>接下来就可以使用<code>git write-tree</code>命令.将Index区域的内容写入到一个<code>Tree Object</code>中.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git write-tree</span><br><span class=\"line\"><span class=\"comment\">#  80865964295ae2f11d27383e5f9c0b58a8ef21da</span></span><br><span class=\"line\">git cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class=\"line\"><span class=\"comment\"># 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Commit-对象\"><a href=\"#Commit-对象\" class=\"headerlink\" title=\"Commit 对象\"></a>Commit 对象</h3><p>有了树对象, 我们就可以创建一个提交对象了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;first commit&#x27;</span> | git commit-tree 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class=\"line\">e137f356afa88b2b8984c4105326d74826a8c5c1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> e137f356afa88b2b8984c4105326d74826a8c5c1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># commit e137f356afa88b2b8984c4105326d74826a8c5c1 </span></span><br><span class=\"line\"><span class=\"comment\"># Author: Cheng Yang &lt;chengyang@xiaomi.com&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># Date:   Fri Feb 11 19:39:09 2022 +0800 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#     first commit </span></span><br></pre></td></tr></table></figure>\n\n<p>至此, 我们在不使用<code>git add</code>和<code>git commit</code>的情况下, 创建了一个提交</p>\n<h3 id=\"反过来看看Commit-对象\"><a href=\"#反过来看看Commit-对象\" class=\"headerlink\" title=\"反过来看看Commit 对象\"></a>反过来看看<code>Commit 对象</code></h3><p>git里, 万物皆对象.凡是有hash的东西一定是一个对象. 那么我们来从后往前看看, 一个提交里到底有什么?</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p e137f356afa88b2b8984c4105326d74826a8c5c1</span><br><span class=\"line\"><span class=\"comment\"># tree 80865964295ae2f11d27383e5f9c0b58a8ef21da </span></span><br><span class=\"line\"><span class=\"comment\"># author Cheng Yang &lt;chengyang@xiaomi.com&gt; 1644579549 +0800 </span></span><br><span class=\"line\"><span class=\"comment\"># committer Cheng Yang &lt;chengyang@xiaomi.com&gt; 1644579549 +0800 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># first commit </span></span><br></pre></td></tr></table></figure>\n\n<p>你会发现, <code>Commit Object</code>也不过是一个普通object, 只不过内容是存储了提交者, 作者, 时间戳, 以及这个提交所包含的<code>Tree Object</code>. 一如你运行<code>git log</code>所看到的内容</p>\n<p>那么我们再次运行<code>cat-file</code>查看这个<code>Tree Object</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da </span><br><span class=\"line\"><span class=\"comment\"># 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>很显然, 和刚才一样, 这个<code>Tree Object</code>的意思是包含<code>test.txt</code>这个文件, 文件内容存储在<code>d670460b4b4aece5915caf5c68d12f560a9fe3e4</code> 这个对象中<br>那么再继续看看这个对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 </span><br><span class=\"line\"><span class=\"comment\"># test content </span></span><br></pre></td></tr></table></figure>\n\n<p>所以, 这个<code>Commit Object</code>包含了一个<code>Tree Object</code>, 而这个<code>Tree Object</code>包含了一个叫<code>test.txt</code>, 而<code>test.txt</code>文件里的内容是<code>test content</code>.<br>这里你会注意到, 我们的硬盘中甚至从头到尾都没有出现过一个叫<code>test.txt</code>的文件</p>\n<h2 id=\"传输协议\"><a href=\"#传输协议\" class=\"headerlink\" title=\"传输协议\"></a>传输协议</h2><h3 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch:\"></a>Fetch:</h3><p>理解git的传输协议, 我们可以使用<code>GIT_TRACE_PACKET</code>宏, 让git能自动打印出所有发送的网络包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> fetch-test</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fetch-test</span><br><span class=\"line\"></span><br><span class=\"line\">GIT_TRACE_PACKET=1 git -c protocol.version=1 <span class=\"built_in\">clone</span> /tmp/test-git1</span><br></pre></td></tr></table></figure>\n\n<p>这个地方设置<code>protocol.version=1</code>的原因是因为git默认使用v2协议还是2020年的事, 相当数量的服务器并未支持v2协议, 而且v2协议协商过程会稍微复杂一些, 所以我们使用比较常见的v1先来解释git如何远程传输数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">&#x27;test-git1&#x27;</span>... </span><br><span class=\"line\">20:09:07.319608 pkt-line.c:80           packet:  upload-pack&gt; version 1 </span><br><span class=\"line\">20:09:07.319670 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; version 1 </span><br><span class=\"line\">20:09:07.319761 pkt-line.c:80           packet:  upload-pack&gt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:09:07.319874 pkt-line.c:80           packet:  upload-pack&gt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master </span><br><span class=\"line\">20:09:07.319886 pkt-line.c:80           packet:  upload-pack&gt; 0000 </span><br><span class=\"line\">20:09:07.319908 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:09:07.319925 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master </span><br><span class=\"line\">20:09:07.319929 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; 0000 </span><br><span class=\"line\"><span class=\"keyword\">done</span>. </span><br><span class=\"line\">20:09:07.321498 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&gt; 0000 </span><br><span class=\"line\">20:09:07.321532 pkt-line.c:80           packet:  upload-pack&lt; 0000</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;</code>表示收到, <code>&gt;</code>表示发送. <code>upload-pack&gt;</code>的意思就是<code>upload-pack</code>发送了数据. 而<code>upload-pack</code>是服务端上的进程, 其实意思也就是服务端发送了数据.<br>在协商协议版本后, 远程服务器发送的第一项数据是一些元数据和能力, 主要是告诉客户端, 服务端支持哪些功能. 在此处我们不深入此处. 而第二项是最重要的<br><code>4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master</code><br>这个实际上是在告诉客户端, 服务端所拥有的所有<code>refs</code>.在此处我们的服务器只有<code>master</code>这么一个分支, 它指向<code>4cf4037e6bb2016fe30d1af96788ef6f8499d516</code> 这个<code>Commit Object</code>. 那么后面的传输信息也很好理解了. 就是客户端在告诉服务器, 我需要的是<code>refs/heads/master</code>这个<code>ref</code>上的所有内容.<br><code>clone</code>的过程比较简单, 那么增量<code>fetch</code>呢? 我们不妨给<code>test-git1</code>添加一个change</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/test-git1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 3 &gt; 1.txt</span><br><span class=\"line\">git commit -a -s -m <span class=\"string\">&quot;3rd change&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时我们再执行fetch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/fetch-test/test-git1</span><br><span class=\"line\">GIT_TRACE_PACKET=1 git -c protocol.version=1 fetch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:13:55.779809 pkt-line.c:80           packet:  upload-pack&gt; version 1 </span><br><span class=\"line\">20:13:55.779937 pkt-line.c:80           packet:        fetch&lt; version 1 </span><br><span class=\"line\">20:13:55.780221 pkt-line.c:80           packet:  upload-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.780500 pkt-line.c:80           packet:  upload-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master </span><br><span class=\"line\">20:13:55.780531 pkt-line.c:80           packet:  upload-pack&gt; 0000 </span><br><span class=\"line\">20:13:55.780549 pkt-line.c:80           packet:        fetch&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.780596 pkt-line.c:80           packet:        fetch&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master </span><br><span class=\"line\">20:13:55.780616 pkt-line.c:80           packet:        fetch&lt; 0000 </span><br><span class=\"line\">20:13:55.781535 pkt-line.c:80           packet:        fetch&gt; want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.781553 pkt-line.c:80           packet:        fetch&gt; 0000 </span><br><span class=\"line\">20:13:55.781617 pkt-line.c:80           packet:        fetch&gt; have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 </span><br><span class=\"line\">20:13:55.781612 pkt-line.c:80           packet:  upload-pack&lt; want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.781628 pkt-line.c:80           packet:        fetch&gt; have 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.781635 pkt-line.c:80           packet:        fetch&gt; <span class=\"keyword\">done</span> </span><br><span class=\"line\">20:13:55.781800 pkt-line.c:80           packet:  upload-pack&lt; 0000 </span><br><span class=\"line\">20:13:55.781819 pkt-line.c:80           packet:  upload-pack&lt; have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 </span><br><span class=\"line\">20:13:55.781944 pkt-line.c:80           packet:  upload-pack&gt; ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common </span><br><span class=\"line\">20:13:55.781971 pkt-line.c:80           packet:  upload-pack&lt; have 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.782004 pkt-line.c:80           packet:        fetch&lt; ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common </span><br><span class=\"line\">20:13:55.782061 pkt-line.c:80           packet:  upload-pack&gt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common </span><br><span class=\"line\">20:13:55.782094 pkt-line.c:80           packet:  upload-pack&lt; <span class=\"keyword\">done</span> </span><br><span class=\"line\">20:13:55.782109 pkt-line.c:80           packet:  upload-pack&gt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.782122 pkt-line.c:80           packet:        fetch&lt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common </span><br><span class=\"line\">20:13:55.782151 pkt-line.c:80           packet:        fetch&lt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.784146 pkt-line.c:80           packet:     sideband&lt; \\2Enumerating objects: 5, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">remote: Enumerating objects: 5, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">20:13:55.784171 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  20% (1/5)\\15 </span><br><span class=\"line\">20:13:55.784180 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  40% (2/5)\\15 </span><br><span class=\"line\">20:13:55.784193 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  60% (3/5)\\15 </span><br><span class=\"line\">20:13:55.784200 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  80% (4/5)\\15 </span><br><span class=\"line\">20:13:55.784208 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects: 100% (5/5)\\15Counting objects: 100% (5/5), <span class=\"keyword\">done</span>. </span><br><span class=\"line\">remote: Counting objects: 100% (5/5), <span class=\"keyword\">done</span>. </span><br><span class=\"line\">20:13:55.784401 pkt-line.c:80           packet:     sideband&lt; \\2Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 </span><br><span class=\"line\">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 </span><br><span class=\"line\">20:13:55.784421 pkt-line.c:80           packet:     sideband&lt; PACK ... </span><br><span class=\"line\">20:13:55.784526 pkt-line.c:80           packet:  upload-pack&gt; 0000 </span><br><span class=\"line\">20:13:55.784575 pkt-line.c:80           packet:     sideband&lt; 0000 </span><br><span class=\"line\">Unpacking objects: 100% (3/3), 360 bytes | 360.00 KiB/s, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">From /tmp/test-git1 </span><br><span class=\"line\">   4cf4037..3fb2316  master     -&gt; origin/master </span><br></pre></td></tr></table></figure>\n\n<p>最开始, 仍旧是服务器发送了他拥有的<code>refs</code><br><code>upload-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master</code><br>此时, 客户端收到了之后, 就和自己的<code>refs/heads/master</code>做对比. 它告诉了服务器, 我需要哪个commit, 已经有了哪个commit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:13:55.781535 pkt-line.c:80           packet:        fetch&gt; want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed  </span><br><span class=\"line\">20:13:55.781553 pkt-line.c:80           packet:        fetch&gt; 0000 </span><br><span class=\"line\">20:13:55.781617 pkt-line.c:80           packet:        fetch&gt; have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 </span><br><span class=\"line\">20:13:55.781628 pkt-line.c:80           packet:        fetch&gt; have 889cc4292ce266e4607fd12aecb482cb89b1430d</span><br></pre></td></tr></table></figure>\n\n<p>这时候, git服务器的最优做法, 是指发送客户端没有的东西, 而不是发送整个的<code>refs/heads/master</code><br>接下来的<code>Enumerating Objects</code>和<code>Couting Objects</code>都是在整理”服务端有, 客户端没有的东西”. 并且发送回来.</p>\n<h3 id=\"Push\"><a href=\"#Push\" class=\"headerlink\" title=\"Push:\"></a>Push:</h3><p>push的过程其实相对来说就是fetch的逆向操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/fetch-test/test-git1</span><br><span class=\"line\">git checkout origin/master</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 4 &gt; 1.txt</span><br><span class=\"line\">git commit -a -s -m <span class=\"string\">&quot;4th change&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">GIT_TRACE_PACKET=1 git -c protocol.version=1 push origin  HEAD:master</span><br></pre></td></tr></table></figure>\n\n<p>这条命令的意思是, 把本地<code>HEAD</code>指向的内容, push到远程<code>refs/heads/master</code>上.这里可以注意下, 如果你想, 你甚至可以把HEAD替换为其他任意hash值<br>输出会有一些报错, 只是因为<code>test-git1</code>不是<code>bare</code>仓库. 这不影响我们分析</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:30:46.011723 pkt-line.c:80           packet: receive-pack&gt; version 1 </span><br><span class=\"line\">20:30:46.011807 pkt-line.c:80           packet:         push&lt; version 1 </span><br><span class=\"line\">20:30:46.011846 pkt-line.c:80           packet: receive-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.011865 pkt-line.c:80           packet: receive-pack&gt; 0000 </span><br><span class=\"line\">20:30:46.011867 pkt-line.c:80           packet:         push&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.011878 pkt-line.c:80           packet:         push&lt; 0000 </span><br><span class=\"line\">20:30:46.012115 pkt-line.c:80           packet:         push&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.012125 pkt-line.c:80           packet:         push&gt; 0000 </span><br><span class=\"line\">20:30:46.012145 pkt-line.c:80           packet: receive-pack&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.012163 pkt-line.c:80           packet: receive-pack&lt; 0000 </span><br><span class=\"line\">Enumerating objects: 5, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">Counting objects: 100% (5/5), <span class=\"keyword\">done</span>. </span><br><span class=\"line\">Writing objects: 100% (3/3), 380 bytes | 380.00 KiB/s, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br></pre></td></tr></table></figure>\n\n<p>当push收到了服务端<code>refs/heads/master</code>的内容之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1</span><br></pre></td></tr></table></figure>\n\n<p>然后对比自己所拥有的commit. 决定发送内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1</span><br></pre></td></tr></table></figure>\n\n<p>这个packet的意思是, 客户端会发送<br><code>3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90</code>和<code>37607550824f6769a97caa25d06a0335970abdb5</code>之间的内容.<br>接下来和fetch如出一辙, 客户端开始计算这两笔commit之前所需要传送的object, 打包之后发送给服务器</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用:\"></a>引用:</h2><ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\">ProGit</a>: Git开源社区官方维护的书籍</li>\n<li><a href=\"https://git-scm.com/docs/protocol-v2\">Git Protocol v2</a>: git传输协议的官方文档</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>git底层原理</p>","more":"<h2 id=\"Git的底层原理\"><a href=\"#Git的底层原理\" class=\"headerlink\" title=\"Git的底层原理:\"></a>Git的底层原理:</h2><h3 id=\"Blob-对象\"><a href=\"#Blob-对象\" class=\"headerlink\" title=\"Blob 对象\"></a>Blob 对象</h3><p>git在本质上就是一个键值对(key-value)的数据库. key是根据内容计算出来的hash值. value则是你需要存储的数据. 你可以使用<code>git hash-object</code>来确认一段数据的key.<br>在此之前, 请重新建一个新的git仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> test-git2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> test-git2</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;test content&#x27;</span> | git hash-object -w --stdin</span><br><span class=\"line\"><span class=\"comment\"># d670460b4b4aece5915caf5c68d12f560a9fe3e4</span></span><br></pre></td></tr></table></figure>\n<p>你这时候会发现你的<code>.git/objects</code>目录下面多了一个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -l .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"><span class=\"comment\"># -r--r--r-- 1 cy cy 32 Feb 11 13:19 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span></span><br></pre></td></tr></table></figure>\n<p>在这个文件中, 存储的就是一些元信息和test content这个文件内容. 这个文件具体的内容, 可以查看<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1#_%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8\">对象存储</a><br>存储完了之后, 你也可以用<code>git cat-file</code>命令读取它</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class=\"line\"><span class=\"comment\"># test content</span></span><br></pre></td></tr></table></figure>\n<p>你现在应该已经能初步理解git是如何存储信息的了. 任意数据你都可以存到git里. 它是最原始的信息, 我们把这种对象称之为<code>blob object</code></p>\n<h3 id=\"Tree-对象\"><a href=\"#Tree-对象\" class=\"headerlink\" title=\"Tree 对象\"></a>Tree 对象</h3><p>敏锐的同学应该已经发现了, 那文件名存在哪里? 答案是git会单独用另外一种object来存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --add --cacheinfo 100644 d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>此时你使用运行<code>git status</code>会发现Index区域变了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># HEAD detached from f8f34a1 </span></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed: </span></span><br><span class=\"line\"><span class=\"comment\">#   (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage) </span></span><br><span class=\"line\"><span class=\"comment\">#     new file:   test.txt </span></span><br><span class=\"line\"><span class=\"comment\">#  </span></span><br><span class=\"line\"><span class=\"comment\"># Changes not staged for commit: </span></span><br><span class=\"line\"><span class=\"comment\">#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed) </span></span><br><span class=\"line\"><span class=\"comment\">#   (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory) </span></span><br><span class=\"line\"><span class=\"comment\">#     deleted:    test.txt </span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p><code>git add</code>实际上就是<code>git hash-object</code>和<code>git update-index</code>的组合. <code>实际上是把d670460b4b4aece5915caf5c68d12f560a9fe3e4</code> 这个object复制到了Index区域</p>\n<p>接下来就可以使用<code>git write-tree</code>命令.将Index区域的内容写入到一个<code>Tree Object</code>中.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git write-tree</span><br><span class=\"line\"><span class=\"comment\">#  80865964295ae2f11d27383e5f9c0b58a8ef21da</span></span><br><span class=\"line\">git cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class=\"line\"><span class=\"comment\"># 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Commit-对象\"><a href=\"#Commit-对象\" class=\"headerlink\" title=\"Commit 对象\"></a>Commit 对象</h3><p>有了树对象, 我们就可以创建一个提交对象了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;first commit&#x27;</span> | git commit-tree 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class=\"line\">e137f356afa88b2b8984c4105326d74826a8c5c1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> e137f356afa88b2b8984c4105326d74826a8c5c1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># commit e137f356afa88b2b8984c4105326d74826a8c5c1 </span></span><br><span class=\"line\"><span class=\"comment\"># Author: Cheng Yang &lt;chengyang@xiaomi.com&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># Date:   Fri Feb 11 19:39:09 2022 +0800 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#     first commit </span></span><br></pre></td></tr></table></figure>\n\n<p>至此, 我们在不使用<code>git add</code>和<code>git commit</code>的情况下, 创建了一个提交</p>\n<h3 id=\"反过来看看Commit-对象\"><a href=\"#反过来看看Commit-对象\" class=\"headerlink\" title=\"反过来看看Commit 对象\"></a>反过来看看<code>Commit 对象</code></h3><p>git里, 万物皆对象.凡是有hash的东西一定是一个对象. 那么我们来从后往前看看, 一个提交里到底有什么?</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p e137f356afa88b2b8984c4105326d74826a8c5c1</span><br><span class=\"line\"><span class=\"comment\"># tree 80865964295ae2f11d27383e5f9c0b58a8ef21da </span></span><br><span class=\"line\"><span class=\"comment\"># author Cheng Yang &lt;chengyang@xiaomi.com&gt; 1644579549 +0800 </span></span><br><span class=\"line\"><span class=\"comment\"># committer Cheng Yang &lt;chengyang@xiaomi.com&gt; 1644579549 +0800 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># first commit </span></span><br></pre></td></tr></table></figure>\n\n<p>你会发现, <code>Commit Object</code>也不过是一个普通object, 只不过内容是存储了提交者, 作者, 时间戳, 以及这个提交所包含的<code>Tree Object</code>. 一如你运行<code>git log</code>所看到的内容</p>\n<p>那么我们再次运行<code>cat-file</code>查看这个<code>Tree Object</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da </span><br><span class=\"line\"><span class=\"comment\"># 100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 test.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>很显然, 和刚才一样, 这个<code>Tree Object</code>的意思是包含<code>test.txt</code>这个文件, 文件内容存储在<code>d670460b4b4aece5915caf5c68d12f560a9fe3e4</code> 这个对象中<br>那么再继续看看这个对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 </span><br><span class=\"line\"><span class=\"comment\"># test content </span></span><br></pre></td></tr></table></figure>\n\n<p>所以, 这个<code>Commit Object</code>包含了一个<code>Tree Object</code>, 而这个<code>Tree Object</code>包含了一个叫<code>test.txt</code>, 而<code>test.txt</code>文件里的内容是<code>test content</code>.<br>这里你会注意到, 我们的硬盘中甚至从头到尾都没有出现过一个叫<code>test.txt</code>的文件</p>\n<h2 id=\"传输协议\"><a href=\"#传输协议\" class=\"headerlink\" title=\"传输协议\"></a>传输协议</h2><h3 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch:\"></a>Fetch:</h3><p>理解git的传输协议, 我们可以使用<code>GIT_TRACE_PACKET</code>宏, 让git能自动打印出所有发送的网络包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> fetch-test</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fetch-test</span><br><span class=\"line\"></span><br><span class=\"line\">GIT_TRACE_PACKET=1 git -c protocol.version=1 <span class=\"built_in\">clone</span> /tmp/test-git1</span><br></pre></td></tr></table></figure>\n\n<p>这个地方设置<code>protocol.version=1</code>的原因是因为git默认使用v2协议还是2020年的事, 相当数量的服务器并未支持v2协议, 而且v2协议协商过程会稍微复杂一些, 所以我们使用比较常见的v1先来解释git如何远程传输数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">&#x27;test-git1&#x27;</span>... </span><br><span class=\"line\">20:09:07.319608 pkt-line.c:80           packet:  upload-pack&gt; version 1 </span><br><span class=\"line\">20:09:07.319670 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; version 1 </span><br><span class=\"line\">20:09:07.319761 pkt-line.c:80           packet:  upload-pack&gt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:09:07.319874 pkt-line.c:80           packet:  upload-pack&gt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master </span><br><span class=\"line\">20:09:07.319886 pkt-line.c:80           packet:  upload-pack&gt; 0000 </span><br><span class=\"line\">20:09:07.319908 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:09:07.319925 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; 4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master </span><br><span class=\"line\">20:09:07.319929 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&lt; 0000 </span><br><span class=\"line\"><span class=\"keyword\">done</span>. </span><br><span class=\"line\">20:09:07.321498 pkt-line.c:80           packet:        <span class=\"built_in\">clone</span>&gt; 0000 </span><br><span class=\"line\">20:09:07.321532 pkt-line.c:80           packet:  upload-pack&lt; 0000</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;</code>表示收到, <code>&gt;</code>表示发送. <code>upload-pack&gt;</code>的意思就是<code>upload-pack</code>发送了数据. 而<code>upload-pack</code>是服务端上的进程, 其实意思也就是服务端发送了数据.<br>在协商协议版本后, 远程服务器发送的第一项数据是一些元数据和能力, 主要是告诉客户端, 服务端支持哪些功能. 在此处我们不深入此处. 而第二项是最重要的<br><code>4cf4037e6bb2016fe30d1af96788ef6f8499d516 refs/heads/master</code><br>这个实际上是在告诉客户端, 服务端所拥有的所有<code>refs</code>.在此处我们的服务器只有<code>master</code>这么一个分支, 它指向<code>4cf4037e6bb2016fe30d1af96788ef6f8499d516</code> 这个<code>Commit Object</code>. 那么后面的传输信息也很好理解了. 就是客户端在告诉服务器, 我需要的是<code>refs/heads/master</code>这个<code>ref</code>上的所有内容.<br><code>clone</code>的过程比较简单, 那么增量<code>fetch</code>呢? 我们不妨给<code>test-git1</code>添加一个change</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/test-git1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 3 &gt; 1.txt</span><br><span class=\"line\">git commit -a -s -m <span class=\"string\">&quot;3rd change&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时我们再执行fetch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/fetch-test/test-git1</span><br><span class=\"line\">GIT_TRACE_PACKET=1 git -c protocol.version=1 fetch</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:13:55.779809 pkt-line.c:80           packet:  upload-pack&gt; version 1 </span><br><span class=\"line\">20:13:55.779937 pkt-line.c:80           packet:        fetch&lt; version 1 </span><br><span class=\"line\">20:13:55.780221 pkt-line.c:80           packet:  upload-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.780500 pkt-line.c:80           packet:  upload-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master </span><br><span class=\"line\">20:13:55.780531 pkt-line.c:80           packet:  upload-pack&gt; 0000 </span><br><span class=\"line\">20:13:55.780549 pkt-line.c:80           packet:        fetch&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed allow-tip-sha1-in-want allow-reachable-sha1-in-want symref=HEAD:refs/heads/master object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.780596 pkt-line.c:80           packet:        fetch&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master </span><br><span class=\"line\">20:13:55.780616 pkt-line.c:80           packet:        fetch&lt; 0000 </span><br><span class=\"line\">20:13:55.781535 pkt-line.c:80           packet:        fetch&gt; want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.781553 pkt-line.c:80           packet:        fetch&gt; 0000 </span><br><span class=\"line\">20:13:55.781617 pkt-line.c:80           packet:        fetch&gt; have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 </span><br><span class=\"line\">20:13:55.781612 pkt-line.c:80           packet:  upload-pack&lt; want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed side-band-64k thin-pack include-tag ofs-delta deepen-since deepen-not agent=git/2.35.1 </span><br><span class=\"line\">20:13:55.781628 pkt-line.c:80           packet:        fetch&gt; have 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.781635 pkt-line.c:80           packet:        fetch&gt; <span class=\"keyword\">done</span> </span><br><span class=\"line\">20:13:55.781800 pkt-line.c:80           packet:  upload-pack&lt; 0000 </span><br><span class=\"line\">20:13:55.781819 pkt-line.c:80           packet:  upload-pack&lt; have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 </span><br><span class=\"line\">20:13:55.781944 pkt-line.c:80           packet:  upload-pack&gt; ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common </span><br><span class=\"line\">20:13:55.781971 pkt-line.c:80           packet:  upload-pack&lt; have 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.782004 pkt-line.c:80           packet:        fetch&lt; ACK 4cf4037e6bb2016fe30d1af96788ef6f8499d516 common </span><br><span class=\"line\">20:13:55.782061 pkt-line.c:80           packet:  upload-pack&gt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common </span><br><span class=\"line\">20:13:55.782094 pkt-line.c:80           packet:  upload-pack&lt; <span class=\"keyword\">done</span> </span><br><span class=\"line\">20:13:55.782109 pkt-line.c:80           packet:  upload-pack&gt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.782122 pkt-line.c:80           packet:        fetch&lt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d common </span><br><span class=\"line\">20:13:55.782151 pkt-line.c:80           packet:        fetch&lt; ACK 889cc4292ce266e4607fd12aecb482cb89b1430d </span><br><span class=\"line\">20:13:55.784146 pkt-line.c:80           packet:     sideband&lt; \\2Enumerating objects: 5, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">remote: Enumerating objects: 5, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">20:13:55.784171 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  20% (1/5)\\15 </span><br><span class=\"line\">20:13:55.784180 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  40% (2/5)\\15 </span><br><span class=\"line\">20:13:55.784193 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  60% (3/5)\\15 </span><br><span class=\"line\">20:13:55.784200 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects:  80% (4/5)\\15 </span><br><span class=\"line\">20:13:55.784208 pkt-line.c:80           packet:     sideband&lt; \\2Counting objects: 100% (5/5)\\15Counting objects: 100% (5/5), <span class=\"keyword\">done</span>. </span><br><span class=\"line\">remote: Counting objects: 100% (5/5), <span class=\"keyword\">done</span>. </span><br><span class=\"line\">20:13:55.784401 pkt-line.c:80           packet:     sideband&lt; \\2Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 </span><br><span class=\"line\">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 </span><br><span class=\"line\">20:13:55.784421 pkt-line.c:80           packet:     sideband&lt; PACK ... </span><br><span class=\"line\">20:13:55.784526 pkt-line.c:80           packet:  upload-pack&gt; 0000 </span><br><span class=\"line\">20:13:55.784575 pkt-line.c:80           packet:     sideband&lt; 0000 </span><br><span class=\"line\">Unpacking objects: 100% (3/3), 360 bytes | 360.00 KiB/s, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">From /tmp/test-git1 </span><br><span class=\"line\">   4cf4037..3fb2316  master     -&gt; origin/master </span><br></pre></td></tr></table></figure>\n\n<p>最开始, 仍旧是服务器发送了他拥有的<code>refs</code><br><code>upload-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master</code><br>此时, 客户端收到了之后, 就和自己的<code>refs/heads/master</code>做对比. 它告诉了服务器, 我需要哪个commit, 已经有了哪个commit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:13:55.781535 pkt-line.c:80           packet:        fetch&gt; want 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 multi_ack_detailed  </span><br><span class=\"line\">20:13:55.781553 pkt-line.c:80           packet:        fetch&gt; 0000 </span><br><span class=\"line\">20:13:55.781617 pkt-line.c:80           packet:        fetch&gt; have 4cf4037e6bb2016fe30d1af96788ef6f8499d516 </span><br><span class=\"line\">20:13:55.781628 pkt-line.c:80           packet:        fetch&gt; have 889cc4292ce266e4607fd12aecb482cb89b1430d</span><br></pre></td></tr></table></figure>\n\n<p>这时候, git服务器的最优做法, 是指发送客户端没有的东西, 而不是发送整个的<code>refs/heads/master</code><br>接下来的<code>Enumerating Objects</code>和<code>Couting Objects</code>都是在整理”服务端有, 客户端没有的东西”. 并且发送回来.</p>\n<h3 id=\"Push\"><a href=\"#Push\" class=\"headerlink\" title=\"Push:\"></a>Push:</h3><p>push的过程其实相对来说就是fetch的逆向操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/fetch-test/test-git1</span><br><span class=\"line\">git checkout origin/master</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 4 &gt; 1.txt</span><br><span class=\"line\">git commit -a -s -m <span class=\"string\">&quot;4th change&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">GIT_TRACE_PACKET=1 git -c protocol.version=1 push origin  HEAD:master</span><br></pre></td></tr></table></figure>\n\n<p>这条命令的意思是, 把本地<code>HEAD</code>指向的内容, push到远程<code>refs/heads/master</code>上.这里可以注意下, 如果你想, 你甚至可以把HEAD替换为其他任意hash值<br>输出会有一些报错, 只是因为<code>test-git1</code>不是<code>bare</code>仓库. 这不影响我们分析</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:30:46.011723 pkt-line.c:80           packet: receive-pack&gt; version 1 </span><br><span class=\"line\">20:30:46.011807 pkt-line.c:80           packet:         push&lt; version 1 </span><br><span class=\"line\">20:30:46.011846 pkt-line.c:80           packet: receive-pack&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.011865 pkt-line.c:80           packet: receive-pack&gt; 0000 </span><br><span class=\"line\">20:30:46.011867 pkt-line.c:80           packet:         push&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.011878 pkt-line.c:80           packet:         push&lt; 0000 </span><br><span class=\"line\">20:30:46.012115 pkt-line.c:80           packet:         push&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.012125 pkt-line.c:80           packet:         push&gt; 0000 </span><br><span class=\"line\">20:30:46.012145 pkt-line.c:80           packet: receive-pack&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1 </span><br><span class=\"line\">20:30:46.012163 pkt-line.c:80           packet: receive-pack&lt; 0000 </span><br><span class=\"line\">Enumerating objects: 5, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">Counting objects: 100% (5/5), <span class=\"keyword\">done</span>. </span><br><span class=\"line\">Writing objects: 100% (3/3), 380 bytes | 380.00 KiB/s, <span class=\"keyword\">done</span>. </span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br></pre></td></tr></table></figure>\n\n<p>当push收到了服务端<code>refs/heads/master</code>的内容之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push&lt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 refs/heads/master\\0report-status report-status-v2 delete-refs side-band-64k quiet atomic ofs-delta object-format=sha1 agent=git/2.35.1</span><br></pre></td></tr></table></figure>\n\n<p>然后对比自己所拥有的commit. 决定发送内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push&gt; 3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90 37607550824f6769a97caa25d06a0335970abdb5 refs/heads/master\\0 report-status-v2 side-band-64k object-format=sha1 agent=git/2.35.1</span><br></pre></td></tr></table></figure>\n\n<p>这个packet的意思是, 客户端会发送<br><code>3fb2316cbe6a7594b981c9bf8ef2fd08159a4b90</code>和<code>37607550824f6769a97caa25d06a0335970abdb5</code>之间的内容.<br>接下来和fetch如出一辙, 客户端开始计算这两笔commit之前所需要传送的object, 打包之后发送给服务器</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用:\"></a>引用:</h2><ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\">ProGit</a>: Git开源社区官方维护的书籍</li>\n<li><a href=\"https://git-scm.com/docs/protocol-v2\">Git Protocol v2</a>: git传输协议的官方文档</li>\n</ul>"},{"title":"Linux常见问题","date":"2022-06-27T16:00:00.000Z","_content":"\nLinux常见问题\n\n<!--more-->\n\n## 源处理\n```\nsudo vim /etc/apt/sources.list\nsudo apt update\n\n阿里镜像站：https://mirrors.aliyun.com/ubuntu-releases\n网易镜像站：http://tel.mirrors.163.com/\n中科大：http://mirrors.ustc.edu.cn/ubuntu-releases\n浙大：http://mirrors.zju.edu.cn/ubuntu-releases\n清华镜像站：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases\n清华帮助：https://mirrors.tuna.tsinghua.edu.cn/help\n替换为阿里源：sudo sed -i 's/mirrors.aliyun.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list\n\nubuntu各版本：\n    14：trusty\n    16：xenial\n    18：bionic\n    20：focal\n    22：jammy\n\nubuntu18\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n\nGPG error: The following signatures couldn't be verified because the public key is not available\n    sudo gpg --keyserver keyserver.ubuntu.com --recv 5523BAEEB01FA116\n    sudo gpg --export --armor 5523BAEEB01FA116 | sudo apt-key add -\n    sudo apt-get update\n```\n\n## ssh\n```\nssh -vT -p port user@ip（ssh登录，-v：详细信息，-T：测试，-t：开启伪终端，-tt：强制开启伪终端）\nssh-copy-id -p port user@ip（ssh免密登录）\nssh-keygen -f \"/home/jmm/.ssh/known_hosts\" -R [10.20.33.43]:10025（ssh更新known_hosts）\nssh -vvv（调试）\n\nssh免密登录\n    vim ~/.ssh/authorized_keys\n    chmod 600 ~/.ssh/authorized_keys\n    公钥拷贝到里面\n\n指定秘钥：\n    vim ~/.ssh/config\n    chmod 600 ~/.ssh/config\n        Host man1\n            HostName 192.168.2.18\n            IdentityFile ~/.ssh/id_rsa\n            User root\n            Port 22\n\n使ssh生效：\n    eval \"$(ssh-agent -s)\"\n    ssh-add\n    ssh-agent bash\n\nTheir offer:diffie-hellman-group1-sha1问题：\n    vim ~/.ssh/config\n    Host *\n        StrictHostKeyChecking no\n        KexAlgorithms +diffie-hellman-group1-sha1\n\n启用ssh-rsa：\n    vim ~/.ssh/config\n    Host *\n        HostKeyAlgorithms +ssh-rsa\n        PubkeyAcceptedKeyTypes +ssh-rsa\n\n修改22端口：\n    sudo vim /etc/ssh/sshd_config\n        修改Port 22为65534以下即可\n    sudo /etc/init.d/ssh restart #重启ssh\n\n允许远程登录：\n    sudo vim /etc/ssh/sshd_config\n        PermitRootLogin yes\n    sudo service ssh restart\n```\n\n## crontab定时任务\n```\ncrontab -e：添加任务\ncrontab -l：查看任务列表\n\n0 2 * * * /bin/bash backup.sh：每天 02:00 执行任务\n0 5,17 * * * /bin/bash /scripts/script.sh：每天 5:00和17:00执行任务\n*/60 * * * * /bin/bash /scripts/script.sh：每隔一个小时执行一次\n0 */2 * * * /bin/bash /scripts/script.sh：每隔两个小时执行一次\n0 17 * * sun /bin/bash /scripts/script.sh：每周日 17:00 执行任务\n```\n\n## 开机启动\n```\n1.修改启动文件（ubuntu14、ubuntu16支持）\n    /etc/rc.local\n2.配置启动脚本\n    sudo vim /etc/init.d/automount\n        #!/bin/sh\n\n        ### BEGIN INIT INFO\n        # Provides:          jmm.com\n        # Required-Start:    $local_fs $remote_fs $network $syslog $named\n        # Required-Stop:     $local_fs $remote_fs $network $syslog $named\n        # Default-Start:     2 3 4 5\n        # Default-Stop:      0 1 6\n        # Short-Description: jmm service\n        # Description:       jmm service\n        ### END INIT INFO\n\n        busybox mount -t nfs -o nolock 10.169.0.203:/data/backup /data/mirror\n        exit 0\n\n    sudo chmod +x /etc/init.d/automount\n    sudo update-rc.d automount defaults 99（开启）\n    sudo update-rc.d -f automount remove（移除）\n```\n\n## service 和 systemctl\n```\nservice命令其实是去/etc/init.d目录下，去执行相关程序\n    sudo service redis start\n    sudo /etc/init.d/redis start\nsystemd作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动，systemd对应的进程管理命令是systemctl。\n    兼容service：\n    sudo systemctl redis start（启动服务）\n    systemctl enable redis（开机启动服务）\n```\n\n## 防火墙\n\n```\niptables/firewall/ufw\n    iptables比较老默认开放就行\n    ufw是debian系列的（iptables托管给ufw）\n    firewall是redhat系列的\n\nufw接管防火墙\n    sudo ufw enable（开启，阶段iptables，底层还是iptables）\n    sudo ufw disable（关闭）\n    sudo ufw status（查看防火墙表）\n    sudo ufw status verbose（查看策略）\n    sudo ufw status numbered（查看防火墙表 加行号，删除 sudo ufw delete 1）\n\n    sudo ufw allow 80（允许80，sudo ufw delete allow 80（删除就是在规则前加delete））\n    sudo ufw deny 80（拒绝80）\n\n    sudo ufw allow 80/tcp（允许80，tcp形式）\n    sudo ufw allow 9000:9002（允许一段端口）\n    sudo ufw allow from 192.168.29.36（允许ip）\n    sudo ufw allow from 192.168.1.0/24（允许ip段）\n    sudo ufw allow from 192.168.29.36 to any port 80（允许ip访问80）\n    sudo ufw allow from 192.168.29.36 to any port 80 proto tcp（允许ip以tcp形式访问80）\n\niptables防火墙\n    sudo iptables --line-number -nL（查看列表）\n    sudo iptables -F（清空列表）\n    sudo iptables -D INPUT 3（删除input表第三条规则）\n\n    sudo iptables -P INPUT ACCEPT（允许input表）\n    sudo iptables -P OUTPUT ACCEPT（允许output表）\n    sudo iptables -P INPUT DROP（禁止input表）\n    sudo iptables -P OUTPUT DROP（禁止output表）\n\n    sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT（允许某个端口进）\n    sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT（允许某个端口出）\n    sudo iptables -A INPUT -s 192.168.0.3 -j ACCEPT（允许某个ip进）\n    sudo iptables -A OUTPUT -s 192.168.0.3 -j ACCEPT（允许某个ip出）\n    sudo iptables -A INPUT -s 192.168.0.0/24 -j ACCEPT（允许192.168.0.1 - 192.168.0.254网段访问）\n\n    sudo iptables -A INPUT -p tcp --dport 22 -j DROP（禁止某个端口进）\n    sudo iptables -A OUTPUT -p tcp --sport 22 -j DROP（禁止某个端口出）\n    sudo iptables -A INPUT -s 192.168.0.3 -j DROP（禁止某个ip进）\n    sudo iptables -A OUTPUT -s 192.168.0.3 -j DROP（禁止某个ip出）\n\n    sudo iptables -I INPUT 1 -s 192.168.0.3 -j ACCEPT（允许某个ip进，插入）\n```\n\n## vim编辑器\n```\n编辑文件：vim [file]\n三种模式：命令模式（esc进入）、底线命令模式（:/?进入）、编辑模式（i、a、o、r、I、A、O、R进入）、块模式（ctrl+v进入）\n命令模式（前面加数字可以达到重复的效果）\n    删除行：dd\n    复制行：yy\n    拷贝行：p\n    首行：gg\n    尾行：G\n    删除数字：x（X为向前删除）\n    撤销：u（ctrl+r反撤销）\n    重复上一次命令：.\n    显示当前文件名和位置：ctrl+g\n    合并两行：J\n\n底线命令模式\n    退出：:wq!、:q!、:x!、:qa!\n    跳转到行：:20\n    查找：/xxx （忽略大小写:\\c，n下一个，N上一个）\n    反向查找：?xxx（忽略转义和大小写）\n    替换每行所有：:%s/aaa/bbb/g（替换当前行第一个：:s/aaa/bbb/，用其他分割符：%s#aaa#bbb#g）\n    列出所有匹配项：:g/aaa（忽略大小写:\\c）\n    显示行号：set number（关闭行号：set nonumber，可写在~/.vimrc里面）\n    取消自动换行：set nowrap（换行：set wrap）\n    搜索关键字高亮：set incsearch（关闭高亮：set noincsearch）\n    忽略大小写：set ignorecase（关闭忽略大小写：set noignorecase）\n    取消粘贴缩进：set paste\n    取消鼠标选择：set mouse=（开启鼠标选择：set mouse=a）\n\n其他\n    vim分屏：:vs [file]（左右分屏），ctrl + w w（切换屏幕）\n    vimdiff对比文件：vimdiff file1 file2（dp：应用于另一边，do：获得另一边的修改，zo：展开）\n    meld对比文件：meld file1 file2\n```\n\n## 配置静态ip\n```\nnetwork（ubuntu16及以下）\n    sudo vim /etc/network/interfaces\n        auto enp3s0\n        iface enp3s0 inet static\n        address 192.168.0.200\n        netmask 255.255.255.0\n        gateway 192.168.0.1\n        dns-nameserver 8.8.8.8\n\n    sudo service networking restart\n\nnetplan（ubuntu18及以上）\n    sudo vim /etc/netplan/01-network-manager-all.yaml\n        network:\n          version: 2\n          renderer: NetworkManager\n          ethernets:\n             eno1: # 网卡\n               dhcp4: no # dhcp4关闭\n               addresses: [192.168.202.36/24] # ip和掩码\n               gateway4: 192.168.202.1 # 网关\n               nameservers:\n                 addresses: [8.8.8.8,114.114.114.114] #设置DNS\n\n    sudo netplan apply\n\nnetplan（ubuntu20及以上）\n    sudo vim /etc/netplan/01-network-manager-all.yaml\n        network:\n          version: 2\n          renderer: NetworkManager\n          ethernets:\n             eno1:\n               dhcp4: no\n               addresses: [10.170.0.238/23]\n               routes:\n               - to: default\n                 via: 10.170.0.1\n               nameservers:\n                 addresses: [8.8.8.8,114.114.114.114] #设置DNS\n\n    sudo netplan apply\n```\n\n## dependency problems - leaving unconfigured问题\n```\nsudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/\nsudo mkdir /var/lib/dpkg/info/\nsudo apt-get update\nsudo apt-get -f install\nsudo apt-get upgrade\n```\n\n## profile和bashrc\n```\nprofile：系统全局环境登录的一些配置\nbashrc：用户bash的一些配置\n.env：进入目录时初始化环境\n执⾏顺序为：/etc/profile -> (~/.bash_profile | ~/.bash_login | ~/.profile) -> ~/.bashrc -> /etc/bashrc -> ~/.\n```\n\n## 文本处理三剑客（grep/egrep、sed、awk）\n\n```\n正则支持（三剑客都是以行为单位进行处理）\n    grep：默认不支持扩展正则，加上-E支持扩展正则，如果不加上-E，使用\\{\\}要加上\\进行转义。\n    egrep：支持基础和扩展正则，相当于grep -E。\n    sed：默认不支持扩展正则，机上-r选项支持扩展正则，如果不加上-r，使用\\{\\}要加上\\进行转义。\n    awk：默认支持所有正则。\n\n    shell的正则分为两类：\n        基础正则表达式、扩展正则表达式 {扩展的有+、？、|、（）}\n    区分正则和通配符：\n        1、只要涉及grep/egrep sed awk都是正则。其他的都是统配符\n        2、涉及文件和目录名——统配符；涉及文本内容——正则\n    基础正则\n        ^ ：表示匹配字符串开头\n        . ：匹配一个字符，且该字符必须存在\n        * ：匹配前面一个字符的0个或者多个\n        .* ：可以匹配任意长度的任意内容\n        $ ：匹配字符串结尾\n        [] ：表示匹配括号里的任意一个字符\n        ^[^s] ：^在中括号中有^表示取反，非。匹配不以s开头的字符\n        \\{n,m\\} ：匹配字符n到m次，至少n次，至多m次\n        \\(\\) ：分组\n        \\<\\> ：单词锚定，\\<root\\<，root必须作为一行的单词出现,也可\\broot\\b\n    拓展正则\n        grep -E ：-E支持拓展正则，或者直接使用egrep，拓展正则支持所有的基础正则\n        ? ：最多匹配一个，可以是0个\n        + ：至少匹配一个可以是多个\n        | ：或\n        () ：分组\n\ngrep使用\n    -r：目录递归\n    -n：打印行号\n    -s：不显示错误\n    -i：忽略大小写\n    -o：只打印匹配的内容\n    -v：取反，打印不匹配的行\n    -q：如果有匹配的内容则返回状态值0\n    -c：匹配的内容有多少行\n    -E：扩展正则表达式\n    -P：支持perl的正则语法\n    -A1：after打印匹配的后几行\n    -B1：before打印匹配的后几行\n    -C1：打印匹配的前后几行\n\nsed操作\n    选项\n        -i：直接修改写入到文件内容，而不是输出到终端。如果不使用-i那么只会修改内存中的内容，而不会写入到磁盘。\n        -n：输出模式，取消默认的sed软件输出，常与sed-commands的p连用\n        -e：多点操作，一条命令语句执行多个sed操作。\n        -r：使用扩展正则表达式\n    sed-commands（$表示行末）：\n        i ：insert 插入，在指定的行前添加一行或多行文本\n        a ：append 在指定行后面追加一行或者多行文本\n        s ：search 搜索字符串\n        c ：change 取代指定的行或者多行\n        d ：delete 删除指定的行或者多行\n        p ：print 打印模式空间的内容，通常p和-n选项一起使用\n        ! ：取非，对指定行以外的所有行应用命令\n    例子\n        第一行前添加：sed \"1 i hello world\" xxx.xml\n        第一行后添加：sed \"1 a hello world\" xxx.xml\n        最后一行之后添加：sed \"$ a hello world\" xxx.xml\n        删除第一行：sed \"1 d\" xxx.xml\n        删除1-最后行：sed \"1,$ d\" xxx.xml\n        取代第一行：sed \"1 c hello world\\nname\" xxx.xml\n        取代1-最后行：sed \"1,$ c hello world\\nname\" xxx.xml\n        打印第一行：sed -n \"1 p\" xxx.xml\n        打印1-最后行：sed -n \"1,$ p\" xxx.xml\n        打印除2-5行：sed -n '2,5! p' xxx.xml\n\n        找到某行在前添加：sed \"/path=\\\"build\\/make\\\"/i hello world\" xxx.xml\n        找到某行在后添加：sed \"/path=\\\"build\\/make\\\"/a hello world\" xxx.xml\n        找到某行后删除：sed \"/path=\\\"build\\/make\\\"/d\" xxx.xml\n        找到某行后取代：sed \"/path=\\\"build\\/make\\\"/c hello world\" xxx.xml\n        找到某行后打印：sed -n \"/path=\\\"build\\/make\\\"/p\" xxx.xml\n\n        多点操作：sed -e '1d' -e '5,7d' xxx.xml\n\n        替换文件内容：sed \"s/path=\\\"build\\/make\\\"/path=\\\"hello world\\\"/g\" xxx.xml\n        替换文件内容（基础正则，使用取反来达到懒汉模式）：sed \"s/path=\\\"[^\\\"]*\\\"/path=\\\"hello world\\\"/g\" xxx.xml\n\nawk操作\n    $0，整条记录\n    $1、$2、$3，输出一个指定的字段\n    FS，段分隔符，默认空格\n    RS，行分隔符\n    NR，行号\n    NF，字段数量，$NF，最后一个字段\n    ~，表示正则匹配\n    //，进行内容匹配\n\n    输出所有行：awk '{print $0}' /etc/passwd\n    输出第二行：awk 'NR==2{print $0}' /etc/passwd\n    输出二到五行：awk 'NR>=2&&NR<=5{print $0}' /etc/passwd\n    输出行号：awk '{print NR,$0}' /etc/passwd\n    输出行号：awk '{print NR\" \"$0}' /etc/passwd\n    分隔符：awk -F ':' '{print $1,$2,$3,$4}' /etc/passwd\n    锚定查找并输出：awk '/\\<root\\>/{print NR\"\\t\"$0}' /etc/passwd\n    正则匹配：awk '$0~/root/' /etc/passwd\n    末尾查找字串：awk -F ':' '$NF~/sbin/{print $0}' /etc/passwd\n    多个分隔符：awk -F '[:/]+' '{print $5,$6,$7,$8}' /etc/passwd\n\n    开始前输入：awk -F : 'BEGIN{print \"USERNAME\"} {print $1}' /etc/passwd\n    前后输入：awk -F : 'BEGIN{print \"USERNAME\"} {print $1} END{print \"END OF FILE\"}' /etc/passwd\n    统计次数：awk 'BEGIN{num=0}/nologin/{num++}END{print num}' /etc/passwd\n    遍历：awk -F : '{ken[$NF]++}END{for (i in ken) print ken[i] i}' /etc/passwd\n\n\n    cat access.log | awk '{print $1}' | sort | uniq -c | sort -rn | head -3\n    awk '{ken[$1]++}END{for (i in ken) print ken[i],i}' access.log | sort -rn | head -3\n```","source":"_posts/2022-6-28Linux常见问题.md","raw":"---\ntitle: Linux常见问题\ndate: 2022-6-28\ntags: [linux]\n---\n\nLinux常见问题\n\n<!--more-->\n\n## 源处理\n```\nsudo vim /etc/apt/sources.list\nsudo apt update\n\n阿里镜像站：https://mirrors.aliyun.com/ubuntu-releases\n网易镜像站：http://tel.mirrors.163.com/\n中科大：http://mirrors.ustc.edu.cn/ubuntu-releases\n浙大：http://mirrors.zju.edu.cn/ubuntu-releases\n清华镜像站：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases\n清华帮助：https://mirrors.tuna.tsinghua.edu.cn/help\n替换为阿里源：sudo sed -i 's/mirrors.aliyun.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list\n\nubuntu各版本：\n    14：trusty\n    16：xenial\n    18：bionic\n    20：focal\n    22：jammy\n\nubuntu18\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n\nGPG error: The following signatures couldn't be verified because the public key is not available\n    sudo gpg --keyserver keyserver.ubuntu.com --recv 5523BAEEB01FA116\n    sudo gpg --export --armor 5523BAEEB01FA116 | sudo apt-key add -\n    sudo apt-get update\n```\n\n## ssh\n```\nssh -vT -p port user@ip（ssh登录，-v：详细信息，-T：测试，-t：开启伪终端，-tt：强制开启伪终端）\nssh-copy-id -p port user@ip（ssh免密登录）\nssh-keygen -f \"/home/jmm/.ssh/known_hosts\" -R [10.20.33.43]:10025（ssh更新known_hosts）\nssh -vvv（调试）\n\nssh免密登录\n    vim ~/.ssh/authorized_keys\n    chmod 600 ~/.ssh/authorized_keys\n    公钥拷贝到里面\n\n指定秘钥：\n    vim ~/.ssh/config\n    chmod 600 ~/.ssh/config\n        Host man1\n            HostName 192.168.2.18\n            IdentityFile ~/.ssh/id_rsa\n            User root\n            Port 22\n\n使ssh生效：\n    eval \"$(ssh-agent -s)\"\n    ssh-add\n    ssh-agent bash\n\nTheir offer:diffie-hellman-group1-sha1问题：\n    vim ~/.ssh/config\n    Host *\n        StrictHostKeyChecking no\n        KexAlgorithms +diffie-hellman-group1-sha1\n\n启用ssh-rsa：\n    vim ~/.ssh/config\n    Host *\n        HostKeyAlgorithms +ssh-rsa\n        PubkeyAcceptedKeyTypes +ssh-rsa\n\n修改22端口：\n    sudo vim /etc/ssh/sshd_config\n        修改Port 22为65534以下即可\n    sudo /etc/init.d/ssh restart #重启ssh\n\n允许远程登录：\n    sudo vim /etc/ssh/sshd_config\n        PermitRootLogin yes\n    sudo service ssh restart\n```\n\n## crontab定时任务\n```\ncrontab -e：添加任务\ncrontab -l：查看任务列表\n\n0 2 * * * /bin/bash backup.sh：每天 02:00 执行任务\n0 5,17 * * * /bin/bash /scripts/script.sh：每天 5:00和17:00执行任务\n*/60 * * * * /bin/bash /scripts/script.sh：每隔一个小时执行一次\n0 */2 * * * /bin/bash /scripts/script.sh：每隔两个小时执行一次\n0 17 * * sun /bin/bash /scripts/script.sh：每周日 17:00 执行任务\n```\n\n## 开机启动\n```\n1.修改启动文件（ubuntu14、ubuntu16支持）\n    /etc/rc.local\n2.配置启动脚本\n    sudo vim /etc/init.d/automount\n        #!/bin/sh\n\n        ### BEGIN INIT INFO\n        # Provides:          jmm.com\n        # Required-Start:    $local_fs $remote_fs $network $syslog $named\n        # Required-Stop:     $local_fs $remote_fs $network $syslog $named\n        # Default-Start:     2 3 4 5\n        # Default-Stop:      0 1 6\n        # Short-Description: jmm service\n        # Description:       jmm service\n        ### END INIT INFO\n\n        busybox mount -t nfs -o nolock 10.169.0.203:/data/backup /data/mirror\n        exit 0\n\n    sudo chmod +x /etc/init.d/automount\n    sudo update-rc.d automount defaults 99（开启）\n    sudo update-rc.d -f automount remove（移除）\n```\n\n## service 和 systemctl\n```\nservice命令其实是去/etc/init.d目录下，去执行相关程序\n    sudo service redis start\n    sudo /etc/init.d/redis start\nsystemd作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动，systemd对应的进程管理命令是systemctl。\n    兼容service：\n    sudo systemctl redis start（启动服务）\n    systemctl enable redis（开机启动服务）\n```\n\n## 防火墙\n\n```\niptables/firewall/ufw\n    iptables比较老默认开放就行\n    ufw是debian系列的（iptables托管给ufw）\n    firewall是redhat系列的\n\nufw接管防火墙\n    sudo ufw enable（开启，阶段iptables，底层还是iptables）\n    sudo ufw disable（关闭）\n    sudo ufw status（查看防火墙表）\n    sudo ufw status verbose（查看策略）\n    sudo ufw status numbered（查看防火墙表 加行号，删除 sudo ufw delete 1）\n\n    sudo ufw allow 80（允许80，sudo ufw delete allow 80（删除就是在规则前加delete））\n    sudo ufw deny 80（拒绝80）\n\n    sudo ufw allow 80/tcp（允许80，tcp形式）\n    sudo ufw allow 9000:9002（允许一段端口）\n    sudo ufw allow from 192.168.29.36（允许ip）\n    sudo ufw allow from 192.168.1.0/24（允许ip段）\n    sudo ufw allow from 192.168.29.36 to any port 80（允许ip访问80）\n    sudo ufw allow from 192.168.29.36 to any port 80 proto tcp（允许ip以tcp形式访问80）\n\niptables防火墙\n    sudo iptables --line-number -nL（查看列表）\n    sudo iptables -F（清空列表）\n    sudo iptables -D INPUT 3（删除input表第三条规则）\n\n    sudo iptables -P INPUT ACCEPT（允许input表）\n    sudo iptables -P OUTPUT ACCEPT（允许output表）\n    sudo iptables -P INPUT DROP（禁止input表）\n    sudo iptables -P OUTPUT DROP（禁止output表）\n\n    sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT（允许某个端口进）\n    sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT（允许某个端口出）\n    sudo iptables -A INPUT -s 192.168.0.3 -j ACCEPT（允许某个ip进）\n    sudo iptables -A OUTPUT -s 192.168.0.3 -j ACCEPT（允许某个ip出）\n    sudo iptables -A INPUT -s 192.168.0.0/24 -j ACCEPT（允许192.168.0.1 - 192.168.0.254网段访问）\n\n    sudo iptables -A INPUT -p tcp --dport 22 -j DROP（禁止某个端口进）\n    sudo iptables -A OUTPUT -p tcp --sport 22 -j DROP（禁止某个端口出）\n    sudo iptables -A INPUT -s 192.168.0.3 -j DROP（禁止某个ip进）\n    sudo iptables -A OUTPUT -s 192.168.0.3 -j DROP（禁止某个ip出）\n\n    sudo iptables -I INPUT 1 -s 192.168.0.3 -j ACCEPT（允许某个ip进，插入）\n```\n\n## vim编辑器\n```\n编辑文件：vim [file]\n三种模式：命令模式（esc进入）、底线命令模式（:/?进入）、编辑模式（i、a、o、r、I、A、O、R进入）、块模式（ctrl+v进入）\n命令模式（前面加数字可以达到重复的效果）\n    删除行：dd\n    复制行：yy\n    拷贝行：p\n    首行：gg\n    尾行：G\n    删除数字：x（X为向前删除）\n    撤销：u（ctrl+r反撤销）\n    重复上一次命令：.\n    显示当前文件名和位置：ctrl+g\n    合并两行：J\n\n底线命令模式\n    退出：:wq!、:q!、:x!、:qa!\n    跳转到行：:20\n    查找：/xxx （忽略大小写:\\c，n下一个，N上一个）\n    反向查找：?xxx（忽略转义和大小写）\n    替换每行所有：:%s/aaa/bbb/g（替换当前行第一个：:s/aaa/bbb/，用其他分割符：%s#aaa#bbb#g）\n    列出所有匹配项：:g/aaa（忽略大小写:\\c）\n    显示行号：set number（关闭行号：set nonumber，可写在~/.vimrc里面）\n    取消自动换行：set nowrap（换行：set wrap）\n    搜索关键字高亮：set incsearch（关闭高亮：set noincsearch）\n    忽略大小写：set ignorecase（关闭忽略大小写：set noignorecase）\n    取消粘贴缩进：set paste\n    取消鼠标选择：set mouse=（开启鼠标选择：set mouse=a）\n\n其他\n    vim分屏：:vs [file]（左右分屏），ctrl + w w（切换屏幕）\n    vimdiff对比文件：vimdiff file1 file2（dp：应用于另一边，do：获得另一边的修改，zo：展开）\n    meld对比文件：meld file1 file2\n```\n\n## 配置静态ip\n```\nnetwork（ubuntu16及以下）\n    sudo vim /etc/network/interfaces\n        auto enp3s0\n        iface enp3s0 inet static\n        address 192.168.0.200\n        netmask 255.255.255.0\n        gateway 192.168.0.1\n        dns-nameserver 8.8.8.8\n\n    sudo service networking restart\n\nnetplan（ubuntu18及以上）\n    sudo vim /etc/netplan/01-network-manager-all.yaml\n        network:\n          version: 2\n          renderer: NetworkManager\n          ethernets:\n             eno1: # 网卡\n               dhcp4: no # dhcp4关闭\n               addresses: [192.168.202.36/24] # ip和掩码\n               gateway4: 192.168.202.1 # 网关\n               nameservers:\n                 addresses: [8.8.8.8,114.114.114.114] #设置DNS\n\n    sudo netplan apply\n\nnetplan（ubuntu20及以上）\n    sudo vim /etc/netplan/01-network-manager-all.yaml\n        network:\n          version: 2\n          renderer: NetworkManager\n          ethernets:\n             eno1:\n               dhcp4: no\n               addresses: [10.170.0.238/23]\n               routes:\n               - to: default\n                 via: 10.170.0.1\n               nameservers:\n                 addresses: [8.8.8.8,114.114.114.114] #设置DNS\n\n    sudo netplan apply\n```\n\n## dependency problems - leaving unconfigured问题\n```\nsudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/\nsudo mkdir /var/lib/dpkg/info/\nsudo apt-get update\nsudo apt-get -f install\nsudo apt-get upgrade\n```\n\n## profile和bashrc\n```\nprofile：系统全局环境登录的一些配置\nbashrc：用户bash的一些配置\n.env：进入目录时初始化环境\n执⾏顺序为：/etc/profile -> (~/.bash_profile | ~/.bash_login | ~/.profile) -> ~/.bashrc -> /etc/bashrc -> ~/.\n```\n\n## 文本处理三剑客（grep/egrep、sed、awk）\n\n```\n正则支持（三剑客都是以行为单位进行处理）\n    grep：默认不支持扩展正则，加上-E支持扩展正则，如果不加上-E，使用\\{\\}要加上\\进行转义。\n    egrep：支持基础和扩展正则，相当于grep -E。\n    sed：默认不支持扩展正则，机上-r选项支持扩展正则，如果不加上-r，使用\\{\\}要加上\\进行转义。\n    awk：默认支持所有正则。\n\n    shell的正则分为两类：\n        基础正则表达式、扩展正则表达式 {扩展的有+、？、|、（）}\n    区分正则和通配符：\n        1、只要涉及grep/egrep sed awk都是正则。其他的都是统配符\n        2、涉及文件和目录名——统配符；涉及文本内容——正则\n    基础正则\n        ^ ：表示匹配字符串开头\n        . ：匹配一个字符，且该字符必须存在\n        * ：匹配前面一个字符的0个或者多个\n        .* ：可以匹配任意长度的任意内容\n        $ ：匹配字符串结尾\n        [] ：表示匹配括号里的任意一个字符\n        ^[^s] ：^在中括号中有^表示取反，非。匹配不以s开头的字符\n        \\{n,m\\} ：匹配字符n到m次，至少n次，至多m次\n        \\(\\) ：分组\n        \\<\\> ：单词锚定，\\<root\\<，root必须作为一行的单词出现,也可\\broot\\b\n    拓展正则\n        grep -E ：-E支持拓展正则，或者直接使用egrep，拓展正则支持所有的基础正则\n        ? ：最多匹配一个，可以是0个\n        + ：至少匹配一个可以是多个\n        | ：或\n        () ：分组\n\ngrep使用\n    -r：目录递归\n    -n：打印行号\n    -s：不显示错误\n    -i：忽略大小写\n    -o：只打印匹配的内容\n    -v：取反，打印不匹配的行\n    -q：如果有匹配的内容则返回状态值0\n    -c：匹配的内容有多少行\n    -E：扩展正则表达式\n    -P：支持perl的正则语法\n    -A1：after打印匹配的后几行\n    -B1：before打印匹配的后几行\n    -C1：打印匹配的前后几行\n\nsed操作\n    选项\n        -i：直接修改写入到文件内容，而不是输出到终端。如果不使用-i那么只会修改内存中的内容，而不会写入到磁盘。\n        -n：输出模式，取消默认的sed软件输出，常与sed-commands的p连用\n        -e：多点操作，一条命令语句执行多个sed操作。\n        -r：使用扩展正则表达式\n    sed-commands（$表示行末）：\n        i ：insert 插入，在指定的行前添加一行或多行文本\n        a ：append 在指定行后面追加一行或者多行文本\n        s ：search 搜索字符串\n        c ：change 取代指定的行或者多行\n        d ：delete 删除指定的行或者多行\n        p ：print 打印模式空间的内容，通常p和-n选项一起使用\n        ! ：取非，对指定行以外的所有行应用命令\n    例子\n        第一行前添加：sed \"1 i hello world\" xxx.xml\n        第一行后添加：sed \"1 a hello world\" xxx.xml\n        最后一行之后添加：sed \"$ a hello world\" xxx.xml\n        删除第一行：sed \"1 d\" xxx.xml\n        删除1-最后行：sed \"1,$ d\" xxx.xml\n        取代第一行：sed \"1 c hello world\\nname\" xxx.xml\n        取代1-最后行：sed \"1,$ c hello world\\nname\" xxx.xml\n        打印第一行：sed -n \"1 p\" xxx.xml\n        打印1-最后行：sed -n \"1,$ p\" xxx.xml\n        打印除2-5行：sed -n '2,5! p' xxx.xml\n\n        找到某行在前添加：sed \"/path=\\\"build\\/make\\\"/i hello world\" xxx.xml\n        找到某行在后添加：sed \"/path=\\\"build\\/make\\\"/a hello world\" xxx.xml\n        找到某行后删除：sed \"/path=\\\"build\\/make\\\"/d\" xxx.xml\n        找到某行后取代：sed \"/path=\\\"build\\/make\\\"/c hello world\" xxx.xml\n        找到某行后打印：sed -n \"/path=\\\"build\\/make\\\"/p\" xxx.xml\n\n        多点操作：sed -e '1d' -e '5,7d' xxx.xml\n\n        替换文件内容：sed \"s/path=\\\"build\\/make\\\"/path=\\\"hello world\\\"/g\" xxx.xml\n        替换文件内容（基础正则，使用取反来达到懒汉模式）：sed \"s/path=\\\"[^\\\"]*\\\"/path=\\\"hello world\\\"/g\" xxx.xml\n\nawk操作\n    $0，整条记录\n    $1、$2、$3，输出一个指定的字段\n    FS，段分隔符，默认空格\n    RS，行分隔符\n    NR，行号\n    NF，字段数量，$NF，最后一个字段\n    ~，表示正则匹配\n    //，进行内容匹配\n\n    输出所有行：awk '{print $0}' /etc/passwd\n    输出第二行：awk 'NR==2{print $0}' /etc/passwd\n    输出二到五行：awk 'NR>=2&&NR<=5{print $0}' /etc/passwd\n    输出行号：awk '{print NR,$0}' /etc/passwd\n    输出行号：awk '{print NR\" \"$0}' /etc/passwd\n    分隔符：awk -F ':' '{print $1,$2,$3,$4}' /etc/passwd\n    锚定查找并输出：awk '/\\<root\\>/{print NR\"\\t\"$0}' /etc/passwd\n    正则匹配：awk '$0~/root/' /etc/passwd\n    末尾查找字串：awk -F ':' '$NF~/sbin/{print $0}' /etc/passwd\n    多个分隔符：awk -F '[:/]+' '{print $5,$6,$7,$8}' /etc/passwd\n\n    开始前输入：awk -F : 'BEGIN{print \"USERNAME\"} {print $1}' /etc/passwd\n    前后输入：awk -F : 'BEGIN{print \"USERNAME\"} {print $1} END{print \"END OF FILE\"}' /etc/passwd\n    统计次数：awk 'BEGIN{num=0}/nologin/{num++}END{print num}' /etc/passwd\n    遍历：awk -F : '{ken[$NF]++}END{for (i in ken) print ken[i] i}' /etc/passwd\n\n\n    cat access.log | awk '{print $1}' | sort | uniq -c | sort -rn | head -3\n    awk '{ken[$1]++}END{for (i in ken) print ken[i],i}' access.log | sort -rn | head -3\n```","slug":"2022-6-28Linux常见问题","published":1,"updated":"2022-06-28T15:35:47.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnjd000ba4vv9bl2ejab","content":"<p>Linux常见问题</p>\n<span id=\"more\"></span>\n\n<h2 id=\"源处理\"><a href=\"#源处理\" class=\"headerlink\" title=\"源处理\"></a>源处理</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\">阿里镜像站：https://mirrors.aliyun.com/ubuntu-releases</span><br><span class=\"line\">网易镜像站：http://tel.mirrors.163.com/</span><br><span class=\"line\">中科大：http://mirrors.ustc.edu.cn/ubuntu-releases</span><br><span class=\"line\">浙大：http://mirrors.zju.edu.cn/ubuntu-releases</span><br><span class=\"line\">清华镜像站：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases</span><br><span class=\"line\">清华帮助：https://mirrors.tuna.tsinghua.edu.cn/help</span><br><span class=\"line\">替换为阿里源：sudo sed -i &#x27;s/mirrors.aliyun.com/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu各版本：</span><br><span class=\"line\">    14：trusty</span><br><span class=\"line\">    16：xenial</span><br><span class=\"line\">    18：bionic</span><br><span class=\"line\">    20：focal</span><br><span class=\"line\">    22：jammy</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu18</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">GPG error: The following signatures couldn&#x27;t be verified because the public key is not available</span><br><span class=\"line\">    sudo gpg --keyserver keyserver.ubuntu.com --recv 5523BAEEB01FA116</span><br><span class=\"line\">    sudo gpg --export --armor 5523BAEEB01FA116 | sudo apt-key add -</span><br><span class=\"line\">    sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -vT -p port user@ip（ssh登录，-v：详细信息，-T：测试，-t：开启伪终端，-tt：强制开启伪终端）</span><br><span class=\"line\">ssh-copy-id -p port user@ip（ssh免密登录）</span><br><span class=\"line\">ssh-keygen -f &quot;/home/jmm/.ssh/known_hosts&quot; -R [10.20.33.43]:10025（ssh更新known_hosts）</span><br><span class=\"line\">ssh -vvv（调试）</span><br><span class=\"line\"></span><br><span class=\"line\">ssh免密登录</span><br><span class=\"line\">    vim ~/.ssh/authorized_keys</span><br><span class=\"line\">    chmod 600 ~/.ssh/authorized_keys</span><br><span class=\"line\">    公钥拷贝到里面</span><br><span class=\"line\"></span><br><span class=\"line\">指定秘钥：</span><br><span class=\"line\">    vim ~/.ssh/config</span><br><span class=\"line\">    chmod 600 ~/.ssh/config</span><br><span class=\"line\">        Host man1</span><br><span class=\"line\">            HostName 192.168.2.18</span><br><span class=\"line\">            IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">            User root</span><br><span class=\"line\">            Port 22</span><br><span class=\"line\"></span><br><span class=\"line\">使ssh生效：</span><br><span class=\"line\">    eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">    ssh-add</span><br><span class=\"line\">    ssh-agent bash</span><br><span class=\"line\"></span><br><span class=\"line\">Their offer:diffie-hellman-group1-sha1问题：</span><br><span class=\"line\">    vim ~/.ssh/config</span><br><span class=\"line\">    Host *</span><br><span class=\"line\">        StrictHostKeyChecking no</span><br><span class=\"line\">        KexAlgorithms +diffie-hellman-group1-sha1</span><br><span class=\"line\"></span><br><span class=\"line\">启用ssh-rsa：</span><br><span class=\"line\">    vim ~/.ssh/config</span><br><span class=\"line\">    Host *</span><br><span class=\"line\">        HostKeyAlgorithms +ssh-rsa</span><br><span class=\"line\">        PubkeyAcceptedKeyTypes +ssh-rsa</span><br><span class=\"line\"></span><br><span class=\"line\">修改22端口：</span><br><span class=\"line\">    sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">        修改Port 22为65534以下即可</span><br><span class=\"line\">    sudo /etc/init.d/ssh restart #重启ssh</span><br><span class=\"line\"></span><br><span class=\"line\">允许远程登录：</span><br><span class=\"line\">    sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">        PermitRootLogin yes</span><br><span class=\"line\">    sudo service ssh restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"crontab定时任务\"><a href=\"#crontab定时任务\" class=\"headerlink\" title=\"crontab定时任务\"></a>crontab定时任务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e：添加任务</span><br><span class=\"line\">crontab -l：查看任务列表</span><br><span class=\"line\"></span><br><span class=\"line\">0 2 * * * /bin/bash backup.sh：每天 02:00 执行任务</span><br><span class=\"line\">0 5,17 * * * /bin/bash /scripts/script.sh：每天 5:00和17:00执行任务</span><br><span class=\"line\">*/60 * * * * /bin/bash /scripts/script.sh：每隔一个小时执行一次</span><br><span class=\"line\">0 */2 * * * /bin/bash /scripts/script.sh：每隔两个小时执行一次</span><br><span class=\"line\">0 17 * * sun /bin/bash /scripts/script.sh：每周日 17:00 执行任务</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.修改启动文件（ubuntu14、ubuntu16支持）</span><br><span class=\"line\">    /etc/rc.local</span><br><span class=\"line\">2.配置启动脚本</span><br><span class=\"line\">    sudo vim /etc/init.d/automount</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">        ### BEGIN INIT INFO</span><br><span class=\"line\">        # Provides:          jmm.com</span><br><span class=\"line\">        # Required-Start:    $local_fs $remote_fs $network $syslog $named</span><br><span class=\"line\">        # Required-Stop:     $local_fs $remote_fs $network $syslog $named</span><br><span class=\"line\">        # Default-Start:     2 3 4 5</span><br><span class=\"line\">        # Default-Stop:      0 1 6</span><br><span class=\"line\">        # Short-Description: jmm service</span><br><span class=\"line\">        # Description:       jmm service</span><br><span class=\"line\">        ### END INIT INFO</span><br><span class=\"line\"></span><br><span class=\"line\">        busybox mount -t nfs -o nolock 10.169.0.203:/data/backup /data/mirror</span><br><span class=\"line\">        exit 0</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo chmod +x /etc/init.d/automount</span><br><span class=\"line\">    sudo update-rc.d automount defaults 99（开启）</span><br><span class=\"line\">    sudo update-rc.d -f automount remove（移除）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"service-和-systemctl\"><a href=\"#service-和-systemctl\" class=\"headerlink\" title=\"service 和 systemctl\"></a>service 和 systemctl</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service命令其实是去/etc/init.d目录下，去执行相关程序</span><br><span class=\"line\">    sudo service redis start</span><br><span class=\"line\">    sudo /etc/init.d/redis start</span><br><span class=\"line\">systemd作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动，systemd对应的进程管理命令是systemctl。</span><br><span class=\"line\">    兼容service：</span><br><span class=\"line\">    sudo systemctl redis start（启动服务）</span><br><span class=\"line\">    systemctl enable redis（开机启动服务）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables/firewall/ufw</span><br><span class=\"line\">    iptables比较老默认开放就行</span><br><span class=\"line\">    ufw是debian系列的（iptables托管给ufw）</span><br><span class=\"line\">    firewall是redhat系列的</span><br><span class=\"line\"></span><br><span class=\"line\">ufw接管防火墙</span><br><span class=\"line\">    sudo ufw enable（开启，阶段iptables，底层还是iptables）</span><br><span class=\"line\">    sudo ufw disable（关闭）</span><br><span class=\"line\">    sudo ufw status（查看防火墙表）</span><br><span class=\"line\">    sudo ufw status verbose（查看策略）</span><br><span class=\"line\">    sudo ufw status numbered（查看防火墙表 加行号，删除 sudo ufw delete 1）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo ufw allow 80（允许80，sudo ufw delete allow 80（删除就是在规则前加delete））</span><br><span class=\"line\">    sudo ufw deny 80（拒绝80）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo ufw allow 80/tcp（允许80，tcp形式）</span><br><span class=\"line\">    sudo ufw allow 9000:9002（允许一段端口）</span><br><span class=\"line\">    sudo ufw allow from 192.168.29.36（允许ip）</span><br><span class=\"line\">    sudo ufw allow from 192.168.1.0/24（允许ip段）</span><br><span class=\"line\">    sudo ufw allow from 192.168.29.36 to any port 80（允许ip访问80）</span><br><span class=\"line\">    sudo ufw allow from 192.168.29.36 to any port 80 proto tcp（允许ip以tcp形式访问80）</span><br><span class=\"line\"></span><br><span class=\"line\">iptables防火墙</span><br><span class=\"line\">    sudo iptables --line-number -nL（查看列表）</span><br><span class=\"line\">    sudo iptables -F（清空列表）</span><br><span class=\"line\">    sudo iptables -D INPUT 3（删除input表第三条规则）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -P INPUT ACCEPT（允许input表）</span><br><span class=\"line\">    sudo iptables -P OUTPUT ACCEPT（允许output表）</span><br><span class=\"line\">    sudo iptables -P INPUT DROP（禁止input表）</span><br><span class=\"line\">    sudo iptables -P OUTPUT DROP（禁止output表）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT（允许某个端口进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT（允许某个端口出）</span><br><span class=\"line\">    sudo iptables -A INPUT -s 192.168.0.3 -j ACCEPT（允许某个ip进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -s 192.168.0.3 -j ACCEPT（允许某个ip出）</span><br><span class=\"line\">    sudo iptables -A INPUT -s 192.168.0.0/24 -j ACCEPT（允许192.168.0.1 - 192.168.0.254网段访问）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -A INPUT -p tcp --dport 22 -j DROP（禁止某个端口进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -p tcp --sport 22 -j DROP（禁止某个端口出）</span><br><span class=\"line\">    sudo iptables -A INPUT -s 192.168.0.3 -j DROP（禁止某个ip进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -s 192.168.0.3 -j DROP（禁止某个ip出）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -I INPUT 1 -s 192.168.0.3 -j ACCEPT（允许某个ip进，插入）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vim编辑器\"><a href=\"#vim编辑器\" class=\"headerlink\" title=\"vim编辑器\"></a>vim编辑器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑文件：vim [file]</span><br><span class=\"line\">三种模式：命令模式（esc进入）、底线命令模式（:/?进入）、编辑模式（i、a、o、r、I、A、O、R进入）、块模式（ctrl+v进入）</span><br><span class=\"line\">命令模式（前面加数字可以达到重复的效果）</span><br><span class=\"line\">    删除行：dd</span><br><span class=\"line\">    复制行：yy</span><br><span class=\"line\">    拷贝行：p</span><br><span class=\"line\">    首行：gg</span><br><span class=\"line\">    尾行：G</span><br><span class=\"line\">    删除数字：x（X为向前删除）</span><br><span class=\"line\">    撤销：u（ctrl+r反撤销）</span><br><span class=\"line\">    重复上一次命令：.</span><br><span class=\"line\">    显示当前文件名和位置：ctrl+g</span><br><span class=\"line\">    合并两行：J</span><br><span class=\"line\"></span><br><span class=\"line\">底线命令模式</span><br><span class=\"line\">    退出：:wq!、:q!、:x!、:qa!</span><br><span class=\"line\">    跳转到行：:20</span><br><span class=\"line\">    查找：/xxx （忽略大小写:\\c，n下一个，N上一个）</span><br><span class=\"line\">    反向查找：?xxx（忽略转义和大小写）</span><br><span class=\"line\">    替换每行所有：:%s/aaa/bbb/g（替换当前行第一个：:s/aaa/bbb/，用其他分割符：%s#aaa#bbb#g）</span><br><span class=\"line\">    列出所有匹配项：:g/aaa（忽略大小写:\\c）</span><br><span class=\"line\">    显示行号：set number（关闭行号：set nonumber，可写在~/.vimrc里面）</span><br><span class=\"line\">    取消自动换行：set nowrap（换行：set wrap）</span><br><span class=\"line\">    搜索关键字高亮：set incsearch（关闭高亮：set noincsearch）</span><br><span class=\"line\">    忽略大小写：set ignorecase（关闭忽略大小写：set noignorecase）</span><br><span class=\"line\">    取消粘贴缩进：set paste</span><br><span class=\"line\">    取消鼠标选择：set mouse=（开启鼠标选择：set mouse=a）</span><br><span class=\"line\"></span><br><span class=\"line\">其他</span><br><span class=\"line\">    vim分屏：:vs [file]（左右分屏），ctrl + w w（切换屏幕）</span><br><span class=\"line\">    vimdiff对比文件：vimdiff file1 file2（dp：应用于另一边，do：获得另一边的修改，zo：展开）</span><br><span class=\"line\">    meld对比文件：meld file1 file2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置静态ip\"><a href=\"#配置静态ip\" class=\"headerlink\" title=\"配置静态ip\"></a>配置静态ip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network（ubuntu16及以下）</span><br><span class=\"line\">    sudo vim /etc/network/interfaces</span><br><span class=\"line\">        auto enp3s0</span><br><span class=\"line\">        iface enp3s0 inet static</span><br><span class=\"line\">        address 192.168.0.200</span><br><span class=\"line\">        netmask 255.255.255.0</span><br><span class=\"line\">        gateway 192.168.0.1</span><br><span class=\"line\">        dns-nameserver 8.8.8.8</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo service networking restart</span><br><span class=\"line\"></span><br><span class=\"line\">netplan（ubuntu18及以上）</span><br><span class=\"line\">    sudo vim /etc/netplan/01-network-manager-all.yaml</span><br><span class=\"line\">        network:</span><br><span class=\"line\">          version: 2</span><br><span class=\"line\">          renderer: NetworkManager</span><br><span class=\"line\">          ethernets:</span><br><span class=\"line\">             eno1: # 网卡</span><br><span class=\"line\">               dhcp4: no # dhcp4关闭</span><br><span class=\"line\">               addresses: [192.168.202.36/24] # ip和掩码</span><br><span class=\"line\">               gateway4: 192.168.202.1 # 网关</span><br><span class=\"line\">               nameservers:</span><br><span class=\"line\">                 addresses: [8.8.8.8,114.114.114.114] #设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo netplan apply</span><br><span class=\"line\"></span><br><span class=\"line\">netplan（ubuntu20及以上）</span><br><span class=\"line\">    sudo vim /etc/netplan/01-network-manager-all.yaml</span><br><span class=\"line\">        network:</span><br><span class=\"line\">          version: 2</span><br><span class=\"line\">          renderer: NetworkManager</span><br><span class=\"line\">          ethernets:</span><br><span class=\"line\">             eno1:</span><br><span class=\"line\">               dhcp4: no</span><br><span class=\"line\">               addresses: [10.170.0.238/23]</span><br><span class=\"line\">               routes:</span><br><span class=\"line\">               - to: default</span><br><span class=\"line\">                 via: 10.170.0.1</span><br><span class=\"line\">               nameservers:</span><br><span class=\"line\">                 addresses: [8.8.8.8,114.114.114.114] #设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo netplan apply</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dependency-problems-leaving-unconfigured问题\"><a href=\"#dependency-problems-leaving-unconfigured问题\" class=\"headerlink\" title=\"dependency problems - leaving unconfigured问题\"></a>dependency problems - leaving unconfigured问题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/</span><br><span class=\"line\">sudo mkdir /var/lib/dpkg/info/</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -f install</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"profile和bashrc\"><a href=\"#profile和bashrc\" class=\"headerlink\" title=\"profile和bashrc\"></a>profile和bashrc</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profile：系统全局环境登录的一些配置</span><br><span class=\"line\">bashrc：用户bash的一些配置</span><br><span class=\"line\">.env：进入目录时初始化环境</span><br><span class=\"line\">执⾏顺序为：/etc/profile -&gt; (~/.bash_profile | ~/.bash_login | ~/.profile) -&gt; ~/.bashrc -&gt; /etc/bashrc -&gt; ~/.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本处理三剑客（grep-x2F-egrep、sed、awk）\"><a href=\"#文本处理三剑客（grep-x2F-egrep、sed、awk）\" class=\"headerlink\" title=\"文本处理三剑客（grep&#x2F;egrep、sed、awk）\"></a>文本处理三剑客（grep&#x2F;egrep、sed、awk）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正则支持（三剑客都是以行为单位进行处理）</span><br><span class=\"line\">    grep：默认不支持扩展正则，加上-E支持扩展正则，如果不加上-E，使用\\&#123;\\&#125;要加上\\进行转义。</span><br><span class=\"line\">    egrep：支持基础和扩展正则，相当于grep -E。</span><br><span class=\"line\">    sed：默认不支持扩展正则，机上-r选项支持扩展正则，如果不加上-r，使用\\&#123;\\&#125;要加上\\进行转义。</span><br><span class=\"line\">    awk：默认支持所有正则。</span><br><span class=\"line\"></span><br><span class=\"line\">    shell的正则分为两类：</span><br><span class=\"line\">        基础正则表达式、扩展正则表达式 &#123;扩展的有+、？、|、（）&#125;</span><br><span class=\"line\">    区分正则和通配符：</span><br><span class=\"line\">        1、只要涉及grep/egrep sed awk都是正则。其他的都是统配符</span><br><span class=\"line\">        2、涉及文件和目录名——统配符；涉及文本内容——正则</span><br><span class=\"line\">    基础正则</span><br><span class=\"line\">        ^ ：表示匹配字符串开头</span><br><span class=\"line\">        . ：匹配一个字符，且该字符必须存在</span><br><span class=\"line\">        * ：匹配前面一个字符的0个或者多个</span><br><span class=\"line\">        .* ：可以匹配任意长度的任意内容</span><br><span class=\"line\">        $ ：匹配字符串结尾</span><br><span class=\"line\">        [] ：表示匹配括号里的任意一个字符</span><br><span class=\"line\">        ^[^s] ：^在中括号中有^表示取反，非。匹配不以s开头的字符</span><br><span class=\"line\">        \\&#123;n,m\\&#125; ：匹配字符n到m次，至少n次，至多m次</span><br><span class=\"line\">        \\(\\) ：分组</span><br><span class=\"line\">        \\&lt;\\&gt; ：单词锚定，\\&lt;root\\&lt;，root必须作为一行的单词出现,也可\\broot\\b</span><br><span class=\"line\">    拓展正则</span><br><span class=\"line\">        grep -E ：-E支持拓展正则，或者直接使用egrep，拓展正则支持所有的基础正则</span><br><span class=\"line\">        ? ：最多匹配一个，可以是0个</span><br><span class=\"line\">        + ：至少匹配一个可以是多个</span><br><span class=\"line\">        | ：或</span><br><span class=\"line\">        () ：分组</span><br><span class=\"line\"></span><br><span class=\"line\">grep使用</span><br><span class=\"line\">    -r：目录递归</span><br><span class=\"line\">    -n：打印行号</span><br><span class=\"line\">    -s：不显示错误</span><br><span class=\"line\">    -i：忽略大小写</span><br><span class=\"line\">    -o：只打印匹配的内容</span><br><span class=\"line\">    -v：取反，打印不匹配的行</span><br><span class=\"line\">    -q：如果有匹配的内容则返回状态值0</span><br><span class=\"line\">    -c：匹配的内容有多少行</span><br><span class=\"line\">    -E：扩展正则表达式</span><br><span class=\"line\">    -P：支持perl的正则语法</span><br><span class=\"line\">    -A1：after打印匹配的后几行</span><br><span class=\"line\">    -B1：before打印匹配的后几行</span><br><span class=\"line\">    -C1：打印匹配的前后几行</span><br><span class=\"line\"></span><br><span class=\"line\">sed操作</span><br><span class=\"line\">    选项</span><br><span class=\"line\">        -i：直接修改写入到文件内容，而不是输出到终端。如果不使用-i那么只会修改内存中的内容，而不会写入到磁盘。</span><br><span class=\"line\">        -n：输出模式，取消默认的sed软件输出，常与sed-commands的p连用</span><br><span class=\"line\">        -e：多点操作，一条命令语句执行多个sed操作。</span><br><span class=\"line\">        -r：使用扩展正则表达式</span><br><span class=\"line\">    sed-commands（$表示行末）：</span><br><span class=\"line\">        i ：insert 插入，在指定的行前添加一行或多行文本</span><br><span class=\"line\">        a ：append 在指定行后面追加一行或者多行文本</span><br><span class=\"line\">        s ：search 搜索字符串</span><br><span class=\"line\">        c ：change 取代指定的行或者多行</span><br><span class=\"line\">        d ：delete 删除指定的行或者多行</span><br><span class=\"line\">        p ：print 打印模式空间的内容，通常p和-n选项一起使用</span><br><span class=\"line\">        ! ：取非，对指定行以外的所有行应用命令</span><br><span class=\"line\">    例子</span><br><span class=\"line\">        第一行前添加：sed &quot;1 i hello world&quot; xxx.xml</span><br><span class=\"line\">        第一行后添加：sed &quot;1 a hello world&quot; xxx.xml</span><br><span class=\"line\">        最后一行之后添加：sed &quot;$ a hello world&quot; xxx.xml</span><br><span class=\"line\">        删除第一行：sed &quot;1 d&quot; xxx.xml</span><br><span class=\"line\">        删除1-最后行：sed &quot;1,$ d&quot; xxx.xml</span><br><span class=\"line\">        取代第一行：sed &quot;1 c hello world\\nname&quot; xxx.xml</span><br><span class=\"line\">        取代1-最后行：sed &quot;1,$ c hello world\\nname&quot; xxx.xml</span><br><span class=\"line\">        打印第一行：sed -n &quot;1 p&quot; xxx.xml</span><br><span class=\"line\">        打印1-最后行：sed -n &quot;1,$ p&quot; xxx.xml</span><br><span class=\"line\">        打印除2-5行：sed -n &#x27;2,5! p&#x27; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">        找到某行在前添加：sed &quot;/path=\\&quot;build\\/make\\&quot;/i hello world&quot; xxx.xml</span><br><span class=\"line\">        找到某行在后添加：sed &quot;/path=\\&quot;build\\/make\\&quot;/a hello world&quot; xxx.xml</span><br><span class=\"line\">        找到某行后删除：sed &quot;/path=\\&quot;build\\/make\\&quot;/d&quot; xxx.xml</span><br><span class=\"line\">        找到某行后取代：sed &quot;/path=\\&quot;build\\/make\\&quot;/c hello world&quot; xxx.xml</span><br><span class=\"line\">        找到某行后打印：sed -n &quot;/path=\\&quot;build\\/make\\&quot;/p&quot; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">        多点操作：sed -e &#x27;1d&#x27; -e &#x27;5,7d&#x27; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">        替换文件内容：sed &quot;s/path=\\&quot;build\\/make\\&quot;/path=\\&quot;hello world\\&quot;/g&quot; xxx.xml</span><br><span class=\"line\">        替换文件内容（基础正则，使用取反来达到懒汉模式）：sed &quot;s/path=\\&quot;[^\\&quot;]*\\&quot;/path=\\&quot;hello world\\&quot;/g&quot; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">awk操作</span><br><span class=\"line\">    $0，整条记录</span><br><span class=\"line\">    $1、$2、$3，输出一个指定的字段</span><br><span class=\"line\">    FS，段分隔符，默认空格</span><br><span class=\"line\">    RS，行分隔符</span><br><span class=\"line\">    NR，行号</span><br><span class=\"line\">    NF，字段数量，$NF，最后一个字段</span><br><span class=\"line\">    ~，表示正则匹配</span><br><span class=\"line\">    //，进行内容匹配</span><br><span class=\"line\"></span><br><span class=\"line\">    输出所有行：awk &#x27;&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出第二行：awk &#x27;NR==2&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出二到五行：awk &#x27;NR&gt;=2&amp;&amp;NR&lt;=5&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出行号：awk &#x27;&#123;print NR,$0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出行号：awk &#x27;&#123;print NR&quot; &quot;$0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    分隔符：awk -F &#x27;:&#x27; &#x27;&#123;print $1,$2,$3,$4&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    锚定查找并输出：awk &#x27;/\\&lt;root\\&gt;/&#123;print NR&quot;\\t&quot;$0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    正则匹配：awk &#x27;$0~/root/&#x27; /etc/passwd</span><br><span class=\"line\">    末尾查找字串：awk -F &#x27;:&#x27; &#x27;$NF~/sbin/&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    多个分隔符：awk -F &#x27;[:/]+&#x27; &#x27;&#123;print $5,$6,$7,$8&#125;&#x27; /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\">    开始前输入：awk -F : &#x27;BEGIN&#123;print &quot;USERNAME&quot;&#125; &#123;print $1&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    前后输入：awk -F : &#x27;BEGIN&#123;print &quot;USERNAME&quot;&#125; &#123;print $1&#125; END&#123;print &quot;END OF FILE&quot;&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    统计次数：awk &#x27;BEGIN&#123;num=0&#125;/nologin/&#123;num++&#125;END&#123;print num&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    遍历：awk -F : &#x27;&#123;ken[$NF]++&#125;END&#123;for (i in ken) print ken[i] i&#125;&#x27; /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    cat access.log | awk &#x27;&#123;print $1&#125;&#x27; | sort | uniq -c | sort -rn | head -3</span><br><span class=\"line\">    awk &#x27;&#123;ken[$1]++&#125;END&#123;for (i in ken) print ken[i],i&#125;&#x27; access.log | sort -rn | head -3</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Linux常见问题</p>","more":"<h2 id=\"源处理\"><a href=\"#源处理\" class=\"headerlink\" title=\"源处理\"></a>源处理</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\">阿里镜像站：https://mirrors.aliyun.com/ubuntu-releases</span><br><span class=\"line\">网易镜像站：http://tel.mirrors.163.com/</span><br><span class=\"line\">中科大：http://mirrors.ustc.edu.cn/ubuntu-releases</span><br><span class=\"line\">浙大：http://mirrors.zju.edu.cn/ubuntu-releases</span><br><span class=\"line\">清华镜像站：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases</span><br><span class=\"line\">清华帮助：https://mirrors.tuna.tsinghua.edu.cn/help</span><br><span class=\"line\">替换为阿里源：sudo sed -i &#x27;s/mirrors.aliyun.com/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu各版本：</span><br><span class=\"line\">    14：trusty</span><br><span class=\"line\">    16：xenial</span><br><span class=\"line\">    18：bionic</span><br><span class=\"line\">    20：focal</span><br><span class=\"line\">    22：jammy</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu18</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">GPG error: The following signatures couldn&#x27;t be verified because the public key is not available</span><br><span class=\"line\">    sudo gpg --keyserver keyserver.ubuntu.com --recv 5523BAEEB01FA116</span><br><span class=\"line\">    sudo gpg --export --armor 5523BAEEB01FA116 | sudo apt-key add -</span><br><span class=\"line\">    sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -vT -p port user@ip（ssh登录，-v：详细信息，-T：测试，-t：开启伪终端，-tt：强制开启伪终端）</span><br><span class=\"line\">ssh-copy-id -p port user@ip（ssh免密登录）</span><br><span class=\"line\">ssh-keygen -f &quot;/home/jmm/.ssh/known_hosts&quot; -R [10.20.33.43]:10025（ssh更新known_hosts）</span><br><span class=\"line\">ssh -vvv（调试）</span><br><span class=\"line\"></span><br><span class=\"line\">ssh免密登录</span><br><span class=\"line\">    vim ~/.ssh/authorized_keys</span><br><span class=\"line\">    chmod 600 ~/.ssh/authorized_keys</span><br><span class=\"line\">    公钥拷贝到里面</span><br><span class=\"line\"></span><br><span class=\"line\">指定秘钥：</span><br><span class=\"line\">    vim ~/.ssh/config</span><br><span class=\"line\">    chmod 600 ~/.ssh/config</span><br><span class=\"line\">        Host man1</span><br><span class=\"line\">            HostName 192.168.2.18</span><br><span class=\"line\">            IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">            User root</span><br><span class=\"line\">            Port 22</span><br><span class=\"line\"></span><br><span class=\"line\">使ssh生效：</span><br><span class=\"line\">    eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">    ssh-add</span><br><span class=\"line\">    ssh-agent bash</span><br><span class=\"line\"></span><br><span class=\"line\">Their offer:diffie-hellman-group1-sha1问题：</span><br><span class=\"line\">    vim ~/.ssh/config</span><br><span class=\"line\">    Host *</span><br><span class=\"line\">        StrictHostKeyChecking no</span><br><span class=\"line\">        KexAlgorithms +diffie-hellman-group1-sha1</span><br><span class=\"line\"></span><br><span class=\"line\">启用ssh-rsa：</span><br><span class=\"line\">    vim ~/.ssh/config</span><br><span class=\"line\">    Host *</span><br><span class=\"line\">        HostKeyAlgorithms +ssh-rsa</span><br><span class=\"line\">        PubkeyAcceptedKeyTypes +ssh-rsa</span><br><span class=\"line\"></span><br><span class=\"line\">修改22端口：</span><br><span class=\"line\">    sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">        修改Port 22为65534以下即可</span><br><span class=\"line\">    sudo /etc/init.d/ssh restart #重启ssh</span><br><span class=\"line\"></span><br><span class=\"line\">允许远程登录：</span><br><span class=\"line\">    sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">        PermitRootLogin yes</span><br><span class=\"line\">    sudo service ssh restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"crontab定时任务\"><a href=\"#crontab定时任务\" class=\"headerlink\" title=\"crontab定时任务\"></a>crontab定时任务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e：添加任务</span><br><span class=\"line\">crontab -l：查看任务列表</span><br><span class=\"line\"></span><br><span class=\"line\">0 2 * * * /bin/bash backup.sh：每天 02:00 执行任务</span><br><span class=\"line\">0 5,17 * * * /bin/bash /scripts/script.sh：每天 5:00和17:00执行任务</span><br><span class=\"line\">*/60 * * * * /bin/bash /scripts/script.sh：每隔一个小时执行一次</span><br><span class=\"line\">0 */2 * * * /bin/bash /scripts/script.sh：每隔两个小时执行一次</span><br><span class=\"line\">0 17 * * sun /bin/bash /scripts/script.sh：每周日 17:00 执行任务</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.修改启动文件（ubuntu14、ubuntu16支持）</span><br><span class=\"line\">    /etc/rc.local</span><br><span class=\"line\">2.配置启动脚本</span><br><span class=\"line\">    sudo vim /etc/init.d/automount</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">        ### BEGIN INIT INFO</span><br><span class=\"line\">        # Provides:          jmm.com</span><br><span class=\"line\">        # Required-Start:    $local_fs $remote_fs $network $syslog $named</span><br><span class=\"line\">        # Required-Stop:     $local_fs $remote_fs $network $syslog $named</span><br><span class=\"line\">        # Default-Start:     2 3 4 5</span><br><span class=\"line\">        # Default-Stop:      0 1 6</span><br><span class=\"line\">        # Short-Description: jmm service</span><br><span class=\"line\">        # Description:       jmm service</span><br><span class=\"line\">        ### END INIT INFO</span><br><span class=\"line\"></span><br><span class=\"line\">        busybox mount -t nfs -o nolock 10.169.0.203:/data/backup /data/mirror</span><br><span class=\"line\">        exit 0</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo chmod +x /etc/init.d/automount</span><br><span class=\"line\">    sudo update-rc.d automount defaults 99（开启）</span><br><span class=\"line\">    sudo update-rc.d -f automount remove（移除）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"service-和-systemctl\"><a href=\"#service-和-systemctl\" class=\"headerlink\" title=\"service 和 systemctl\"></a>service 和 systemctl</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service命令其实是去/etc/init.d目录下，去执行相关程序</span><br><span class=\"line\">    sudo service redis start</span><br><span class=\"line\">    sudo /etc/init.d/redis start</span><br><span class=\"line\">systemd作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动，systemd对应的进程管理命令是systemctl。</span><br><span class=\"line\">    兼容service：</span><br><span class=\"line\">    sudo systemctl redis start（启动服务）</span><br><span class=\"line\">    systemctl enable redis（开机启动服务）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables/firewall/ufw</span><br><span class=\"line\">    iptables比较老默认开放就行</span><br><span class=\"line\">    ufw是debian系列的（iptables托管给ufw）</span><br><span class=\"line\">    firewall是redhat系列的</span><br><span class=\"line\"></span><br><span class=\"line\">ufw接管防火墙</span><br><span class=\"line\">    sudo ufw enable（开启，阶段iptables，底层还是iptables）</span><br><span class=\"line\">    sudo ufw disable（关闭）</span><br><span class=\"line\">    sudo ufw status（查看防火墙表）</span><br><span class=\"line\">    sudo ufw status verbose（查看策略）</span><br><span class=\"line\">    sudo ufw status numbered（查看防火墙表 加行号，删除 sudo ufw delete 1）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo ufw allow 80（允许80，sudo ufw delete allow 80（删除就是在规则前加delete））</span><br><span class=\"line\">    sudo ufw deny 80（拒绝80）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo ufw allow 80/tcp（允许80，tcp形式）</span><br><span class=\"line\">    sudo ufw allow 9000:9002（允许一段端口）</span><br><span class=\"line\">    sudo ufw allow from 192.168.29.36（允许ip）</span><br><span class=\"line\">    sudo ufw allow from 192.168.1.0/24（允许ip段）</span><br><span class=\"line\">    sudo ufw allow from 192.168.29.36 to any port 80（允许ip访问80）</span><br><span class=\"line\">    sudo ufw allow from 192.168.29.36 to any port 80 proto tcp（允许ip以tcp形式访问80）</span><br><span class=\"line\"></span><br><span class=\"line\">iptables防火墙</span><br><span class=\"line\">    sudo iptables --line-number -nL（查看列表）</span><br><span class=\"line\">    sudo iptables -F（清空列表）</span><br><span class=\"line\">    sudo iptables -D INPUT 3（删除input表第三条规则）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -P INPUT ACCEPT（允许input表）</span><br><span class=\"line\">    sudo iptables -P OUTPUT ACCEPT（允许output表）</span><br><span class=\"line\">    sudo iptables -P INPUT DROP（禁止input表）</span><br><span class=\"line\">    sudo iptables -P OUTPUT DROP（禁止output表）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT（允许某个端口进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT（允许某个端口出）</span><br><span class=\"line\">    sudo iptables -A INPUT -s 192.168.0.3 -j ACCEPT（允许某个ip进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -s 192.168.0.3 -j ACCEPT（允许某个ip出）</span><br><span class=\"line\">    sudo iptables -A INPUT -s 192.168.0.0/24 -j ACCEPT（允许192.168.0.1 - 192.168.0.254网段访问）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -A INPUT -p tcp --dport 22 -j DROP（禁止某个端口进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -p tcp --sport 22 -j DROP（禁止某个端口出）</span><br><span class=\"line\">    sudo iptables -A INPUT -s 192.168.0.3 -j DROP（禁止某个ip进）</span><br><span class=\"line\">    sudo iptables -A OUTPUT -s 192.168.0.3 -j DROP（禁止某个ip出）</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo iptables -I INPUT 1 -s 192.168.0.3 -j ACCEPT（允许某个ip进，插入）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vim编辑器\"><a href=\"#vim编辑器\" class=\"headerlink\" title=\"vim编辑器\"></a>vim编辑器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑文件：vim [file]</span><br><span class=\"line\">三种模式：命令模式（esc进入）、底线命令模式（:/?进入）、编辑模式（i、a、o、r、I、A、O、R进入）、块模式（ctrl+v进入）</span><br><span class=\"line\">命令模式（前面加数字可以达到重复的效果）</span><br><span class=\"line\">    删除行：dd</span><br><span class=\"line\">    复制行：yy</span><br><span class=\"line\">    拷贝行：p</span><br><span class=\"line\">    首行：gg</span><br><span class=\"line\">    尾行：G</span><br><span class=\"line\">    删除数字：x（X为向前删除）</span><br><span class=\"line\">    撤销：u（ctrl+r反撤销）</span><br><span class=\"line\">    重复上一次命令：.</span><br><span class=\"line\">    显示当前文件名和位置：ctrl+g</span><br><span class=\"line\">    合并两行：J</span><br><span class=\"line\"></span><br><span class=\"line\">底线命令模式</span><br><span class=\"line\">    退出：:wq!、:q!、:x!、:qa!</span><br><span class=\"line\">    跳转到行：:20</span><br><span class=\"line\">    查找：/xxx （忽略大小写:\\c，n下一个，N上一个）</span><br><span class=\"line\">    反向查找：?xxx（忽略转义和大小写）</span><br><span class=\"line\">    替换每行所有：:%s/aaa/bbb/g（替换当前行第一个：:s/aaa/bbb/，用其他分割符：%s#aaa#bbb#g）</span><br><span class=\"line\">    列出所有匹配项：:g/aaa（忽略大小写:\\c）</span><br><span class=\"line\">    显示行号：set number（关闭行号：set nonumber，可写在~/.vimrc里面）</span><br><span class=\"line\">    取消自动换行：set nowrap（换行：set wrap）</span><br><span class=\"line\">    搜索关键字高亮：set incsearch（关闭高亮：set noincsearch）</span><br><span class=\"line\">    忽略大小写：set ignorecase（关闭忽略大小写：set noignorecase）</span><br><span class=\"line\">    取消粘贴缩进：set paste</span><br><span class=\"line\">    取消鼠标选择：set mouse=（开启鼠标选择：set mouse=a）</span><br><span class=\"line\"></span><br><span class=\"line\">其他</span><br><span class=\"line\">    vim分屏：:vs [file]（左右分屏），ctrl + w w（切换屏幕）</span><br><span class=\"line\">    vimdiff对比文件：vimdiff file1 file2（dp：应用于另一边，do：获得另一边的修改，zo：展开）</span><br><span class=\"line\">    meld对比文件：meld file1 file2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置静态ip\"><a href=\"#配置静态ip\" class=\"headerlink\" title=\"配置静态ip\"></a>配置静态ip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network（ubuntu16及以下）</span><br><span class=\"line\">    sudo vim /etc/network/interfaces</span><br><span class=\"line\">        auto enp3s0</span><br><span class=\"line\">        iface enp3s0 inet static</span><br><span class=\"line\">        address 192.168.0.200</span><br><span class=\"line\">        netmask 255.255.255.0</span><br><span class=\"line\">        gateway 192.168.0.1</span><br><span class=\"line\">        dns-nameserver 8.8.8.8</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo service networking restart</span><br><span class=\"line\"></span><br><span class=\"line\">netplan（ubuntu18及以上）</span><br><span class=\"line\">    sudo vim /etc/netplan/01-network-manager-all.yaml</span><br><span class=\"line\">        network:</span><br><span class=\"line\">          version: 2</span><br><span class=\"line\">          renderer: NetworkManager</span><br><span class=\"line\">          ethernets:</span><br><span class=\"line\">             eno1: # 网卡</span><br><span class=\"line\">               dhcp4: no # dhcp4关闭</span><br><span class=\"line\">               addresses: [192.168.202.36/24] # ip和掩码</span><br><span class=\"line\">               gateway4: 192.168.202.1 # 网关</span><br><span class=\"line\">               nameservers:</span><br><span class=\"line\">                 addresses: [8.8.8.8,114.114.114.114] #设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo netplan apply</span><br><span class=\"line\"></span><br><span class=\"line\">netplan（ubuntu20及以上）</span><br><span class=\"line\">    sudo vim /etc/netplan/01-network-manager-all.yaml</span><br><span class=\"line\">        network:</span><br><span class=\"line\">          version: 2</span><br><span class=\"line\">          renderer: NetworkManager</span><br><span class=\"line\">          ethernets:</span><br><span class=\"line\">             eno1:</span><br><span class=\"line\">               dhcp4: no</span><br><span class=\"line\">               addresses: [10.170.0.238/23]</span><br><span class=\"line\">               routes:</span><br><span class=\"line\">               - to: default</span><br><span class=\"line\">                 via: 10.170.0.1</span><br><span class=\"line\">               nameservers:</span><br><span class=\"line\">                 addresses: [8.8.8.8,114.114.114.114] #设置DNS</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo netplan apply</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dependency-problems-leaving-unconfigured问题\"><a href=\"#dependency-problems-leaving-unconfigured问题\" class=\"headerlink\" title=\"dependency problems - leaving unconfigured问题\"></a>dependency problems - leaving unconfigured问题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_old/</span><br><span class=\"line\">sudo mkdir /var/lib/dpkg/info/</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -f install</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"profile和bashrc\"><a href=\"#profile和bashrc\" class=\"headerlink\" title=\"profile和bashrc\"></a>profile和bashrc</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profile：系统全局环境登录的一些配置</span><br><span class=\"line\">bashrc：用户bash的一些配置</span><br><span class=\"line\">.env：进入目录时初始化环境</span><br><span class=\"line\">执⾏顺序为：/etc/profile -&gt; (~/.bash_profile | ~/.bash_login | ~/.profile) -&gt; ~/.bashrc -&gt; /etc/bashrc -&gt; ~/.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本处理三剑客（grep-x2F-egrep、sed、awk）\"><a href=\"#文本处理三剑客（grep-x2F-egrep、sed、awk）\" class=\"headerlink\" title=\"文本处理三剑客（grep&#x2F;egrep、sed、awk）\"></a>文本处理三剑客（grep&#x2F;egrep、sed、awk）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正则支持（三剑客都是以行为单位进行处理）</span><br><span class=\"line\">    grep：默认不支持扩展正则，加上-E支持扩展正则，如果不加上-E，使用\\&#123;\\&#125;要加上\\进行转义。</span><br><span class=\"line\">    egrep：支持基础和扩展正则，相当于grep -E。</span><br><span class=\"line\">    sed：默认不支持扩展正则，机上-r选项支持扩展正则，如果不加上-r，使用\\&#123;\\&#125;要加上\\进行转义。</span><br><span class=\"line\">    awk：默认支持所有正则。</span><br><span class=\"line\"></span><br><span class=\"line\">    shell的正则分为两类：</span><br><span class=\"line\">        基础正则表达式、扩展正则表达式 &#123;扩展的有+、？、|、（）&#125;</span><br><span class=\"line\">    区分正则和通配符：</span><br><span class=\"line\">        1、只要涉及grep/egrep sed awk都是正则。其他的都是统配符</span><br><span class=\"line\">        2、涉及文件和目录名——统配符；涉及文本内容——正则</span><br><span class=\"line\">    基础正则</span><br><span class=\"line\">        ^ ：表示匹配字符串开头</span><br><span class=\"line\">        . ：匹配一个字符，且该字符必须存在</span><br><span class=\"line\">        * ：匹配前面一个字符的0个或者多个</span><br><span class=\"line\">        .* ：可以匹配任意长度的任意内容</span><br><span class=\"line\">        $ ：匹配字符串结尾</span><br><span class=\"line\">        [] ：表示匹配括号里的任意一个字符</span><br><span class=\"line\">        ^[^s] ：^在中括号中有^表示取反，非。匹配不以s开头的字符</span><br><span class=\"line\">        \\&#123;n,m\\&#125; ：匹配字符n到m次，至少n次，至多m次</span><br><span class=\"line\">        \\(\\) ：分组</span><br><span class=\"line\">        \\&lt;\\&gt; ：单词锚定，\\&lt;root\\&lt;，root必须作为一行的单词出现,也可\\broot\\b</span><br><span class=\"line\">    拓展正则</span><br><span class=\"line\">        grep -E ：-E支持拓展正则，或者直接使用egrep，拓展正则支持所有的基础正则</span><br><span class=\"line\">        ? ：最多匹配一个，可以是0个</span><br><span class=\"line\">        + ：至少匹配一个可以是多个</span><br><span class=\"line\">        | ：或</span><br><span class=\"line\">        () ：分组</span><br><span class=\"line\"></span><br><span class=\"line\">grep使用</span><br><span class=\"line\">    -r：目录递归</span><br><span class=\"line\">    -n：打印行号</span><br><span class=\"line\">    -s：不显示错误</span><br><span class=\"line\">    -i：忽略大小写</span><br><span class=\"line\">    -o：只打印匹配的内容</span><br><span class=\"line\">    -v：取反，打印不匹配的行</span><br><span class=\"line\">    -q：如果有匹配的内容则返回状态值0</span><br><span class=\"line\">    -c：匹配的内容有多少行</span><br><span class=\"line\">    -E：扩展正则表达式</span><br><span class=\"line\">    -P：支持perl的正则语法</span><br><span class=\"line\">    -A1：after打印匹配的后几行</span><br><span class=\"line\">    -B1：before打印匹配的后几行</span><br><span class=\"line\">    -C1：打印匹配的前后几行</span><br><span class=\"line\"></span><br><span class=\"line\">sed操作</span><br><span class=\"line\">    选项</span><br><span class=\"line\">        -i：直接修改写入到文件内容，而不是输出到终端。如果不使用-i那么只会修改内存中的内容，而不会写入到磁盘。</span><br><span class=\"line\">        -n：输出模式，取消默认的sed软件输出，常与sed-commands的p连用</span><br><span class=\"line\">        -e：多点操作，一条命令语句执行多个sed操作。</span><br><span class=\"line\">        -r：使用扩展正则表达式</span><br><span class=\"line\">    sed-commands（$表示行末）：</span><br><span class=\"line\">        i ：insert 插入，在指定的行前添加一行或多行文本</span><br><span class=\"line\">        a ：append 在指定行后面追加一行或者多行文本</span><br><span class=\"line\">        s ：search 搜索字符串</span><br><span class=\"line\">        c ：change 取代指定的行或者多行</span><br><span class=\"line\">        d ：delete 删除指定的行或者多行</span><br><span class=\"line\">        p ：print 打印模式空间的内容，通常p和-n选项一起使用</span><br><span class=\"line\">        ! ：取非，对指定行以外的所有行应用命令</span><br><span class=\"line\">    例子</span><br><span class=\"line\">        第一行前添加：sed &quot;1 i hello world&quot; xxx.xml</span><br><span class=\"line\">        第一行后添加：sed &quot;1 a hello world&quot; xxx.xml</span><br><span class=\"line\">        最后一行之后添加：sed &quot;$ a hello world&quot; xxx.xml</span><br><span class=\"line\">        删除第一行：sed &quot;1 d&quot; xxx.xml</span><br><span class=\"line\">        删除1-最后行：sed &quot;1,$ d&quot; xxx.xml</span><br><span class=\"line\">        取代第一行：sed &quot;1 c hello world\\nname&quot; xxx.xml</span><br><span class=\"line\">        取代1-最后行：sed &quot;1,$ c hello world\\nname&quot; xxx.xml</span><br><span class=\"line\">        打印第一行：sed -n &quot;1 p&quot; xxx.xml</span><br><span class=\"line\">        打印1-最后行：sed -n &quot;1,$ p&quot; xxx.xml</span><br><span class=\"line\">        打印除2-5行：sed -n &#x27;2,5! p&#x27; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">        找到某行在前添加：sed &quot;/path=\\&quot;build\\/make\\&quot;/i hello world&quot; xxx.xml</span><br><span class=\"line\">        找到某行在后添加：sed &quot;/path=\\&quot;build\\/make\\&quot;/a hello world&quot; xxx.xml</span><br><span class=\"line\">        找到某行后删除：sed &quot;/path=\\&quot;build\\/make\\&quot;/d&quot; xxx.xml</span><br><span class=\"line\">        找到某行后取代：sed &quot;/path=\\&quot;build\\/make\\&quot;/c hello world&quot; xxx.xml</span><br><span class=\"line\">        找到某行后打印：sed -n &quot;/path=\\&quot;build\\/make\\&quot;/p&quot; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">        多点操作：sed -e &#x27;1d&#x27; -e &#x27;5,7d&#x27; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">        替换文件内容：sed &quot;s/path=\\&quot;build\\/make\\&quot;/path=\\&quot;hello world\\&quot;/g&quot; xxx.xml</span><br><span class=\"line\">        替换文件内容（基础正则，使用取反来达到懒汉模式）：sed &quot;s/path=\\&quot;[^\\&quot;]*\\&quot;/path=\\&quot;hello world\\&quot;/g&quot; xxx.xml</span><br><span class=\"line\"></span><br><span class=\"line\">awk操作</span><br><span class=\"line\">    $0，整条记录</span><br><span class=\"line\">    $1、$2、$3，输出一个指定的字段</span><br><span class=\"line\">    FS，段分隔符，默认空格</span><br><span class=\"line\">    RS，行分隔符</span><br><span class=\"line\">    NR，行号</span><br><span class=\"line\">    NF，字段数量，$NF，最后一个字段</span><br><span class=\"line\">    ~，表示正则匹配</span><br><span class=\"line\">    //，进行内容匹配</span><br><span class=\"line\"></span><br><span class=\"line\">    输出所有行：awk &#x27;&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出第二行：awk &#x27;NR==2&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出二到五行：awk &#x27;NR&gt;=2&amp;&amp;NR&lt;=5&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出行号：awk &#x27;&#123;print NR,$0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    输出行号：awk &#x27;&#123;print NR&quot; &quot;$0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    分隔符：awk -F &#x27;:&#x27; &#x27;&#123;print $1,$2,$3,$4&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    锚定查找并输出：awk &#x27;/\\&lt;root\\&gt;/&#123;print NR&quot;\\t&quot;$0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    正则匹配：awk &#x27;$0~/root/&#x27; /etc/passwd</span><br><span class=\"line\">    末尾查找字串：awk -F &#x27;:&#x27; &#x27;$NF~/sbin/&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    多个分隔符：awk -F &#x27;[:/]+&#x27; &#x27;&#123;print $5,$6,$7,$8&#125;&#x27; /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\">    开始前输入：awk -F : &#x27;BEGIN&#123;print &quot;USERNAME&quot;&#125; &#123;print $1&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    前后输入：awk -F : &#x27;BEGIN&#123;print &quot;USERNAME&quot;&#125; &#123;print $1&#125; END&#123;print &quot;END OF FILE&quot;&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    统计次数：awk &#x27;BEGIN&#123;num=0&#125;/nologin/&#123;num++&#125;END&#123;print num&#125;&#x27; /etc/passwd</span><br><span class=\"line\">    遍历：awk -F : &#x27;&#123;ken[$NF]++&#125;END&#123;for (i in ken) print ken[i] i&#125;&#x27; /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    cat access.log | awk &#x27;&#123;print $1&#125;&#x27; | sort | uniq -c | sort -rn | head -3</span><br><span class=\"line\">    awk &#x27;&#123;ken[$1]++&#125;END&#123;for (i in ken) print ken[i],i&#125;&#x27; access.log | sort -rn | head -3</span><br></pre></td></tr></table></figure>"},{"title":"升级repo的好处","date":"2022-06-29T16:00:00.000Z","_content":"\n升级repo的好处\n\n<!--more-->\n\n## Gerrit升级提示\n升级Gerrit之后, 由于很多新feature只在新版的git和repo上得到支持. 已经不兼容过旧的git和repo版本. \n停止对python3.5以下,git版本在2.26.1和repo launcher 2.21以下的支持\n\n届时, repo init和repo sync会在这些老版本的组件上报错.\n\n## 如何升级?\n### Ubuntu 17.04, 18.04(含)及以上\nUbuntu 18.04以上已经自带python3.6+的版本. 所以只需要升级git以及repo launcher即可\n\n### Ubuntu 16.04(含)及以下\nUbuntu 16.04及以下的机器. 默认是python是3.5以下的, 所以除了18.04需要做的升级之外. 还需要升级python.\n另外你只需要安装了python3.6+就可以, 即使默认还是在使用python2.7也不会有问题. (切了环境就很容易崩掉)\n\n但是请务必注意, 升级python有可能造成系统组件的紊乱.发现很多官方都已经宣布不支持16.04以下的版本的, 比如很多apt源以及packages. 同时, 16.04以及以下的OS会遇到越来越多的麻烦.所以强烈建议还在使用16.04的朋友尽快升级到20.04以上的版本\n\n## 这些组件升级了之后有哪些好处?\n\n### 升级git\n1. `git的fetch协议`, 已经有了更有效率的`protocol v2`. 这个协议在`git fetch`最开始的`refs advertised`阶段的提升尤为明显.尤其对于`platform/frameworks/base`这种动辄`40万refs`的大仓库\n从`git 2.18`开始, `git`支持`protocol V2`,从`2.26`开始,` git`默认使用`protocol V2`\n然而`Ubuntu 18.04`最高只能下载到`2.17`的`git`. 所以实际上, 几乎`80%`的研发使用的`git`版本过老\n`Git`进阶这篇文档详细解释了`protocol V1`. 有兴趣的朋友可以和官方文档对照着一起看, 了解其中的原因 [Git protocol V2](https://git-scm.com/docs/protocol-v2)\n2. `partial-clone`.这个功能可以极大改善我们的工程师下载大型仓库的体验. 根据实验我们下载大仓库的代码时间从2小时30分钟, 减少为45分钟左右. 提升极其巨大.\n然而此功能也只能在`2.22`之后的版本才支持\n3. `git-lfs`也是一个重要功能. 我们会逐步迁移binary过多的仓库到lfs上. 众所周知git本身并不适合处理`binary`, 以至于我们的git性能在各方面都大幅下降. 当我们迁移完毕之后, 版本过低的用户将无法下载到正常的文件.\n\n### 升级repo launcher\n1. 很多人使用的repo, 已经是2015年的了, 严重落后. 很多重要feature都未得到更新.比如partial-clone git-lfs, 以及新的push fetch的url分离 等等功能. 我们建议无论你使用的是什么版本的repo启动器, 都统一升级到最新版\n2. `git-lfs`需要最新版本的launcher的支持, 否则upload将会出现一些问题\n\n### 升级Python\n1. 新版repo只支持`python3.6+`的版本. 所以我们需要更新python","source":"_posts/2022-6-30升级repo的好处.md","raw":"---\ntitle: 升级repo的好处\ndate: 2022-6-30\ntags: [git]\n---\n\n升级repo的好处\n\n<!--more-->\n\n## Gerrit升级提示\n升级Gerrit之后, 由于很多新feature只在新版的git和repo上得到支持. 已经不兼容过旧的git和repo版本. \n停止对python3.5以下,git版本在2.26.1和repo launcher 2.21以下的支持\n\n届时, repo init和repo sync会在这些老版本的组件上报错.\n\n## 如何升级?\n### Ubuntu 17.04, 18.04(含)及以上\nUbuntu 18.04以上已经自带python3.6+的版本. 所以只需要升级git以及repo launcher即可\n\n### Ubuntu 16.04(含)及以下\nUbuntu 16.04及以下的机器. 默认是python是3.5以下的, 所以除了18.04需要做的升级之外. 还需要升级python.\n另外你只需要安装了python3.6+就可以, 即使默认还是在使用python2.7也不会有问题. (切了环境就很容易崩掉)\n\n但是请务必注意, 升级python有可能造成系统组件的紊乱.发现很多官方都已经宣布不支持16.04以下的版本的, 比如很多apt源以及packages. 同时, 16.04以及以下的OS会遇到越来越多的麻烦.所以强烈建议还在使用16.04的朋友尽快升级到20.04以上的版本\n\n## 这些组件升级了之后有哪些好处?\n\n### 升级git\n1. `git的fetch协议`, 已经有了更有效率的`protocol v2`. 这个协议在`git fetch`最开始的`refs advertised`阶段的提升尤为明显.尤其对于`platform/frameworks/base`这种动辄`40万refs`的大仓库\n从`git 2.18`开始, `git`支持`protocol V2`,从`2.26`开始,` git`默认使用`protocol V2`\n然而`Ubuntu 18.04`最高只能下载到`2.17`的`git`. 所以实际上, 几乎`80%`的研发使用的`git`版本过老\n`Git`进阶这篇文档详细解释了`protocol V1`. 有兴趣的朋友可以和官方文档对照着一起看, 了解其中的原因 [Git protocol V2](https://git-scm.com/docs/protocol-v2)\n2. `partial-clone`.这个功能可以极大改善我们的工程师下载大型仓库的体验. 根据实验我们下载大仓库的代码时间从2小时30分钟, 减少为45分钟左右. 提升极其巨大.\n然而此功能也只能在`2.22`之后的版本才支持\n3. `git-lfs`也是一个重要功能. 我们会逐步迁移binary过多的仓库到lfs上. 众所周知git本身并不适合处理`binary`, 以至于我们的git性能在各方面都大幅下降. 当我们迁移完毕之后, 版本过低的用户将无法下载到正常的文件.\n\n### 升级repo launcher\n1. 很多人使用的repo, 已经是2015年的了, 严重落后. 很多重要feature都未得到更新.比如partial-clone git-lfs, 以及新的push fetch的url分离 等等功能. 我们建议无论你使用的是什么版本的repo启动器, 都统一升级到最新版\n2. `git-lfs`需要最新版本的launcher的支持, 否则upload将会出现一些问题\n\n### 升级Python\n1. 新版repo只支持`python3.6+`的版本. 所以我们需要更新python","slug":"2022-6-30升级repo的好处","published":1,"updated":"2022-06-30T16:01:06.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl517rnjm000ua4vvcsg9cb62","content":"<p>升级repo的好处</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Gerrit升级提示\"><a href=\"#Gerrit升级提示\" class=\"headerlink\" title=\"Gerrit升级提示\"></a>Gerrit升级提示</h2><p>升级Gerrit之后, 由于很多新feature只在新版的git和repo上得到支持. 已经不兼容过旧的git和repo版本.<br>停止对python3.5以下,git版本在2.26.1和repo launcher 2.21以下的支持</p>\n<p>届时, repo init和repo sync会在这些老版本的组件上报错.</p>\n<h2 id=\"如何升级\"><a href=\"#如何升级\" class=\"headerlink\" title=\"如何升级?\"></a>如何升级?</h2><h3 id=\"Ubuntu-17-04-18-04-含-及以上\"><a href=\"#Ubuntu-17-04-18-04-含-及以上\" class=\"headerlink\" title=\"Ubuntu 17.04, 18.04(含)及以上\"></a>Ubuntu 17.04, 18.04(含)及以上</h3><p>Ubuntu 18.04以上已经自带python3.6+的版本. 所以只需要升级git以及repo launcher即可</p>\n<h3 id=\"Ubuntu-16-04-含-及以下\"><a href=\"#Ubuntu-16-04-含-及以下\" class=\"headerlink\" title=\"Ubuntu 16.04(含)及以下\"></a>Ubuntu 16.04(含)及以下</h3><p>Ubuntu 16.04及以下的机器. 默认是python是3.5以下的, 所以除了18.04需要做的升级之外. 还需要升级python.<br>另外你只需要安装了python3.6+就可以, 即使默认还是在使用python2.7也不会有问题. (切了环境就很容易崩掉)</p>\n<p>但是请务必注意, 升级python有可能造成系统组件的紊乱.发现很多官方都已经宣布不支持16.04以下的版本的, 比如很多apt源以及packages. 同时, 16.04以及以下的OS会遇到越来越多的麻烦.所以强烈建议还在使用16.04的朋友尽快升级到20.04以上的版本</p>\n<h2 id=\"这些组件升级了之后有哪些好处\"><a href=\"#这些组件升级了之后有哪些好处\" class=\"headerlink\" title=\"这些组件升级了之后有哪些好处?\"></a>这些组件升级了之后有哪些好处?</h2><h3 id=\"升级git\"><a href=\"#升级git\" class=\"headerlink\" title=\"升级git\"></a>升级git</h3><ol>\n<li><code>git的fetch协议</code>, 已经有了更有效率的<code>protocol v2</code>. 这个协议在<code>git fetch</code>最开始的<code>refs advertised</code>阶段的提升尤为明显.尤其对于<code>platform/frameworks/base</code>这种动辄<code>40万refs</code>的大仓库<br>从<code>git 2.18</code>开始, <code>git</code>支持<code>protocol V2</code>,从<code>2.26</code>开始,<code> git</code>默认使用<code>protocol V2</code><br>然而<code>Ubuntu 18.04</code>最高只能下载到<code>2.17</code>的<code>git</code>. 所以实际上, 几乎<code>80%</code>的研发使用的<code>git</code>版本过老<br><code>Git</code>进阶这篇文档详细解释了<code>protocol V1</code>. 有兴趣的朋友可以和官方文档对照着一起看, 了解其中的原因 <a href=\"https://git-scm.com/docs/protocol-v2\">Git protocol V2</a></li>\n<li><code>partial-clone</code>.这个功能可以极大改善我们的工程师下载大型仓库的体验. 根据实验我们下载大仓库的代码时间从2小时30分钟, 减少为45分钟左右. 提升极其巨大.<br>然而此功能也只能在<code>2.22</code>之后的版本才支持</li>\n<li><code>git-lfs</code>也是一个重要功能. 我们会逐步迁移binary过多的仓库到lfs上. 众所周知git本身并不适合处理<code>binary</code>, 以至于我们的git性能在各方面都大幅下降. 当我们迁移完毕之后, 版本过低的用户将无法下载到正常的文件.</li>\n</ol>\n<h3 id=\"升级repo-launcher\"><a href=\"#升级repo-launcher\" class=\"headerlink\" title=\"升级repo launcher\"></a>升级repo launcher</h3><ol>\n<li>很多人使用的repo, 已经是2015年的了, 严重落后. 很多重要feature都未得到更新.比如partial-clone git-lfs, 以及新的push fetch的url分离 等等功能. 我们建议无论你使用的是什么版本的repo启动器, 都统一升级到最新版</li>\n<li><code>git-lfs</code>需要最新版本的launcher的支持, 否则upload将会出现一些问题</li>\n</ol>\n<h3 id=\"升级Python\"><a href=\"#升级Python\" class=\"headerlink\" title=\"升级Python\"></a>升级Python</h3><ol>\n<li>新版repo只支持<code>python3.6+</code>的版本. 所以我们需要更新python</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>升级repo的好处</p>","more":"<h2 id=\"Gerrit升级提示\"><a href=\"#Gerrit升级提示\" class=\"headerlink\" title=\"Gerrit升级提示\"></a>Gerrit升级提示</h2><p>升级Gerrit之后, 由于很多新feature只在新版的git和repo上得到支持. 已经不兼容过旧的git和repo版本.<br>停止对python3.5以下,git版本在2.26.1和repo launcher 2.21以下的支持</p>\n<p>届时, repo init和repo sync会在这些老版本的组件上报错.</p>\n<h2 id=\"如何升级\"><a href=\"#如何升级\" class=\"headerlink\" title=\"如何升级?\"></a>如何升级?</h2><h3 id=\"Ubuntu-17-04-18-04-含-及以上\"><a href=\"#Ubuntu-17-04-18-04-含-及以上\" class=\"headerlink\" title=\"Ubuntu 17.04, 18.04(含)及以上\"></a>Ubuntu 17.04, 18.04(含)及以上</h3><p>Ubuntu 18.04以上已经自带python3.6+的版本. 所以只需要升级git以及repo launcher即可</p>\n<h3 id=\"Ubuntu-16-04-含-及以下\"><a href=\"#Ubuntu-16-04-含-及以下\" class=\"headerlink\" title=\"Ubuntu 16.04(含)及以下\"></a>Ubuntu 16.04(含)及以下</h3><p>Ubuntu 16.04及以下的机器. 默认是python是3.5以下的, 所以除了18.04需要做的升级之外. 还需要升级python.<br>另外你只需要安装了python3.6+就可以, 即使默认还是在使用python2.7也不会有问题. (切了环境就很容易崩掉)</p>\n<p>但是请务必注意, 升级python有可能造成系统组件的紊乱.发现很多官方都已经宣布不支持16.04以下的版本的, 比如很多apt源以及packages. 同时, 16.04以及以下的OS会遇到越来越多的麻烦.所以强烈建议还在使用16.04的朋友尽快升级到20.04以上的版本</p>\n<h2 id=\"这些组件升级了之后有哪些好处\"><a href=\"#这些组件升级了之后有哪些好处\" class=\"headerlink\" title=\"这些组件升级了之后有哪些好处?\"></a>这些组件升级了之后有哪些好处?</h2><h3 id=\"升级git\"><a href=\"#升级git\" class=\"headerlink\" title=\"升级git\"></a>升级git</h3><ol>\n<li><code>git的fetch协议</code>, 已经有了更有效率的<code>protocol v2</code>. 这个协议在<code>git fetch</code>最开始的<code>refs advertised</code>阶段的提升尤为明显.尤其对于<code>platform/frameworks/base</code>这种动辄<code>40万refs</code>的大仓库<br>从<code>git 2.18</code>开始, <code>git</code>支持<code>protocol V2</code>,从<code>2.26</code>开始,<code> git</code>默认使用<code>protocol V2</code><br>然而<code>Ubuntu 18.04</code>最高只能下载到<code>2.17</code>的<code>git</code>. 所以实际上, 几乎<code>80%</code>的研发使用的<code>git</code>版本过老<br><code>Git</code>进阶这篇文档详细解释了<code>protocol V1</code>. 有兴趣的朋友可以和官方文档对照着一起看, 了解其中的原因 <a href=\"https://git-scm.com/docs/protocol-v2\">Git protocol V2</a></li>\n<li><code>partial-clone</code>.这个功能可以极大改善我们的工程师下载大型仓库的体验. 根据实验我们下载大仓库的代码时间从2小时30分钟, 减少为45分钟左右. 提升极其巨大.<br>然而此功能也只能在<code>2.22</code>之后的版本才支持</li>\n<li><code>git-lfs</code>也是一个重要功能. 我们会逐步迁移binary过多的仓库到lfs上. 众所周知git本身并不适合处理<code>binary</code>, 以至于我们的git性能在各方面都大幅下降. 当我们迁移完毕之后, 版本过低的用户将无法下载到正常的文件.</li>\n</ol>\n<h3 id=\"升级repo-launcher\"><a href=\"#升级repo-launcher\" class=\"headerlink\" title=\"升级repo launcher\"></a>升级repo launcher</h3><ol>\n<li>很多人使用的repo, 已经是2015年的了, 严重落后. 很多重要feature都未得到更新.比如partial-clone git-lfs, 以及新的push fetch的url分离 等等功能. 我们建议无论你使用的是什么版本的repo启动器, 都统一升级到最新版</li>\n<li><code>git-lfs</code>需要最新版本的launcher的支持, 否则upload将会出现一些问题</li>\n</ol>\n<h3 id=\"升级Python\"><a href=\"#升级Python\" class=\"headerlink\" title=\"升级Python\"></a>升级Python</h3><ol>\n<li>新版repo只支持<code>python3.6+</code>的版本. 所以我们需要更新python</li>\n</ol>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl517rnj00000a4vvbvota9no","tag_id":"cl517rnj70002a4vveu8i0v33","_id":"cl517rnjb0007a4vvbf7xgtet"},{"post_id":"cl517rnj40001a4vv0hwe8nyv","tag_id":"cl517rnjb0006a4vv744ha5ij","_id":"cl517rnjd000ca4vvevn90pkn"},{"post_id":"cl517rnj80003a4vv39ol061g","tag_id":"cl517rnjd000aa4vv0qzc2q09","_id":"cl517rnje000ea4vv7ym224zy"},{"post_id":"cl517rnj90004a4vveqryg3es","tag_id":"cl517rnje000da4vv5kjpbcm8","_id":"cl517rnjf000ia4vvh5w2a2ya"},{"post_id":"cl517rnj90004a4vveqryg3es","tag_id":"cl517rnje000fa4vv0a0s2y8t","_id":"cl517rnjf000ja4vv65ex18kl"},{"post_id":"cl517rnj90004a4vveqryg3es","tag_id":"cl517rnje000ga4vv3wjsbzua","_id":"cl517rnjg000la4vvaffkeyc2"},{"post_id":"cl517rnja0005a4vvfhvffcc8","tag_id":"cl517rnjf000ha4vvhripcqd9","_id":"cl517rnjg000ma4vv594tah0h"},{"post_id":"cl517rnjb0008a4vva652hpkd","tag_id":"cl517rnje000da4vv5kjpbcm8","_id":"cl517rnjh000pa4vv4ax64g77"},{"post_id":"cl517rnjb0008a4vva652hpkd","tag_id":"cl517rnjg000na4vvbb9d5it1","_id":"cl517rnjh000qa4vvelg7gt92"},{"post_id":"cl517rnjc0009a4vvborsgwuj","tag_id":"cl517rnje000da4vv5kjpbcm8","_id":"cl517rnjh000sa4vvb1vqdb6b"},{"post_id":"cl517rnjd000ba4vv9bl2ejab","tag_id":"cl517rnjh000ra4vv9w233b8m","_id":"cl517rnjh000ta4vvbyr29d7m"},{"post_id":"cl517rnjm000ua4vvcsg9cb62","tag_id":"cl517rnje000da4vv5kjpbcm8","_id":"cl517rnjn000va4vvbga2hcwt"}],"Tag":[{"name":"DB","_id":"cl517rnj70002a4vveu8i0v33"},{"name":"环境","_id":"cl517rnjb0006a4vv744ha5ij"},{"name":"攻击","_id":"cl517rnjd000aa4vv0qzc2q09"},{"name":"git","_id":"cl517rnje000da4vv5kjpbcm8"},{"name":"merge","_id":"cl517rnje000fa4vv0a0s2y8t"},{"name":"策略","_id":"cl517rnje000ga4vv3wjsbzua"},{"name":"python","_id":"cl517rnjf000ha4vvhripcqd9"},{"name":"lfs","_id":"cl517rnjg000na4vvbb9d5it1"},{"name":"linux","_id":"cl517rnjh000ra4vv9w233b8m"}]}}